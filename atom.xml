<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ionluo的个人博客站点</title>
  
  <subtitle>记录生活和技术的点点滴滴</subtitle>
  <link href="http://www.ionluo.cn/blog/atom.xml" rel="self"/>
  
  <link href="http://www.ionluo.cn/blog/"/>
  <updated>2023-11-28T02:22:16.834Z</updated>
  <id>http://www.ionluo.cn/blog/</id>
  
  <author>
    <name>ionluo</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【前端】乱码经验贴</title>
    <link href="http://www.ionluo.cn/blog/posts/505f51e.html"/>
    <id>http://www.ionluo.cn/blog/posts/505f51e.html</id>
    <published>2023-11-02T04:55:32.000Z</published>
    <updated>2023-11-28T02:22:16.834Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://blog.cdn.ionluo.cn/blog/b099c8983c8742589c7c926398bde5e0.png" alt="img"></p><h2 id="乱码恢复"><a href="#乱码恢复" class="headerlink" title="乱码恢复"></a>乱码恢复</h2><p><a href="http://www.mytju.com/classCode/tools/messyCodeRecover.asp">http://www.mytju.com/classCode/tools/messyCodeRecover.asp</a></p><p><a href="https://wrtools.top/coderepair.php">https://wrtools.top/coderepair.php</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;http://blog.cdn.ionluo.cn/blog/b099c8983c8742589c7c926398bde5e0.png&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;乱码恢复&quot;&gt;&lt;a href=&quot;#乱码恢复&quot; class=&quot;header</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>【前端】合并2个表格数据</title>
    <link href="http://www.ionluo.cn/blog/posts/f3a90eab.html"/>
    <id>http://www.ionluo.cn/blog/posts/f3a90eab.html</id>
    <published>2023-10-20T09:58:19.000Z</published>
    <updated>2023-10-20T10:00:52.926Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将tableB合并到tableA的起始位置(x,y)之中</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mergeTable</span>(<span class="params">tableA, tableB, &#123;x = <span class="number">0</span>, y = <span class="number">0</span>&#125;</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> $tableA = $(tableA).clone(), $tableB = $(tableB).clone();</span><br><span class="line">    <span class="keyword">let</span> $trsA = $tableA.find(<span class="string">&#x27;&gt;*&gt;tr, &gt;tr&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> $trsB = $tableB.find(<span class="string">&#x27;&gt;*&gt;tr, &gt;tr&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> tableHeightA = $trsA.length, tableHeightB = $trsB.length;</span><br><span class="line">    <span class="keyword">let</span> tableWidthA = <span class="number">0</span>, tableWidthB = <span class="number">0</span>;</span><br><span class="line">    $.each($trsA, <span class="function">(<span class="params">i, tr</span>) =&gt;</span> &#123; tableWidthA = <span class="built_in">Math</span>.max($(tr).find(<span class="string">&#x27;&gt;td, &gt;th&#x27;</span>).length, tableWidthA) &#125;);</span><br><span class="line">    $.each($trsB, <span class="function">(<span class="params">i, tr</span>) =&gt;</span> &#123; tableWidthB = <span class="built_in">Math</span>.max($(tr).find(<span class="string">&#x27;&gt;td, &gt;th&#x27;</span>).length, tableWidthB) &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// fill tableA and tableB with the same number of tr/td</span></span><br><span class="line">    <span class="keyword">const</span> xNum = tableWidthB - tableWidthA + x, yNum = tableHeightB - tableHeightA + y;</span><br><span class="line">    xNum &gt; <span class="number">0</span> &amp;&amp; $.each($trsA, <span class="function">(<span class="params">i, tr</span>) =&gt;</span> &#123; $(tr).append($(<span class="string">&#x27;&lt;td&gt;&#x27;</span>.repeat(xNum))) &#125;); <span class="comment">// 差 xNum 个td</span></span><br><span class="line">    yNum &gt; <span class="number">0</span> &amp;&amp; $trsA.parent().append($(<span class="string">`&lt;tr&gt;<span class="subst">$&#123;<span class="string">&#x27;&lt;td&gt;&#x27;</span>.repeat(tableWidthB + x)&#125;</span>&lt;/tr&gt;`</span>.repeat(yNum))) &amp;&amp; ($trsA = $tableA.find(<span class="string">&#x27;&gt;*&gt;tr, &gt;tr&#x27;</span>)); <span class="comment">// 差 yNum 个tr</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// replace td in tableA with tableB, unless border style</span></span><br><span class="line">    $.each($trsB, <span class="function"><span class="params">i</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> $tdsA = $($trsA[i + y]).find(<span class="string">&#x27;&gt;td, &gt;th&#x27;</span>);</span><br><span class="line">        <span class="keyword">const</span> $tdsB = $($trsB[i]).find(<span class="string">&#x27;&gt;td, &gt;th&#x27;</span>);</span><br><span class="line">        $.each($tdsB, <span class="function"><span class="params">j</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> $tdA = $($tdsA[j + x]);</span><br><span class="line">            <span class="keyword">const</span> $tdB = $($tdsB[j]);</span><br><span class="line">            $tdB.css(<span class="string">&#x27;border&#x27;</span>, $tdA.css(<span class="string">&#x27;border&#x27;</span>));</span><br><span class="line">            $tdA.replaceWith($tdB);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// fill td in tableA, fixup irregular table cause by colspan and rowspan</span></span><br><span class="line">    <span class="keyword">const</span> $trs = $tableA.find(<span class="string">&#x27;&gt;*&gt;tr, &gt;tr&#x27;</span>);</span><br><span class="line">    <span class="keyword">let</span> maxCol = <span class="number">0</span>;</span><br><span class="line">    $.each($trs, <span class="function">(<span class="params">i, tr</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> $tr = $(tr);</span><br><span class="line">        <span class="keyword">const</span> $tds = $tr.find(<span class="string">&#x27;&gt;td, &gt;th&#x27;</span>);</span><br><span class="line">        <span class="keyword">let</span> col = <span class="built_in">parseInt</span>($tr.attr(<span class="string">&#x27;data-col&#x27;</span>)) || <span class="number">0</span>;</span><br><span class="line">        $.each($tds, <span class="function">(<span class="params">j, td</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> rowspan = <span class="built_in">parseInt</span>($(td).attr(<span class="string">&#x27;rowspan&#x27;</span>)) || <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">const</span> colspan = <span class="built_in">parseInt</span>($(td).attr(<span class="string">&#x27;colspan&#x27;</span>)) || <span class="number">1</span>;</span><br><span class="line">            col += colspan;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> t = <span class="number">1</span>; t &lt; rowspan; t++) &#123;</span><br><span class="line">                <span class="keyword">const</span> dataCol = <span class="built_in">parseInt</span>($trs[i + t].attr(<span class="string">&#x27;data-col&#x27;</span>)) || <span class="number">0</span>;</span><br><span class="line">                $trs[i + t].attr(<span class="string">&#x27;data-col&#x27;</span>, dataCol + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        $tr.attr(<span class="string">&#x27;data-col&#x27;</span>, col); <span class="comment">// 遍历完成后再次记录当前的col给下面填充用</span></span><br><span class="line">        maxCol = <span class="built_in">Math</span>.max(maxCol, col);</span><br><span class="line">    &#125;);</span><br><span class="line">    $.each($trs, <span class="function">(<span class="params">i, tr</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> $tr = $(tr);</span><br><span class="line">        <span class="keyword">const</span> col = <span class="built_in">parseInt</span>($tr.attr(<span class="string">&#x27;data-col&#x27;</span>)) || <span class="number">0</span>;</span><br><span class="line">        col &amp;&amp; col &lt; maxCol &amp;&amp; $tr.append($(<span class="string">&#x27;&lt;td&gt;&#x27;</span>.repeat(maxCol - col)));</span><br><span class="line">        $tr.removeAttr(<span class="string">&#x27;data-col&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> $tableA;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取单元格在表格中的位置</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPos</span>(<span class="params">$td</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="number">0</span>, y = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">const</span> $tr = $($td.closest(<span class="string">&#x27;tr&#x27;</span>));</span><br><span class="line">    <span class="keyword">const</span> $table = $($td.closest(<span class="string">&#x27;table&#x27;</span>));</span><br><span class="line">    $.each($table.find(<span class="string">&#x27;&gt;*&gt;tr, &gt;tr&#x27;</span>), <span class="function">(<span class="params">i, tr</span>) =&gt;</span> &#123;</span><br><span class="line">        $(tr).is($tr) &amp;&amp; (y = i);</span><br><span class="line">        $.each($(tr).find(<span class="string">&#x27;&gt;td, &gt;th&#x27;</span>), <span class="function">(<span class="params">j, td</span>) =&gt;</span> &#123;</span><br><span class="line">            $(td).is($td) &amp;&amp; (x = j);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> &#123;x, y&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> position = getPos(tableA.querySelector(<span class="string">&#x27;td&#x27;</span>));</span><br><span class="line"><span class="keyword">const</span> $mergedTable = mergeTable(tableA, tableB, position);</span><br><span class="line">closestTable.replaceWith($mergedTable);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span </summary>
      
    
    
    
    
    <category term="前端" scheme="http://www.ionluo.cn/blog/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="jquery" scheme="http://www.ionluo.cn/blog/tags/jquery/"/>
    
  </entry>
  
  <entry>
    <title>【前端】使用JavaScript控制CSS中的颜色</title>
    <link href="http://www.ionluo.cn/blog/posts/4de4a2fe.html"/>
    <id>http://www.ionluo.cn/blog/posts/4de4a2fe.html</id>
    <published>2023-09-15T06:41:09.000Z</published>
    <updated>2023-09-22T00:55:33.683Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://www.infoq.cn/article/ziwrvjfudh_ac057jomj</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// https://www.zhihu.com/question/317536668</span></span><br><span class="line"><span class="comment">// 灰度算法：Y = ((R*299)+(G*587)+(B*114))/1000</span></span><br><span class="line"><span class="comment">// js 判断颜色是否为深色 阀值 </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">grayLevel</span>(<span class="params">R, G, B</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (R * <span class="number">299</span> + G * <span class="number">587</span> + B * <span class="number">114</span>)/ <span class="number">1000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isGray</span>(<span class="params">R, G, B</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> grayLevel(R, G, B) &gt;= <span class="number">192</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算亮度（黑色最暗，白色最亮，这里正常应该是0-1之间的值，这里似乎不太对劲）</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">rgbToLightness</span>(<span class="params">r,g,b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>/<span class="number">2</span> * (<span class="built_in">Math</span>.max(r,g,b) + <span class="built_in">Math</span>.min(r,g,b))</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 饱和度</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">rgbToSaturation</span>(<span class="params">r,g,b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> L = rgbToLightness(r,g,b);</span><br><span class="line">  <span class="keyword">const</span> max = <span class="built_in">Math</span>.max(r,g,b);</span><br><span class="line">  <span class="keyword">const</span> min = <span class="built_in">Math</span>.min(r,g,b);</span><br><span class="line">  <span class="keyword">return</span> (L === <span class="number">0</span> || L === <span class="number">1</span>)</span><br><span class="line">   ? <span class="number">0</span></span><br><span class="line">   : (max - min)/(<span class="number">1</span> - <span class="built_in">Math</span>.abs(<span class="number">2</span> * L - <span class="number">1</span>));</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 色调</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">rgbToHue</span>(<span class="params">r,g,b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.round(</span><br><span class="line">    <span class="built_in">Math</span>.atan2(</span><br><span class="line">      <span class="built_in">Math</span>.sqrt(<span class="number">3</span>) * (g - b),</span><br><span class="line">      <span class="number">2</span> * r - g - b,</span><br><span class="line">    ) * <span class="number">180</span> / <span class="built_in">Math</span>.PI</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// RGB -&gt; HSL</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">rgbToHsl</span>(<span class="params">r,g,b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> lightness = rgbToLightness(r,g,b);</span><br><span class="line">  <span class="keyword">const</span> saturation = rgbToSaturation(r,g,b);</span><br><span class="line">  <span class="keyword">const</span> hue = rgbToHue(r,g,b);</span><br><span class="line">  <span class="keyword">return</span> [hue, saturation, lightness];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// HSL -&gt; RGB</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hslToRgb</span>(<span class="params">h,s,l</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> C = (<span class="number">1</span> - <span class="built_in">Math</span>.abs(<span class="number">2</span> * l - <span class="number">1</span>)) * s;</span><br><span class="line">  <span class="keyword">const</span> hPrime = h / <span class="number">60</span>;</span><br><span class="line">  <span class="keyword">const</span> X = C * (<span class="number">1</span> - <span class="built_in">Math</span>.abs(hPrime % <span class="number">2</span> - <span class="number">1</span>));</span><br><span class="line">  <span class="keyword">const</span> m = l - C/<span class="number">2</span>;</span><br><span class="line">  <span class="keyword">const</span> withLight = <span class="function">(<span class="params">r,g,b</span>) =&gt;</span> [r+m, g+m, b+m];</span><br><span class="line">  <span class="keyword">if</span> (hPrime &lt;= <span class="number">1</span>) &#123; <span class="keyword">return</span> withLight(C,X,<span class="number">0</span>); &#125; <span class="keyword">else</span></span><br><span class="line">  <span class="keyword">if</span> (hPrime &lt;= <span class="number">2</span>) &#123; <span class="keyword">return</span> withLight(X,C,<span class="number">0</span>); &#125; <span class="keyword">else</span></span><br><span class="line">  <span class="keyword">if</span> (hPrime &lt;= <span class="number">3</span>) &#123; <span class="keyword">return</span> withLight(<span class="number">0</span>,C,X); &#125; <span class="keyword">else</span></span><br><span class="line">  <span class="keyword">if</span> (hPrime &lt;= <span class="number">4</span>) &#123; <span class="keyword">return</span> withLight(<span class="number">0</span>,X,C); &#125; <span class="keyword">else</span></span><br><span class="line">  <span class="keyword">if</span> (hPrime &lt;= <span class="number">5</span>) &#123; <span class="keyword">return</span> withLight(X,<span class="number">0</span>,C); &#125; <span class="keyword">else</span></span><br><span class="line">  <span class="keyword">if</span> (hPrime &lt;= <span class="number">6</span>) &#123; <span class="keyword">return</span> withLight(C,<span class="number">0</span>,X); &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Hex -&gt; RGB</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hexToRgb</span>(<span class="params">hexColor</span>) </span>&#123;</span><br><span class="line">  hexColor = hexColor.slice(<span class="number">1</span>);</span><br><span class="line">  hexColor.length &lt; <span class="number">6</span> &amp;&amp; (hexColor = hexColor.split(<span class="string">&#x27;&#x27;</span>).map(<span class="function"><span class="params">c</span> =&gt;</span> (c + c)).join(<span class="string">&#x27;&#x27;</span>));</span><br><span class="line">  hexColor = hexColor.slice(<span class="number">0</span>, <span class="number">8</span>) <span class="comment">// 最多8位，最后2位是透明度</span></span><br><span class="line">  <span class="comment">// 将颜色的每两位分割开</span></span><br><span class="line">  <span class="keyword">const</span> rgbColors = hexColor.match(<span class="regexp">/.&#123;1,2&#125;/g</span>);</span><br><span class="line">  <span class="comment">// 将每一种颜色从十六进制转换为十进制</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; rgbColors.length; i++) &#123;</span><br><span class="line">    rgbColors[i] = <span class="built_in">parseInt</span>(rgbColors[i], <span class="number">16</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  rgbColors[<span class="number">3</span>] = rgbColors.length === <span class="number">4</span> ? rgbColors[<span class="number">3</span>] / <span class="number">255</span> : <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> rgbColors;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// RGB -&gt; Hex</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">rgbToHex</span>(<span class="params">r, g, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="string">&quot;#&quot;</span> +</span><br><span class="line">    [r, g, b]</span><br><span class="line">      .map(<span class="function">(<span class="params">x</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> hex = x.toString(<span class="number">16</span>);</span><br><span class="line">        <span class="keyword">return</span> hex.length === <span class="number">1</span> ? <span class="string">&quot;0&quot;</span> + hex : hex;</span><br><span class="line">      &#125;)</span><br><span class="line">      .join(<span class="string">&quot;&quot;</span>)</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// rgb颜色对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">rgbToObject</span>(<span class="params">red,green,blue</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [hue, saturation, lightness] = rgbToHsl(red, green, blue);</span><br><span class="line">  <span class="keyword">return</span> &#123;red, green, blue, hue, saturation, lightness&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// hsl颜色对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hslToObject</span>(<span class="params">hue, saturation, lightness</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [red, green, blue] = hslToRgb(hue, saturation, lightness);</span><br><span class="line">  <span class="keyword">return</span> &#123;red, green, blue, hue, saturation, lightness&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 是否灰度颜色</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isGrayscale</span>(<span class="params">r, g, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> color = rgbToObject(r, g, b);</span><br><span class="line">  <span class="keyword">return</span> color.saturation === <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 是否暗色</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isDark</span>(<span class="params">r, g, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> color = rgbToObject(r, g, b);</span><br><span class="line">  <span class="keyword">return</span> color.lightness &lt; <span class="number">0.5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://nekonull.me/share/css-filter-dark-mode/">黑白灰反转，彩色不变</a></p><p>Css方法（存在误差，不太完美）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.cmc-dark-mode</span> &#123;</span><br><span class="line">    <span class="attribute">filter</span>: <span class="built_in">invert</span>(<span class="number">1</span>) <span class="built_in">hue-rotate</span>(<span class="number">180deg</span>);</span><br><span class="line">    <span class="comment">/* filter: invert(1) hue-rotate(180deg) brightness(1.02) */</span>   </span><br><span class="line">    <span class="comment">/* filter: invert(1) hue-rotate(180deg) contrast(0.6) */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.cmc-dark-mode</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">filter</span>: <span class="built_in">invert</span>(<span class="number">1</span>) <span class="built_in">hue-rotate</span>(<span class="number">180deg</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JavaScript方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">grayLevel</span>(<span class="params">R, G, B</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (R * <span class="number">299</span> + G * <span class="number">587</span> + B * <span class="number">114</span>)/ <span class="number">1000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isWhiteBlackGray</span>(<span class="params">R, G, B</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> grayLevel(R, G, B) &gt;= <span class="number">192</span> || grayLevel(R, G, B) &lt;= <span class="number">255</span> - <span class="number">192</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 会将透明度也取反（如果有透明度的话）</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getInverseColor</span>(<span class="params">hexColor</span>) </span>&#123;</span><br><span class="line">  hexColor = hexColor.slice(<span class="number">1</span>);</span><br><span class="line">  hexColor.length === <span class="number">3</span> &amp;&amp; (hexColor += hexColor);</span><br><span class="line">  <span class="comment">// 将六位颜色的每两位分割开</span></span><br><span class="line">  <span class="keyword">var</span> rgbColors = hexColor.match(<span class="regexp">/.&#123;1,2&#125;/g</span>);</span><br><span class="line">  <span class="comment">// 将每一种颜色从十六进制转换为十进制，然后取反</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; rgbColors.length; i++) &#123;</span><br><span class="line">    rgbColors[i] = <span class="built_in">parseInt</span>(rgbColors[i], <span class="number">16</span>);</span><br><span class="line">    rgbColors[i] = <span class="number">255</span> - rgbColors[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> inverseColor = rgbColors.map(<span class="function"><span class="keyword">function</span>(<span class="params">color</span>) </span>&#123; <span class="keyword">return</span> color.toString(<span class="number">16</span>).padStart(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>); &#125;).join(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">  inverseColor = <span class="string">&#x27;#&#x27;</span> + inverseColor;</span><br><span class="line">  <span class="keyword">return</span> inverseColor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://www.zhihu.com/question/317536668">计算机中的RGB值和屏幕亮度有什么关系？RGB值对应着颜色深度(亮度)，那屏幕亮度是什么决定的？</a></p><p><a href="https://blog.csdn.net/weixin_50477991/article/details/118380066">JS判断颜色是否为深色 阀值</a></p><p><a href="https://blog.csdn.net/qq_39282293/article/details/124955747">js颜色常用处理方法</a></p><p><a href="https://www.infoq.cn/article/ziwrvjfudh_ac057jomj">如何使用 JavaScript 控制 CSS 中的颜色</a></p><p><a href="https://juejin.cn/post/7181328175774269500">CSS 如何根据背景色自动切换黑白文字？</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span </summary>
      
    
    
    
    
    <category term="前端" scheme="http://www.ionluo.cn/blog/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>【nodejs】nvm使用记录</title>
    <link href="http://www.ionluo.cn/blog/posts/9856345e.html"/>
    <id>http://www.ionluo.cn/blog/posts/9856345e.html</id>
    <published>2023-08-18T06:08:03.000Z</published>
    <updated>2023-08-18T11:31:37.118Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><code>nvm</code>是一个<code>node</code>版本管理工具。<br>当需要在不同项目中使用不同的node版本时，可以使用<a href="https://so.csdn.net/so/search?q=nvm&spm=1001.2101.3001.7020">nvm</a>切换node版本。</p></blockquote><h2 id="一、下载安装"><a href="#一、下载安装" class="headerlink" title="一、下载安装"></a>一、下载安装</h2><p>点击 <a href="https://github.com/coreybutler/nvm-windows/releases">nvm下载地址</a>，一般选择 最新版本 （latest标志）中 <code>nvm-setup.zip</code> 进行下载安装就行。</p><h2 id="二、设置国内镜像"><a href="#二、设置国内镜像" class="headerlink" title="二、设置国内镜像"></a>二、设置国内镜像</h2><p>可以通过以下命令设置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 设置node镜像</span><br><span class="line">nvm node_mirror https://npm.taobao.org/mirrors/node/</span><br><span class="line"> </span><br><span class="line">// 设置npm镜像</span><br><span class="line">nvm npm_mirror https://npm.taobao.org/mirrors/npm/</span><br></pre></td></tr></table></figure><p>或者通过直接编写 <strong>settings.txt</strong> 文件：</p><ol><li>运行<code>nvm root</code> 显示出nvm的安装目录</li><li>打开nvm文件夹下的<code>settings.txt</code>文件，在最后添加以下代码：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node_mirror: https://npm.taobao.org/mirrors/node/</span><br><span class="line">npm_mirror: https://npm.taobao.org/mirrors/npm/</span><br></pre></td></tr></table></figure><h2 id="三、安装所需要的node版本"><a href="#三、安装所需要的node版本" class="headerlink" title="三、安装所需要的node版本"></a>三、安装所需要的node版本</h2><ol><li>查看已经安装的版本：<code>nvm list</code></li><li>查看网络上可以安装的版本: <code>nvm list available</code>，其中 <strong>LTS</strong> 表示长期稳定版本</li><li>安装对应的node版本(例如16.17.0)：<code>nvm install 16.17.0</code>，如果想安装最新版本则执行 <code>nvm install latest</code></li><li>多个版本时切换对应版本：<code>nvm use 16.17.0</code></li></ol><h2 id="四、命令"><a href="#四、命令" class="headerlink" title="四、命令"></a>四、命令</h2><p>可以执行 <code>nvm</code> 查看可用命令：</p><p><code>nvm arch</code>: 查看当前本机是 32 bit 还是 64 bit</p><p><code>nvm install &lt;version&gt; </code>: <strong>version</strong> 可以是 <em>node.js版本</em> 或 <em><code>latest</code>表示最新的稳定版本</em></p><p><code>nvm list</code> : 查看当前本机使用 nvm 已安装的<a href="https://so.csdn.net/so/search?q=nodejs&spm=1001.2101.3001.7020">nodejs</a>的版本列表</p><p><code>nvm list available</code> : 查看网络上可以安装的版本</p><p><code>nvm on</code>: 启动nvm</p><p><code>nvm off</code>: 禁用nvm</p><p><code>nvm proxy [url]</code>: 设置用于下载的代理。将[url]留空以查看当前代理。将[url]设置为“无”以删除代理</p><blockquote><p>nvm proxy <a href="http://server:port">http://server:port</a></p><p>nvm proxy none</p></blockquote><p><code>nvm node_mirror [url]</code>: 设置节点镜像。默认<a href="https://nodejs.org/dist/%EF%BC%8C%E5%B0%86[url]%E7%95%99%E7%A9%BA%E4%BB%A5%E4%BD%BF%E7%94%A8%E9%BB%98%E8%AE%A4url">https://nodejs.org/dist/，将[url]留空以使用默认url</a></p><p><code>nvm npm_mirror [url]</code>: 设置npm镜像。默认<a href="https://github.com/npm/cli/archive/%EF%BC%8C%E5%B0%86[url]%E7%95%99%E7%A9%BA%E4%B8%BA%E9%BB%98%E8%AE%A4url">https://github.com/npm/cli/archive/，将[url]留空为默认url</a></p><p><code>nvm uninstall &lt;version&gt;</code> : 卸载指定版本的 nodejs</p><p><code>nvm use [version]</code>：使用指定版本的 nodejs(必须是已经安装过的)</p><p><code>nvm root [path]</code>：如果未设置 ，则将显示当前根目录。设置nvm应存储不同版本node.js的目录。</p><p><strong>PS</strong>: 记得得使用管理员身份打开cmd</p><h2 id="五、QA"><a href="#五、QA" class="headerlink" title="五、QA"></a>五、QA</h2><p>Q：报 <code>Node.js v12.16.1 is not yet released or available</code><br>A：大概率是node镜像源没设置好，可按照上面 <em>设置国内镜像</em> 配置一下。再不行则 <a href="https://nodejs.org/dist/">下载对应版本zip包</a> ，解压放到nvm安装路径（安装路径可通过cmd执行<code>nvm root</code>查询）</p><p>Q：使用<code>nvm use [version]</code>切换node版本时，报<code>无法将“npm”项识别...</code><br>A：这个大概率是对应版本的文件夹下的node_modules文件夹为空，，它里面没有mpm这个包。导致这个问题是因为只安装了node，而没有安装npm。<br>解决方案是先 使用<code>nvm uninstall [version]</code>卸载掉刚刚的node版本（或者直接删除这个版本的文件夹），然后按照 <em>设置国内镜像</em> 配置一下，最后在使用<code>nvm install &lt;version&gt; </code>重新安装对应版本的node<br>————————————————<br>版权声明：本文为CSDN博主「Henry_楠」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/haonan_z/article/details/126725912">https://blog.csdn.net/haonan_z/article/details/126725912</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;nvm&lt;/code&gt;是一个&lt;code&gt;node&lt;/code&gt;版本管理工具。&lt;br&gt;当需要在不同项目中使用不同的node版本时，可以使用&lt;a href=&quot;https://so.csdn.net/so/search?q=nvm&amp;spm=10</summary>
      
    
    
    
    
    <category term="nodejs" scheme="http://www.ionluo.cn/blog/tags/nodejs/"/>
    
    <category term="nvm" scheme="http://www.ionluo.cn/blog/tags/nvm/"/>
    
  </entry>
  
  <entry>
    <title>【转载】VirtualBox上Centos7磁盘扩容</title>
    <link href="http://www.ionluo.cn/blog/posts/6f31c0a.html"/>
    <id>http://www.ionluo.cn/blog/posts/6f31c0a.html</id>
    <published>2023-08-11T08:20:54.000Z</published>
    <updated>2023-09-15T02:09:01.505Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://so.csdn.net/so/search?q=centos7&spm=1001.2101.3001.7020">centos7</a>中默认使用的是xfs文件系统,本文操作为扩大已有文件系统的容量</p><p>扇区–&gt;物理分区–&gt;物理卷(pv)–&gt;卷组(vg)–&gt;逻辑卷(lv)–&gt;文件系统</p><p>1.查看文件系统容量可用情况: df -h</p><p><img src="http://blog.cdn.ionluo.cn/blog/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhZXlkeQ==,size_16,color_FFFFFF,t_70.png" alt="img"></p><p>2.查看现有磁盘和分区状况: fdisk -l</p><p><img src="http://blog.cdn.ionluo.cn/blog/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhZXlkeQ==,size_16,color_FFFFFF,t_70-16917423444461.png" alt="img"></p><p>3.给sda磁盘新建分区</p><p>①执行命令 fdisk /dev/sda 发现报错</p><p><img src="http://blog.cdn.ionluo.cn/blog/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhZXlkeQ==,size_16,color_FFFFFF,t_70-16917423444462.png" alt="img"></p><p>②报错原因:没有可用的扇区</p><p><img src="http://blog.cdn.ionluo.cn/blog/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhZXlkeQ==,size_16,color_FFFFFF,t_70-16917423444463.png" alt="img"></p><p>③.问题解决:增加虚拟机可用磁盘空间</p><p>将虚拟就可用磁盘扩大10G(记得先关闭虚拟机再操作此步骤)</p><p><img src="http://blog.cdn.ionluo.cn/blog/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhZXlkeQ==,size_16,color_FFFFFF,t_70-16917423444464.png" alt="img"></p><p>重新查看磁盘及分区使用状况发现可用扇区增加</p><p><img src="http://blog.cdn.ionluo.cn/blog/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhZXlkeQ==,size_16,color_FFFFFF,t_70-16917423444475.png" alt="img"></p><p>4.重新新建分区:fdisk /dev/sda</p><p><img src="http://blog.cdn.ionluo.cn/blog/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhZXlkeQ==,size_16,color_FFFFFF,t_70-16917423444476.png" alt="img"></p><p><img src="http://blog.cdn.ionluo.cn/blog/20190422113228608.png" alt="img"></p><p><img src="http://blog.cdn.ionluo.cn/blog/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhZXlkeQ==,size_16,color_FFFFFF,t_70-16917423444477.png" alt="img"></p><p>5.使用命令mkfs.xfs /dev/sda4格式化新建的分区(格式化前需要先重启,命令reboot)</p><p>6.把新加的硬盘分区创建为物理卷</p><p>创建命令:pvcreate /dev/sda4</p><p><img src="http://blog.cdn.ionluo.cn/blog/20190422132225983.png" alt="img"></p><p>查看命令:pvdisplay   </p><p><img src="http://blog.cdn.ionluo.cn/blog/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhZXlkeQ==,size_16,color_FFFFFF,t_70-16917423444478.png" alt="img"></p><p>7.将新建的物理卷(pv)添加到卷组(vg)</p><p>查看命令:vgdisplay  扩展命令:vgextend centos /dev/sda4</p><p><img src="http://blog.cdn.ionluo.cn/blog/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhZXlkeQ==,size_16,color_FFFFFF,t_70-16917423444479.png" alt="img"></p><p>8.扩展逻辑卷(lv)</p><p>查看命令:lvdisplay 扩展命令:lvextend -L +10G /dev/centos/root</p><p><img src="http://blog.cdn.ionluo.cn/blog/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhZXlkeQ==,size_16,color_FFFFFF,t_70-169174234444810.png" alt="img"></p><p>9.扩展文件系统</p><p>查看命令:df -h  扩展命令:xfs_growfs /dev/centos/root(本命令只适用于xfs文件系统,可使用<code>df -Th命令查看</code>)</p><p><img src="http://blog.cdn.ionluo.cn/blog/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhZXlkeQ==,size_16,color_FFFFFF,t_70-169174234444811.png" alt="img"></p><blockquote><p>原文链接：<a href="https://blog.csdn.net/haeydy/article/details/89447689">https://blog.csdn.net/haeydy/article/details/89447689</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://so.csdn.net/so/search?q=centos7&amp;spm=1001.2101.3001.7020&quot;&gt;centos7&lt;/a&gt;中默认使用的是xfs文件系统,本文操作为扩大已有文件系统的容量&lt;/p&gt;
&lt;p&gt;扇区–&amp;gt;物理分区–&amp;</summary>
      
    
    
    
    
    <category term="Linux" scheme="http://www.ionluo.cn/blog/tags/Linux/"/>
    
    <category term="转载" scheme="http://www.ionluo.cn/blog/tags/%E8%BD%AC%E8%BD%BD/"/>
    
    <category term="VirtualBox" scheme="http://www.ionluo.cn/blog/tags/VirtualBox/"/>
    
    <category term="Centos7" scheme="http://www.ionluo.cn/blog/tags/Centos7/"/>
    
  </entry>
  
  <entry>
    <title>【前端】我的组件</title>
    <link href="http://www.ionluo.cn/blog/posts/277b5fc4.html"/>
    <id>http://www.ionluo.cn/blog/posts/277b5fc4.html</id>
    <published>2023-07-03T07:17:05.000Z</published>
    <updated>2023-08-10T07:30:02.849Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ES5"><a href="#ES5" class="headerlink" title="ES5"></a>ES5</h2><h3 id="弹窗"><a href="#弹窗" class="headerlink" title="弹窗"></a>弹窗</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $popup = &#123;</span><br><span class="line">    alert: <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> isAndroid =  ~navigator.userAgent.indexOf(<span class="string">&#x27;Android&#x27;</span>) || ~navigator.userAgent.indexOf(<span class="string">&#x27;Adr&#x27;</span>)</span><br><span class="line">        <span class="keyword">var</span> device = isAndroid ? <span class="string">&#x27;android&#x27;</span> : <span class="string">&#x27;default&#x27;</span></span><br><span class="line">        <span class="keyword">var</span> toastHTML = <span class="string">`</span></span><br><span class="line"><span class="string">&lt;style&gt;.dialog&#123;position:fixed;left:0;top:0;z-index:10001;width:100%;height:100%&#125;.dialog-open .dialog-content,.dialog-open .dialog-overlay,.dialog-close .dialog-content,.dialog-close .dialog-overlay&#123;-webkit-animation-duration:.25s;animation-duration:.25s;-webkit-animation-fill-mode:forwards;animation-fill-mode:forwards&#125;.dialog-overlay&#123;position:absolute;top:0;left:0;z-index:10002;width:100%;height:100%;background-color:rgba(0,0,0,.5)&#125;.dialog-open .dialog-overlay&#123;-webkit-animation-name:fade-in;animation-name:fade-in&#125;[data-style=android].dialog-open .dialog-overlay&#123;-webkit-animation-name:fade-in;animation-name:fade-in&#125;@-webkit-keyframes fade-in&#123;0%&#123;opacity:0&#125;100%&#123;opacity:1&#125;&#125;@-webkit-keyframes fade-in&#123;0%&#123;opacity:0&#125;100%&#123;opacity:1&#125;&#125;.dialog-content&#123;position:absolute;top:50%;left:50%;z-index:10003;width:90%;-webkit-transform:translate(-50%,-50%);-ms-transform:translate(-50%,-50%);transform:translate(-50%,-50%);line-height:1.5;background-color:rgba(255,255,255,.95);border-radius:10px&#125;.dialog-open .dialog-content&#123;-webkit-animation-name:zoom-in;animation-name:zoom-in&#125;.dialog-content *&#123;box-sizing:border-box;-webkit-box-sizing:border-box;margin:0;padding:0;border:0;outline:0;-moz-user-select:none;-webkit-tap-highlight-color:transparent;font-family:Helvetica;font-size:15px&#125;[data-style=android] .dialog-content&#123;box-sizing:content-box;border-radius:0;background-color:#fff&#125;[data-style=android].dialog-open .dialog-content&#123;-webkit-animation-name:bounce-in-down;animation-name:bounce-in-down&#125;@-webkit-keyframes zoom-in&#123;0%&#123;opacity:0;-webkit-transform:translate(-50%,-50%) scale(1.2,1.2)&#125;100%&#123;opacity:1;-webkit-transform:translate(-50%,-50%) scale(1,1)&#125;&#125;@keyframes zoom-in&#123;0%&#123;opacity:0;-webkit-transform:translate(-50%,-50%) scale(1.2,1.2);transform:translate(-50%,-50%) scale(1.2,1.2)&#125;100%&#123;opacity:1;-webkit-transform:translate(-50%,-50%) scale(1,1);transform:translate(-50%,-50%) scale(1,1)&#125;&#125;@-webkit-keyframes bounce-in-down&#123;0%&#123;opacity:0;-webkit-transform:translate(-50%,-75%)&#125;100%&#123;opacity:1;-webkit-transform:translate(-50%,-50%)&#125;&#125;@keyframes bounce-in-down&#123;0%&#123;opacity:0;-webkit-transform:translate(-50%,-75%);transform:translate(-50%,-75%)&#125;100%&#123;opacity:1;-webkit-transform:translate(-50%,-50%);transform:translate(-50%,-50%)&#125;&#125;.dialog-content-hd&#123;position:relative;padding:20px 20px 10px;margin-bottom:-25px;text-align:center&#125;[data-style=android] .dialog-content-hd&#123;text-align:left;padding:20px 20px 0;margin-bottom:-10px&#125;.dialog-content-hd .dialog-content-title&#123;font-size:18px;font-weight:400;color:#333&#125;.dialog-content-bd&#123;margin:25px 20px;color:#666;text-align:center;overflow-y:auto;-webkit-overflow-scrolling:touch&#125;[data-style=android] .dialog-content-bd&#123;margin:25px 20px;text-align:left&#125;.dialog-content-ft&#123;display:-webkit-flex;display:-ms-flexbox;display:flex;position:relative;font-size:0;&#125;.dialog-content-ft:after&#123;content:&quot; &quot;;position:absolute;left:0;top:0;width:100%;height:1px;border-top:1px solid #d5d5d5;color:#d5d5d5;-webkit-transform-origin:0 0;-ms-transform-origin:0 0;transform-origin:0 0;-webkit-transform:scaleY(0.5);-ms-transform:scaleY(0.5);transform:scaleY(0.5)&#125;[data-style=android] .dialog-content-ft&#123;display:block;padding:8px;margin-top:-10px;text-align:right;&#125;[data-style=android] .dialog-content-ft:after&#123;border:none&#125;.dialog-content-ft .dialog-btn&#123;-webkit-flex:1;-ms-flex:1;flex:1;display:block&#125;.dialog-btn:hover,.dialog-btn:active,.dialog-btn-hl:hover,.dialog-btn-hl:active&#123;background-color:rgba(0,0,0,.05)&#125;.dialog-btn,.dialog-btn-hl&#123;position:relative;display:inline-block;height:44px;line-height:44px;color:#007aff;font-size:17px;font-weight:400;cursor:pointer;text-decoration:none;background-color:transparent&#125;.dialog-content-ft .dialog-btn:first-child&#123;border-bottom-left-radius:8px&#125;.dialog-content-ft .dialog-btn:after&#123;content:&quot;&quot;;position:absolute;left:0;top:0;width:1px;height:100%;border-left:1px solid #d5d5d5;color:#d5d5d5;-webkit-transform-origin:0 0;-ms-transform-origin:0 0;transform-origin:0 0;-webkit-transform:scaleX(0.5);-ms-transform:scaleX(0.5);transform:scaleX(0.5)&#125;.dialog-content-ft .dialog-btn:first-child:after&#123;border-left:none&#125;[data-style=android] .dialog-content-ft .dialog-btn&#123;display:inline-block;min-width:60px;height:36px;line-height:36px;overflow:hidden;padding:0 13px;font-size:16px;color:grey;text-align:center;border-radius:2px&#125;[data-style=android] .dialog-content-ft .dialog-btn:after&#123;border:none&#125;[data-style=android] .dialog-content-ft .dialog-btn-confirm,[data-style=android] .dialog-content-ft .dialog-btn-hl&#123;color:#00bbd3&#125;.dialog-content-ft .dialog-btn:last-child&#123;border-bottom-right-radius:8px&#125;&lt;/style&gt;</span></span><br><span class="line"><span class="string">            &lt;div class=&quot;dialog dialog-open dialog-modal&quot; data-style=<span class="subst">$&#123;device&#125;</span>&gt;&lt;div class=dialog-overlay&gt;&lt;/div&gt;&lt;div class=dialog-content&gt;&lt;div class=dialog-content-hd&gt;&lt;h3 class=dialog-content-title&gt;提示&lt;/h3&gt;&lt;/div&gt;&lt;div class=dialog-content-bd&gt;<span class="subst">$&#123;msg&#125;</span>&lt;/div&gt;</span></span><br><span class="line"><span class="string">            &lt;div class=&quot;dialog-content-ft side&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;button class=&quot;dialog-btn dialog-btn-cancel&quot; onclick=&quot;document.getElementById(&#x27;popupAlert&#x27;).remove()&quot;&gt;取消&lt;/button&gt;</span></span><br><span class="line"><span class="string">                &lt;button class=&quot;dialog-btn dialog-btn-confirm&quot; onclick=&quot;document.getElementById(&#x27;popupAlert&#x27;).remove()&quot;&gt;确定&lt;/button&gt;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line">        <span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">        div.id = <span class="string">&#x27;popupAlert&#x27;</span></span><br><span class="line">        div.innerHTML = toastHTML</span><br><span class="line">        <span class="built_in">document</span>.body.appendChild(div)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="loading"><a href="#loading" class="headerlink" title="loading"></a>loading</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $loading = &#123;</span><br><span class="line">    show: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  </span><br><span class="line">        <span class="keyword">var</span> loadingDOM = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">        loadingDOM.id = <span class="string">&#x27;j-loading&#x27;</span></span><br><span class="line">        loadingDOM.innerHTML = <span class="string">&#x27;&lt;style&gt;.loding-mask&#123;position: fixed;top: 0;left: 0;right: 0;bottom: 0;z-index: 999;background: #fff;opacity: 0.77;&#125;.index-loading-container&#123;position:absolute;top:50%;left:50%;transform:translate(-50%,-50%);&#125;.loading-item-wrapper .lditm&#123;display:inline-block;width:7px;height:7px;margin:0 4px;border-radius:50%;background:#0085cc;animation:index-loading 0.6s linear infinite alternate;&#125;.loading-item-wrapper .lditm:nth-child(1)&#123;animation-delay:0.08s;&#125;.loading-item-wrapper .lditm:nth-child(2)&#123;animation-delay:0.16s;&#125;.loading-item-wrapper .lditm:nth-child(3)&#123;animation-delay:0.24s;&#125;.loading-item-wrapper .lditm:nth-child(4)&#123;animation-delay:0.32s;&#125;.loading-item-wrapper .lditm:nth-child(5)&#123;animation-delay:0.40s;&#125;@keyframes index-loading&#123;0%&#123;transform:scale(1);&#125;100%&#123;transform:scale(1.5);&#125;&#125;&lt;/style&gt;&lt;div class=&quot;loding-mask&quot;&gt;&lt;div class=&quot;index-loading-container&quot;&gt;&lt;div class=&quot;loading-item-wrapper&quot;&gt;&lt;span class=&quot;lditm&quot;&gt;&lt;/span&gt;&lt;span class=&quot;lditm&quot;&gt;&lt;/span&gt;&lt;span class=&quot;lditm&quot;&gt;&lt;/span&gt;&lt;span class=&quot;lditm&quot;&gt;&lt;/span&gt;&lt;span class=&quot;lditm&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&#x27;</span></span><br><span class="line">        <span class="built_in">document</span>.body.appendChild(loadingDOM)</span><br><span class="line">    &#125;,</span><br><span class="line">    hide: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> loadingDOM = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;j-loading&#x27;</span>)</span><br><span class="line">        loadingDOM &amp;&amp; <span class="built_in">document</span>.body.removeChild(loadingDOM)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="AngularJS"><a href="#AngularJS" class="headerlink" title="AngularJS"></a>AngularJS</h2><h3 id="水印"><a href="#水印" class="headerlink" title="水印"></a>水印</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><span class="line">const angular = require(<span class="string">&#x27;angular&#x27;</span>)</span><br><span class="line">const get = require(<span class="string">&#x27;lodash/get&#x27;</span>)</span><br><span class="line">const map = require(<span class="string">&#x27;lodash/map&#x27;</span>)</span><br><span class="line">const filter = require(<span class="string">&#x27;lodash/filter&#x27;</span>)</span><br><span class="line">const format = require(<span class="string">&#x27;date-fns/format&#x27;</span>)</span><br><span class="line"><span class="built_in">let</span> departmentDefer = null // 全局只加载一次数据（非登录页面也需要水印的话移入getAttrs去初始化）</span><br><span class="line"></span><br><span class="line">module.exports = [</span><br><span class="line">  <span class="string">&#x27;User&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;i18n&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;$rootScope&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;$utils&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;$q&#x27;</span>,</span><br><span class="line">  <span class="keyword">function</span>(User, i18n, <span class="variable">$rootScope</span>, <span class="variable">$utils</span>, <span class="variable">$q</span>) &#123;</span><br><span class="line">    <span class="built_in">return</span> &#123;</span><br><span class="line">      restrict: <span class="string">&#x27;A&#x27;</span>,</span><br><span class="line">      link: <span class="keyword">function</span>(<span class="variable">$scope</span>, elem, attrs) &#123;</span><br><span class="line">        /** 根据配置渲染水印 */</span><br><span class="line">        /** render watermark according to the settings */</span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable">$rootScope</span>.CF.watermark) <span class="built_in">return</span></span><br><span class="line"></span><br><span class="line">        const watermarkOptions = <span class="variable">$rootScope</span>.CF.watermarkOptions || &#123;&#125;</span><br><span class="line">        const &#123;</span><br><span class="line">          text: optionText = [<span class="string">&#x27;true_name&#x27;</span>, <span class="string">&#x27;primary_email&#x27;</span>],</span><br><span class="line">          degree: optionDegree = 22.5,</span><br><span class="line">          color: optionColor = <span class="string">&#x27;#000&#x27;</span>,</span><br><span class="line">          alpha: optionAlpha = 0.1,</span><br><span class="line">          // gapX: optionGapX = 150,</span><br><span class="line">          // gapY: optionGapY = 100,</span><br><span class="line"></span><br><span class="line">          lineHeight: optionLH = 1.2,</span><br><span class="line">          fontFamily: optionFF = <span class="string">&#x27;微软雅黑&#x27;</span>,</span><br><span class="line">          dateFormat: optionDF</span><br><span class="line">        &#125; = watermarkOptions</span><br><span class="line">        const optionSita = optionDegree * Math.PI / 180</span><br><span class="line">        const <span class="variable">$elem</span> = angular.element(elem)</span><br><span class="line">        <span class="built_in">let</span> canvas, context</span><br><span class="line"></span><br><span class="line">        // 监听页面变化实时更新canvas</span><br><span class="line">        <span class="variable">$scope</span>.<span class="variable">$watch</span>(</span><br><span class="line">          _ =&gt; JSON.stringify([<span class="variable">$elem</span>[0].clientWidth, <span class="variable">$elem</span>[0].clientHeight]),</span><br><span class="line">          (newVal, oldVal) =&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (newVal === oldVal) <span class="built_in">return</span></span><br><span class="line">            setTimeout(drawWaterMark, 500)</span><br><span class="line">          &#125;</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        drawWaterMark()</span><br><span class="line"></span><br><span class="line">        // 获取用户部门</span><br><span class="line">        <span class="keyword">function</span> getDepartment(contactId) &#123;</span><br><span class="line">          <span class="keyword">if</span> (!~optionText.indexOf(<span class="string">&#x27;department&#x27;</span>)) <span class="built_in">return</span> <span class="variable">$q</span>.resolve(null)</span><br><span class="line">          <span class="keyword">if</span> (departmentDefer) <span class="built_in">return</span> departmentDefer</span><br><span class="line"></span><br><span class="line">          const oUser = User.getCurrentUser()</span><br><span class="line">          departmentDefer = oUser.simpleCall(&#123;</span><br><span class="line">            query: &#123;</span><br><span class="line">              func: <span class="string">&#x27;oab:get&#x27;</span>,</span><br><span class="line">              sid: oUser.sid,</span><br><span class="line">            &#125;,</span><br><span class="line">            data: &#123;</span><br><span class="line">              list: [contactId],</span><br><span class="line">              returnAttrs: [<span class="string">&#x27;duty&#x27;</span>, <span class="string">&#x27;true_name&#x27;</span>, <span class="string">&#x27;@ou&#x27;</span>, <span class="string">&#x27;email&#x27;</span>, <span class="string">&#x27;@location&#x27;</span>, <span class="string">&#x27;@id&#x27;</span>],</span><br><span class="line">              forEmail: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;)</span><br><span class="line">            .<span class="keyword">then</span>(res =&gt; &#123;</span><br><span class="line">              console.log(<span class="string">&#x27;drawWaterMark - getDepartment: &#x27;</span>, res.var)</span><br><span class="line">              <span class="built_in">return</span> get(res, <span class="string">&#x27;var[0].@location&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            &#125;)</span><br><span class="line">            .catch(err =&gt; &#123;</span><br><span class="line">              console.error(<span class="string">&#x27;drawWaterMark - getDepartment: &#x27;</span>, err)</span><br><span class="line">              <span class="built_in">return</span> null</span><br><span class="line">            &#125;)</span><br><span class="line">          <span class="built_in">return</span> departmentDefer</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 获取水印数据</span><br><span class="line">        <span class="keyword">function</span> <span class="function"><span class="title">getDisplayLines</span></span>() &#123;</span><br><span class="line">          const oUser = User.getCurrentUser()</span><br><span class="line">          const userConfig = oUser.config || &#123;&#125;</span><br><span class="line"></span><br><span class="line">          <span class="built_in">return</span> getDepartment(userConfig.email).<span class="keyword">then</span>(department =&gt; &#123;</span><br><span class="line">            const now = new Date()</span><br><span class="line">            const textTemplate = &#123;</span><br><span class="line">              true_name: userConfig.true_name,</span><br><span class="line">              primary_email: userConfig.primary_email,</span><br><span class="line">              userId: get(userConfig, <span class="string">&#x27;$ajc.user.userId&#x27;</span>),</span><br><span class="line">              date: optionDF ? format(now, optionDF) : <span class="variable">$utils</span>.<span class="variable">$date</span>.getTextSimple(now),</span><br><span class="line">              department</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">return</span> filter(map(optionText, item =&gt; (textTemplate.hasOwnProperty(item) ? textTemplate[item] : i18n.t(item))))</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 绘制水印</span><br><span class="line">        <span class="keyword">function</span> <span class="function"><span class="title">drawWaterMark</span></span>() &#123;</span><br><span class="line">          console.log(<span class="string">&#x27;drawWaterMark - start: &#x27;</span>, elem)</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (canvas) &#123;</span><br><span class="line">            context = canvas.getContext(<span class="string">&#x27;2d&#x27;</span>)</span><br><span class="line">            context.clearRect(0, 0, canvas.width, canvas.height)</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            canvas = document.createElement(<span class="string">&#x27;canvas&#x27;</span>)</span><br><span class="line">            canvas.className = <span class="string">&#x27;watermark&#x27;</span></span><br><span class="line">            context = canvas.getContext(<span class="string">&#x27;2d&#x27;</span>)</span><br><span class="line">            <span class="variable">$elem</span>[0].appendChild(canvas)</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          const clientWidth = canvas.width = <span class="variable">$elem</span>[0].clientWidth</span><br><span class="line">          const clientHeight = canvas.height = <span class="variable">$elem</span>[0].clientHeight</span><br><span class="line"></span><br><span class="line">          getDisplayLines().<span class="keyword">then</span>(lines =&gt; &#123;</span><br><span class="line">            console.log(<span class="string">&#x27;drawWaterMark - ready: &#x27;</span>, lines, [clientWidth, clientHeight])</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">let</span> x = -1; x &lt;= 1; x++) &#123;</span><br><span class="line">              const pivot = ((0.6 + x) * clientWidth) / 2</span><br><span class="line">              <span class="keyword">for</span> (<span class="built_in">let</span> y = 0; y &lt; clientHeight; y += 0.5 * clientWidth) &#123;</span><br><span class="line">                context.save()</span><br><span class="line">                context.globalAlpha = optionAlpha</span><br><span class="line"></span><br><span class="line">                /** 偶数行偏移 */</span><br><span class="line">                const isEvenRow = (y / 0.5 / clientWidth + 1) % 2 === 1</span><br><span class="line">                context.translate(pivot + (isEvenRow ? 0 : 0.25) * clientWidth, y)</span><br><span class="line"></span><br><span class="line">                context.rotate(-optionSita)</span><br><span class="line">                context.textAlign = <span class="string">&#x27;left&#x27;</span></span><br><span class="line"></span><br><span class="line">                <span class="built_in">let</span> fontSize = 40 / 800 * clientWidth</span><br><span class="line">                fontSize = Math.min(fontSize, 20)</span><br><span class="line">                <span class="built_in">let</span> lineHeight = fontSize * optionLH</span><br><span class="line">                context.font = `<span class="variable">$&#123;fontSize&#125;</span>px <span class="string">&#x27;$&#123;optionFF&#125;&#x27;</span>`</span><br><span class="line">                <span class="built_in">let</span> textWidth = Math.max.apply(null, map(lines, item =&gt; context.measureText(item).width)) * Math.cos(optionSita)</span><br><span class="line">                /** 防止文字过长导致溢出 */</span><br><span class="line">                <span class="keyword">while</span> (textWidth &gt; clientWidth &amp;&amp; fontSize &gt; 12) &#123;</span><br><span class="line">                  fontSize *= 0.8</span><br><span class="line">                  lineHeight = fontSize * optionLH</span><br><span class="line">                  context.font = `<span class="variable">$&#123;fontSize&#125;</span>px <span class="string">&#x27;$&#123;optionFF&#125;&#x27;</span>`</span><br><span class="line">                  textWidth = Math.max.apply(null, map(lines, item =&gt; context.measureText(item).width)) * Math.cos(optionSita)</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                const dx = (0.2 * clientWidth - textWidth / 2) / Math.cos(optionSita)</span><br><span class="line">                const dy = ((dx + textWidth / 2) * Math.cos(optionSita) + 0.2 * clientWidth + fontSize) * Math.cos(optionSita)</span><br><span class="line"></span><br><span class="line">                context.fillStyle = optionColor</span><br><span class="line">                angular.forEach(lines, (item, index) =&gt; (context.fillText(item, dx - dy, dy + lineHeight * index)))</span><br><span class="line"></span><br><span class="line">                /** prevent color reduplication */</span><br><span class="line">                context.strokeStyle = <span class="string">&#x27;white&#x27;</span></span><br><span class="line">                angular.forEach(lines, (item, index) =&gt; (context.strokeText(item, dx - dy, dy + lineHeight * index)))</span><br><span class="line">                context.restore()</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            console.log(<span class="string">&#x27;drawWaterMark - end: &#x27;</span>, elem)</span><br><span class="line">          &#125;).catch(err =&gt; &#123;</span><br><span class="line">            console.error(<span class="string">&#x27;drawWaterMark: &#x27;</span>, err)</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;ES5&quot;&gt;&lt;a href=&quot;#ES5&quot; class=&quot;headerlink&quot; title=&quot;ES5&quot;&gt;&lt;/a&gt;ES5&lt;/h2&gt;&lt;h3 id=&quot;弹窗&quot;&gt;&lt;a href=&quot;#弹窗&quot; class=&quot;headerlink&quot; title=&quot;弹窗&quot;&gt;&lt;/a&gt;弹窗&lt;/h3&gt;&lt;f</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>【转载】浏览器缓存机制</title>
    <link href="http://www.ionluo.cn/blog/posts/5dd60666.html"/>
    <id>http://www.ionluo.cn/blog/posts/5dd60666.html</id>
    <published>2023-06-07T06:38:58.000Z</published>
    <updated>2023-08-08T02:01:05.576Z</updated>
    
    <content type="html"><![CDATA[<p>简单来说缓存会先走强缓存，然后再走协商缓存，默认不缓存。</p><blockquote><p>强缓存受<code>Expires</code>或者<code>cache-control</code>控制。</p><p>协商缓存受<code>Last-Modified与If-Modified-Since</code>和<code>ETag与If-None-Match</code>控制。</p></blockquote><p><strong>这里有一个特殊情况值得注意</strong>：</p><p>根据 <a href="https://link.segmentfault.com/?enc=YXy3A5yZ5x4ehwGO7BviLA==.b2wWsVYJ7wL1rJeXaKyeoJofHkhIcZtESVikD81NY4tGIGEirWLSM7LNAh0OuRBfAc8BLQC9RBsNWD8Bgah3Vw==">RFC7234</a> 标准，如果没有设置强缓存的请求头但是有<code>Last-Modified</code>，会采用启发式算法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">缓存时间 = (Date - Last-Modified) / 10 </span><br></pre></td></tr></table></figure><blockquote><p>这里有点坑，导致协商缓存不生效</p><p>参考：<a href="https://segmentfault.com/q/1010000008955355">https://segmentfault.com/q/1010000008955355</a></p></blockquote><p><strong>另外还需要注意的是:</strong></p><p>用户的一些具体操作会绕过缓存，强制向服务器请求，如下：</p><p><img src="http://blog.cdn.ionluo.cn/blog/640-168611999371210.png" alt="图片"></p><p><strong>另外在日常调试遇到个问题：</strong></p><ul><li><p>上述操作如果是页面嵌套iframe，iframe里面的页面都是有效，不会随着操作清理缓存，操作清理的只是top的缓存。</p></li><li><p>上述操作在Chrome的PC端尝试地址栏直接回车强制缓存也无效，但是修改地址回车可以命中强制缓存。</p></li><li><p>设置了强制缓存<code>cache-control: 3600</code>，IOS手机端Chrome浏览器不管地址栏回车，页面链接跳转，新开窗口都没有走强制缓存而是向服务器请求(why?)</p><p>响应头如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200</span><br><span class="line">Server: nginx</span><br><span class="line">Date: Wed, 07 Jun 2023 09:13:41 GMT</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Transfer-Encoding: chunked</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Vary: Accept-Encoding</span><br><span class="line">ETag: W/<span class="string">&quot;1693-1681473628000&quot;</span></span><br><span class="line">Last-Modified: Fri, 14 Apr 2023 12:00:28 GMT</span><br><span class="line">X-XSS-Protection: 0</span><br><span class="line">Strict-Transport-Security: max-age=31536000</span><br><span class="line">access-control-allow-credentials: <span class="literal">true</span></span><br><span class="line">access-control-allow-headers: *</span><br><span class="line">access-control-allow-origin: *</span><br><span class="line">access-control-expose-headers: *</span><br><span class="line">Cache-Control: max-age=31536000</span><br><span class="line">Content-Encoding: gzip</span><br></pre></td></tr></table></figure></li></ul><h2 id="下面是参考文章归档"><a href="#下面是参考文章归档" class="headerlink" title="下面是参考文章归档 =========="></a>下面是参考文章归档 ==========</h2><h2 id="一文搞懂浏览器缓存机制"><a href="#一文搞懂浏览器缓存机制" class="headerlink" title="一文搞懂浏览器缓存机制"></a><a href="https://mp.weixin.qq.com/s/oQXJNwHJoUxhEGzxVG5AgQ#">一文搞懂浏览器缓存机制</a></h2><p>最近在项目中遇到了 IE浏览器因缓存问题未能成功向后端发送 <code>GET</code>类型请求 的bug，然后顺藤摸瓜顺便看了看缓存的知识，觉得有必要总结跟大家分享一下。</p><p>在前端开发中，性能一直都是被大家所重视的一点，然而判断一个网站的性能最直观的就是看网页打开的速度。其中提高网页反应速度的一个方式就是使用缓存。一个优秀的缓存策略可以缩短网页请求资源的距离，减少延迟，并且由于缓存文件可以重复利用，还可以减少带宽，降低网络负荷。</p><h4 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h4><p><strong>web缓存</strong>是指一个web资源（如html页面，图片，js，数据等）存在于web服务器和客户端（浏览器）之间的副本。</p><p>缓存会根据进来的请求保存输出内容的副本；当下一个请求来到的时候，如果是相同的URL，缓存会根据缓存机制决定是直接使用副本响应访问请求，还是向源服务器再次发送请求。比较常见的就是浏览器会缓存访问过网站的网页，当再次访问这个URL地址的时候，如果网页没有更新，就不会再次下载网页，而是直接使用本地缓存的网页。只有当网站明确标识资源已经更新，浏览器才会再次下载网页。至于浏览器和网站服务器是如何标识网站页面是否更新的机制，将在后面介绍。</p><h6 id="1-1-web缓存的作用"><a href="#1-1-web缓存的作用" class="headerlink" title="1.1 web缓存的作用"></a>1.1 web缓存的作用</h6><p>web缓存的<strong>作用</strong>显而易见：</p><ol><li><strong>减少网络带宽消耗</strong>：无论对于网站运营者或者用户，带宽都代表着金钱，过多的带宽消耗，只会便宜了网络运营商。当Web缓存副本被使用时，只会产生极小的网络流量，可以有效的降低运营成本。</li><li><strong>降低服务器压力</strong>：给网络资源设定有效期之后，用户可以重复使用本地的缓存，减少对源服务器的请求，间接降低服务器的压力。同时，搜索引擎的爬虫机器人也能根据过期机制降低爬取的频率，也能有效降低服务器的压力。</li><li><strong>减少网络延迟，加快页面打开速度</strong>：带宽对于个人网站运营者来说是十分重要，而对于大型的互联网公司来说，可能有时因为钱多而真的不在乎。那Web缓存还有作用吗？答案是肯定的，对于最终用户，缓存的使用能够明显加快页面打开速度，达到更好的体验。</li></ol><h6 id="1-2-web缓存的类型"><a href="#1-2-web缓存的类型" class="headerlink" title="1.2 web缓存的类型"></a>1.2 web缓存的类型</h6><p>web缓存大致可以分为以下几种类型 详细内容：</p><ol><li>数据库数据缓存</li><li>服务器端缓存</li><li>浏览器端缓存</li><li>web应用层缓存</li></ol><p>浏览器通过代理服务器向源服务器发起请求的原理如下图：<img src="http://blog.cdn.ionluo.cn/blog/640-16861199937091.png" alt="图片">浏览器先向代理服务器发起web请求，再将请求转发到源服务器。它属于共享缓存，所以很多地方都可以使用其缓存资源，因此对于节省流量有很大作用。</p><p>浏览器缓存是将文件保存在客户端，在同一个会话过程中会检查缓存的副本是否足够新，在后退网页时，访问过的资源可以从浏览器缓存中拿出使用。通过减少服务器处理请求的数量，用户将获得更快的体验</p><p>下面着重关注一下浏览器缓存。</p><h4 id="2-web缓存的工作原理"><a href="#2-web缓存的工作原理" class="headerlink" title="2. web缓存的工作原理"></a>2. web缓存的工作原理</h4><p>所有的缓存都是基于一套规则来帮助他们决定什么时候使用缓存中的副本提供服务（假设有副本可用的情况下，未被销毁回收或者未被删除修改）。这些规则有的在协议中有定义（如HTTP协议1.0和1.1），有的则是由缓存的管理员设置（如DBA、浏览器的用户、代理服务器管理员或者应用开发者）。</p><h6 id="2-1-浏览器端的缓存规则"><a href="#2-1-浏览器端的缓存规则" class="headerlink" title="2.1 浏览器端的缓存规则"></a>2.1 浏览器端的缓存规则</h6><p>对于浏览器端的缓存来讲，这些规则是在HTTP协议头和HTML页面的 <code>Meta</code>标签中定义的。他们分别从<strong>新鲜度</strong>和<strong>校验值</strong>两个维度来规定浏览器是直接使用缓存中的副本，还是需要去源服务器获取更新的版本。</p><ol><li><p><strong>新鲜度</strong>（过期机制）：也就是缓存副本有效期。一个缓存副本必须满足以下任一条件，浏览器会认为它是有效的，足够新的，而直接从缓存中获取副本并渲染：</p></li><li><ul><li>含有完整的过期时间控制头信息（HTTP协议报头），并且仍在有效期内</li><li>浏览器已经使用过这个缓存副本，并且在一个会话中已经检查过新鲜度</li></ul></li><li><p><strong>校验值</strong>（验证机制）：服务器返回资源的时候有时在控制头信息带上这个资源的实体标签Etag（Entity Tag），它可以用来作为浏览器再次请求过程的校验标识。如过发现校验标识不匹配，说明资源已经被修改或过期，浏览器需求重新获取资源内容。</p></li></ol><h6 id="2-2-浏览器缓存的控制"><a href="#2-2-浏览器缓存的控制" class="headerlink" title="2.2 浏览器缓存的控制"></a>2.2 浏览器缓存的控制</h6><p>######## 2.2.1 使用HTML的 <code>Meta</code> 标签</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;META <span class="attribute">HTTP-EQUIV</span>=<span class="string">&quot;Pragma&quot;</span> <span class="attribute">CONTENT</span>=<span class="string">&quot;no-cache&quot;</span>&gt;</span><br></pre></td></tr></table></figure><p>上述代码的作用是告诉浏览器当前页面不被缓存，每次访问都需要去服务器拉取。使用上很简单，但只有部分浏览器可以支持，而且所有缓存代理服务器都不支持，因为代理不解析HTML内容本身。可以通过这个页面测试你的浏览器是否支持：[Pragma No-Cache Test] (<a href="http://www.procata.com/cachetest/tests/pragma/index.php)%E3%80%82">http://www.procata.com/cachetest/tests/pragma/index.php)。</a></p><p>######## 2.2.2 使用缓存有关的HTTP消息报头</p><p>一个URI的完整HTTP协议交互过程是由HTTP请求和HTTP响应组成的。有关HTTP详细内容可参考《Hypertext Transfer Protocol — HTTP/1.1》、《HTTP协议详解》等。</p><p>在HTTP请求和响应的消息报头中，常见的与缓存有关的消息报头有：</p><p><img src="http://blog.cdn.ionluo.cn/blog/640-16861199937092.jpeg" alt="图片"></p><p>稍微解释一下：</p><p>########## 1. <strong>Cache-Control</strong></p><ol><li><p><strong>max-age</strong>（单位为s）指定设置缓存最大的有效时间，定义的是时间长短。当浏览器向服务器发送请求后，在max-age这段时间里浏览器就不会再向服务器发送请求了。我们来找个资源看下。比如QQ推广上的css资源，max-age=3600，也就是说缓存有效期为3600秒（也就是1h）。于是在1天内都会使用这个版本的资源，即使服务器上的资源发生了变化，浏览器也不会得到通知。max-age会覆盖掉Expires，后面会有讨论</p><p><img src="http://blog.cdn.ionluo.cn/blog/640-16861199937103.png" alt="图片"></p></li><li><p><strong>s-maxage</strong>（单位为s）同max-age，只用于共享缓存（比如CDN缓存）。比如，当s-maxage=60时，在这60秒中，即使更新了CDN的内容，浏览器也不会进行请求。也就是说max-age用于普通缓存，而s-maxage用于代理缓存。如果存在s-maxage，则会覆盖掉max-age和Expires header。</p></li><li><p><strong>public</strong> 指定响应会被缓存，并且在多用户间共享。也就是下图的意思。如果没有指定public还是private，则默认为public。<br><img src="http://blog.cdn.ionluo.cn/blog/640-16861199937114.png" alt="图片"></p></li><li><p><strong>private</strong> 响应只作为私有的缓存（见下图），不能在用户间共享。如果要求HTTP认证，响应会自动设置为 private<img src="http://blog.cdn.ionluo.cn/blog/640-16861199937115.png" alt="图片"></p></li><li><p><strong>no-cache</strong> 指定不缓存响应，表明资源不进行缓存，但是设置了 no-cache 之后并不代表浏览器不缓存，而是在获取缓存前要向服务器确认资源是否被更改。因此有的时候只设置 no-cache 防止缓存还是不够保险，还可以加上 private 指令，将过期时间设为过去的时间。</p></li><li><p><strong>no-store</strong> 绝对禁止缓存，一看就知道如果用了这个命令当然就是不会进行缓存啦～每次请求资源都要从服务器重新获取。</p></li><li><p><strong>must-revalidate</strong> 指定如果页面是过期的，则去服务器进行获取。这个指令并不常用，就不做过多的讨论了。</p></li></ol><p><strong>cache-control</strong>的种类这么多，然而怎么使用它们呢，参看下图：</p><p><img src="http://blog.cdn.ionluo.cn/blog/640-16861199937116.jpeg" alt="图片"></p><p>########## 2. <strong>Expires</strong> </p><p>缓存过期时间，用来指定资源到期的时间，是服务器端的具体的时间点。也就是说， <strong>Expires=max-age + 请求时间</strong> ，需要和Last-modified结合使用。但在上面我们提到过，cache-control的优先级更高。Expires是Web服务器响应消息头字段，在响应http请求时告诉浏览器在过期时间前浏览器可以直接从浏览器缓存取数据，而无需再次请求。</p><p><img src="http://blog.cdn.ionluo.cn/blog/640-16861199937117.png" alt="图片"></p><p>########## 3. <strong>Last-modified &amp; If-modified-since</strong> </p><p>服务器端文件的最后修改时间，需要和cache-control共同使用，是检查服务器端资源是否更新的一种方式。当浏览器再次进行请求时，会向服务器传送If-Modified-Since报头，询问Last-Modified时间点之后资源是否被修改过。如果没有修改，则返回码为304，使用缓存；如果修改过，则再次去服务器请求资源，返回码和首次请求相同为200，资源为服务器最新资源。</p><p>########## 4. <strong>Etag &amp; &amp; If-None-Match</strong></p><p>根据实体内容生成一段hash字符串，标识资源的状态，由服务端产生。浏览器会将这串字符串传回服务器，验证资源是否已经修改，如果没有修改，过程如下：</p><p><img src="http://blog.cdn.ionluo.cn/blog/640-16861199937118.png" alt="图片"></p><p>######## 2.2.3 缓存报头种类与优先级</p><p>########## 1. <strong>Cache-Control与Expires</strong></p><p><code>Cache-Control</code>与 <code>Expires</code>的作用一致，都是指明当前资源的有效期，控制浏览器是否直接从浏览器缓存取数据还是重新发请求到服务器取数据。只不过 <code>Cache-Control</code>的选择更多，设置更细致，如果同时设置的话，其优先级高于 <code>Expires</code>。</p><p>########## 2. <strong>Last-Modified与ETag</strong></p><p>你可能会觉得使用 <code>Last-Modified</code> 已经足以让浏览器知道本地的缓存副本是否足够新，为什么还需要 <code>Etag</code>（实体标识）呢？HTTP1.1中Etag的出现主要是为了解决几个 Last-Modified 比较难解决的问题：</p><ul><li>Last-Modified 标注的最后修改只能精确到<strong>秒</strong>级，如果某些文件在1秒钟以内，被修改多次的话，它将不能准确标注文件的新鲜度</li><li>如果某些文件会被定期生成，当有时内容并没有任何变化，但 Last-Modified 却改变了，导致文件没法使用缓存</li><li>有可能存在服务器没有准确获取文件修改时间，或者与代理服务器时间不一致等情形</li></ul><p>Etag是服务器自动生成或者由开发者生成的对应资源在服务器端的唯一标识符，能够更加准确的控制缓存。Last-Modified与ETag是可以一起使用的，<strong>服务器会优先验证ETag</strong>，一致的情况下，才会继续比对Last-Modified，最后才决定是否返回304。Etag的服务器生成规则和强弱Etag的相关内容可以参考，《互动百科-Etag》和《HTTP Header definition》，这里不再深入。</p><p>########## 3. <strong>Last-Modified/ETag 与 Cache-Control/Expires</strong></p><p>配置 <code>Last-Modified/ETag</code>的情况下，浏览器再次访问统一URI的资源，还是会发送请求到服务器询问文件是否已经修改，如果没有，服务器会只发送一个304回给浏览器，告诉浏览器直接从自己本地的缓存取数据；如果修改过那就整个数据重新发给浏览器；</p><p><code>Cache-Control/Expires</code>则不同，如果检测到本地的缓存还是有效的时间范围内，浏览器直接使用本地副本，不会发送任何请求。两者一起使用时， <code>Cache-Control/Expires</code>的优先级要高，即当本地副本根据 <code>Cache-Control/Expires</code>发现还在有效期内时，则不会再次发送请求去服务器询问修改时间 <code>Last-Modified</code>或实体标识 <code>Etag</code>了。</p><p>一般情况下，两者会配合一起使用，因为即使服务器设置缓存时间, 当用户点击“刷新”按钮时，浏览器会忽略缓存继续向服务器发送请求，这时 <code>Last-Modified/ETag</code>将能够很好利用304，从而减少响应开销。</p><p>######## 2.2.4 哪些请求不能被缓存？</p><p>无法被浏览器缓存的请求：</p><ul><li>HTTP信息头中包含Cache-Control:no-cache，pragma:no-cache，或Cache-Control:max-age=0等告诉浏览器不用缓存的请求</li><li>需要根据Cookie，认证信息等决定输入内容的动态请求是不能被缓存的</li><li>经过HTTPS安全加密的请求（有人也经过测试发现，ie其实在头部加入Cache-Control：max-age信息，firefox在头部加入Cache-Control:Public之后，能够对HTTPS的资源进行缓存，参考《HTTPS的七个误解》)</li><li>POST请求无法被缓存</li><li>HTTP响应头中不包含Last-Modified/Etag，也不包含Cache-Control/Expires的请求无法被缓存</li></ul><h4 id="3-使用缓存流程"><a href="#3-使用缓存流程" class="headerlink" title="3. 使用缓存流程"></a>3. 使用缓存流程</h4><p>一个用户发起一个静态资源请求的时候，浏览器会通过以下几步来获取并展示资源：</p><p><img src="http://blog.cdn.ionluo.cn/blog/640-16861199937129.jpeg" alt="图片"></p><p>缓存行为主要由缓存策略决定，而缓存策略由内容拥有者设置。这些策略主要通过特定的HTTP头部来清晰地表达。</p><p>以上过程也可以被概括为三个阶段：</p><ol><li><strong>本地缓存阶段：</strong>先在本地查找该资源，如果有发现该资源，而且该资源还没有过期，就使用这一个资源，完全不会发送http请求到服务器；</li><li><strong>协商缓存阶段：</strong>如果在本地缓存找到对应的资源，但是不知道该资源是否过期或者已经过期，则发一个http请求到服务器，然后服务器判断这个请求，如果请求的资源在服务器上没有改动过，则返回304，让浏览器使用本地找到的那个资源；</li><li><strong>缓存失败阶段：</strong>当服务器发现请求的资源已经修改过，或者这是一个新的请求(在本来没有找到资源)，服务器则返回该资源的数据，并且返回200， 当然这个是指找到资源的情况下，如果服务器上没有这个资源，则返回404。</li></ol><h4 id="4-用户操作行为与缓存的关系"><a href="#4-用户操作行为与缓存的关系" class="headerlink" title="4. 用户操作行为与缓存的关系"></a>4. <strong>用户操作行为与缓存的关系</strong></h4><p>用户在使用浏览器的时候，会有各种操作，比如输入地址后回车，按F5刷新等，这些行为会对缓存有什么影响呢？<img src="http://blog.cdn.ionluo.cn/blog/640-168611999371210.png" alt="图片"></p><p>通过上表我们可以看到，当用户在按 <code>F5</code>进行刷新的时候，会忽略Expires/Cache-Control的设置，会再次发送请求去服务器请求，而Last-Modified/Etag还是有效的，服务器会根据情况判断返回304还是200；</p><p>而当用户使用 <code>Ctrl+F5</code>进行强制刷新的时候，只是所有的缓存机制都将失效，重新从服务器拉去资源。</p><ul><li><strong>普通刷新</strong> – 当按下F5或者点击刷新按钮来刷新页面的时候，浏览器将绕过本地缓存来发送请求到服务器, 此时, 协商缓存是有效的</li><li><strong>强制刷新</strong> – 当按下ctrl+F5来刷新页面的时候, 浏览器将绕过各种缓存(本地缓存和协商缓存), 直接让服务器返回最新的资源</li><li><strong>回车或转向</strong> – 当在地址栏上输入回车或者按下跳转按钮的时候, 所有缓存都生效</li></ul><h4 id="5-如何从缓存角度改善站点"><a href="#5-如何从缓存角度改善站点" class="headerlink" title="5. 如何从缓存角度改善站点"></a>5. 如何从缓存角度改善站点</h4><ul><li>同一个资源保证URL的稳定性</li><li>给css、js、图片等资源增加HTTP缓存头，并强制入口html不被缓存</li><li>减少对Cookie的依赖</li><li>多用Get方式请求动态Cgi</li><li>动态CGI也是可以被缓存</li></ul><p>— 网上的帖子大多深浅不一，甚至有些前后矛盾，在下的文章都是学习过程中的总结，如果发现错误，欢迎留言指出~</p><blockquote><p>参考：</p><p>Web缓存机制系列：<a href="http://www.alloyteam.com/2012/03/web-cache-1-web-cache-overview/">http://www.alloyteam.com/2012/03/web-cache-1-web-cache-overview/</a></p><p>浅谈web缓存：<a href="http://www.alloyteam.com/2016/03/discussion-on-web-caching/">http://www.alloyteam.com/2016/03/discussion-on-web-caching/</a></p><p>Web前后端缓存技术：<a href="http://blog.csdn.net/LeeSirbupt/article/details/54409931">http://blog.csdn.net/LeeSirbupt/article/details/54409931</a></p></blockquote><h2 id="浏览器强缓存和协商缓存浅解"><a href="#浏览器强缓存和协商缓存浅解" class="headerlink" title="浏览器强缓存和协商缓存浅解"></a><a href="https://blog.csdn.net/s18438610353/article/details/121106105">浏览器强缓存和协商缓存浅解</a></h2><h3 id="1-强缓存"><a href="#1-强缓存" class="headerlink" title="1. 强缓存"></a>1. 强缓存</h3><p>给浏览器缓存设置过期时间，超过这个时间之后缓存过期,浏览器需要重新请求。</p><p><strong>expires(老版本http1.0)</strong><br>给浏览器设置了一个绝对时间用GMT格式的字符串，当浏览器时间超过这个绝对时间之后，重新向服务器发送请求。如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Expires: Wed Feb <span class="number">20</span> <span class="number">2019</span> <span class="number">11</span>:<span class="number">25</span>:<span class="number">41</span> GMT</span><br></pre></td></tr></table></figure><p>弊端: Expires返回的是服务器的时间，但判断的时候用的却是客户端的时间，这就导致Expires很被动，因为用户有可能改变客户端的时间，导致缓存时间判断出错，这也是引入Cache-Control:max-age指令的原因之一。</p><p><strong>cache-control(http1.1)</strong><br>为了解决expires存在的问题，Http1.1版本中提出了cache-control:max-age，该字段与expires的缓存思路相同，都是设置了一个过期时间，<code>不同的是max-age设置的是相对缓存时间开始往后的多少秒</code>，因此不再受日期不准确情况的影响。</p><p>常见的值是<code>max-age</code> public <a href="https://so.csdn.net/so/search?q=private&spm=1001.2101.3001.7020">private</a> <code>no-cache</code> <code>no-store</code></p><ol><li><strong>cache-control: max-age=xxxx，public。</strong><br>客户端和代理服务器都可以缓存该资源；客户端在xxx秒的有效期内，如果有请求该资源的需求的话就直接读取缓存,statu code:200 ，如果用户做了刷新操作，就向服务器发起http请求</li><li><strong>cache-control: max-age=xxxx，private</strong><br>只让客户端可以缓存该资源；代理服务器不缓存<br>客户端在xxx秒内直接读取缓存</li><li><strong>cache-control: max-age=xxxx，immutable。</strong><br>客户端在xxx秒的有效期内，如果有请求该资源的需求的话就直接读取缓存,statu code:200 ，即使用户做了刷新操作，也不向服务器发起http请求</li><li><strong>cache-control: no-cache</strong><br>跳过设置强缓存，但是不妨碍设置协商缓存；一般如果做了强缓存，只有在强缓存失效了才走协商缓存的，设置了no-cache就不会走强缓存了，每次请求都回询问服务端。</li><li><strong>cache-control: no-store</strong><br>不缓存，这个会让客户端、服务器都不缓存，也就没有所谓的强缓存、协商缓存了。</li></ol><p><strong>强缓存弊端：</strong> 强缓存优先级高，如果在过期时间内缓存的资源在服务器上更新了，客服端不能及时获取最新的资源。这时怎么办?于是就有了协商缓存.</p><h3 id="2-协商缓存"><a href="#2-协商缓存" class="headerlink" title="2. 协商缓存"></a>2. 协商缓存</h3><p>协商缓存解决了无法及时获取更新资源的问题。它利用<code>【Last-Modified，If-Modified-Since】</code>、<code>【ETag、If-None-Match】</code>两组字段,对资源做标识.然后由服务器做分析，如果资源未更新，则返回304状态码.那么浏览器则会从缓存中读取资源，否则重新请求资源。</p><p><strong>1). Last-Modified与If-Modified-Since</strong></p><ol><li><code>浏览器第一次向服务器请求资源</code>，服务器会在返回这个资源的同时，在response的header加上<code>Last-Modified</code>的header,这个header表示这个资源在服务器上的最后修改时间：Last-Modified: Wed Feb 20 2021 14:08:32 GMT</li><li><code>浏览器之后(第2次+)再向服务器请求这个资源时</code>，在request的header上加上<code>If-Modified-Since</code>的header，这个header的值就是上一次请求时返回的Last-Modified的值</li><li><code>服务器再次(第2次+)收到资源请求时</code>，根据浏览器传过来If-Modified-Since和资源在服务器上的最后修改时间判断资源是否有变化，如果没有变化则返回304 Not Modified，<code>但是不会返回资源内容</code>；如果有变化,返回200，就正常返回资源内容。</li><li>浏览器收到304的响应后，就会从缓存中加载资源。(当服务器返回304 Not Modified的响应时，<strong>response的header中不会再添加Last-Modified的header，因为既然资源没有变化，那么Last-Modified也就不会改变</strong>，这是服务器返回304时的response header.)</li><li>浏览器收到200的响应后，则从服务器加载新资源时，<strong>Last-Modified Header在重新加载的时候会被更新</strong>，下次请求时，If-Modified-Since会启用上次返回的Last-Modified值。</li></ol><p><strong>弊端：</strong><br>由于是根据<code>服务器最后修改时间</code>返回的header</p><ul><li>它们是以秒为单位进行更新，如果小于该单位高频进行更新的话，则不适合采用该方法。</li><li>一些文件也许会周期性的更改，但是他的内容并不改变(仅仅改变的修改时间)，这个时候我们并不希望客户端认为这个文件被修改了，而重新get；</li><li>某些服务器不能精确的得到文件的最后修改时间。</li></ul><p><strong>2). ETag与If-None-Match</strong></p><ol><li><code>浏览器第一次跟服务器请求一个资源</code>，服务器在返回这个资源的同时，在response的header加上<code>ETag</code>的header，这个header是服务器根据当前请求的资源生成的一个唯一标识字符串，如ETag:baitedangsi,<code>只要资源有变化这个串就不同，跟最后修改时间没有关系</code>，所以能很好的补充Last-Modified的问题.</li><li><code>浏览器再次(第二次+)跟服务器请求这个资源时</code>，在request的header上加上<code>If-None-Match</code>的header，这个header的值就是上一次请求时返回的ETag的值。</li><li><code>服务器再次(第二次+)收到资源请求时</code>，根据<code>浏览器传过来If-None-Match</code>和<code>服务器根据资源生成一个新的ETag</code>对比，如果这两个值相同就说明资源没有变化，否则就是有变化；如果没有变化则返回304 Not Modified，<code>但是不会返回资源内容</code>；如果有变化，则返回200,并正常返回资源内容。<strong>与Last-Modified不一样的是，当服务器返回304 Not Modified的响应时，由于ETag重新生成过，response header中还会把这个ETag返回，即使这个ETag跟之前的没有变化</strong></li><li>浏览器收到304的响应后，就会从缓存中加载资源。</li><li>浏览器收到200的响应后，则从服务器加载新资源时，<code>ETag在重新加载的时候会被更新</code>，下次请求时，If-None-Match会启用上次返回的ETag值。</li></ol><p><strong>优先级:<br>ETag与If-None-Match &gt; Last-Modified与If-Modified-Since, 同时存在时, 前者覆盖后者.</strong></p><blockquote><p>版权声明：本文为CSDN博主「楚楚梦厦」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/s18438610353/article/details/121106105">https://blog.csdn.net/s18438610353/article/details/121106105</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;简单来说缓存会先走强缓存，然后再走协商缓存，默认不缓存。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;强缓存受&lt;code&gt;Expires&lt;/code&gt;或者&lt;code&gt;cache-control&lt;/code&gt;控制。&lt;/p&gt;
&lt;p&gt;协商缓存受&lt;code&gt;Last-Modified与</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>【前端】webpack使用记录</title>
    <link href="http://www.ionluo.cn/blog/posts/52be6147.html"/>
    <id>http://www.ionluo.cn/blog/posts/52be6147.html</id>
    <published>2023-04-28T12:02:04.000Z</published>
    <updated>2023-08-08T02:01:05.564Z</updated>
    
    <content type="html"><![CDATA[<h2 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h2><p>v5: <a href="https://webpack.docschina.org/concepts/">https://webpack.docschina.org/concepts/</a></p><p>v4：<a href="https://v4.webpack.docschina.org/concepts/">https://v4.webpack.docschina.org/concepts/</a></p><p>v3-: <a href="https://stackoverflow.com/questions/49152770/where-can-i-find-the-documentation-for-webpack-3">https://stackoverflow.com/questions/49152770/where-can-i-find-the-documentation-for-webpack-3</a></p><h2 id="devServer的Host-IP"><a href="#devServer的Host-IP" class="headerlink" title="devServer的Host IP"></a>devServer的Host IP</h2><p>通常我们设置devServer的host为<code>0.0.0.0</code>或者<code>::</code>,这时候运行后还需要在浏览器输入对于ip去访问属实麻烦，因此通过chalk把ip打印到终端上，实现如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// const os = require(&#x27;os&#x27;) // node 14</span></span><br><span class="line"><span class="keyword">const</span> address = <span class="built_in">require</span>(<span class="string">&#x27;address&#x27;</span>) <span class="comment">// 1.1.2</span></span><br><span class="line"><span class="keyword">const</span> defaultGateway = <span class="built_in">require</span>(<span class="string">&#x27;default-gateway&#x27;</span>) <span class="comment">// 6.0.3</span></span><br><span class="line"><span class="keyword">const</span> FriendlyErrorsPlugin = <span class="built_in">require</span>(<span class="string">&#x27;friendly-errors-webpack-plugin&#x27;</span>) <span class="comment">// 1.7.0</span></span><br><span class="line"><span class="keyword">const</span> portfinder = <span class="built_in">require</span>(<span class="string">&#x27;portfinder&#x27;</span>) <span class="comment">// 1.0.28</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取内网ip</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getIPAddress</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// let IPAddress = &#x27;&#x27;</span></span><br><span class="line">  <span class="comment">// const interfaces = os.networkInterfaces()</span></span><br><span class="line">  <span class="comment">// for (const devName in interfaces) &#123;</span></span><br><span class="line">  <span class="comment">//   const iface = interfaces[devName]</span></span><br><span class="line">  <span class="comment">//   for (let i = 0; i &lt; iface.length; i++) &#123;</span></span><br><span class="line">  <span class="comment">//     const alias = iface[i]</span></span><br><span class="line">  <span class="comment">//     if (alias.family === &#x27;IPv4&#x27; &amp;&amp; alias.address !== &#x27;127.0.0.1&#x27; &amp;&amp; !alias.internal) &#123;</span></span><br><span class="line">  <span class="comment">//       IPAddress = alias.address</span></span><br><span class="line">  <span class="comment">//     &#125;</span></span><br><span class="line">  <span class="comment">//   &#125;</span></span><br><span class="line">  <span class="comment">//   if (devName === &#x27;以太网&#x27; || devName === &#x27;eth0&#x27; || devName === &#x27;LAN&#x27;) break</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">  <span class="comment">// return IPAddress</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> IPAddress</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// This can only return an IPv4 address</span></span><br><span class="line">    <span class="keyword">const</span> result = defaultGateway.v4.sync()</span><br><span class="line">    IPAddress = address.ip(result &amp;&amp; result.interface)</span><br><span class="line">    <span class="keyword">if</span> (IPAddress) &#123;</span><br><span class="line">      <span class="comment">// Check if the address is a private ip</span></span><br><span class="line">      <span class="comment">// https://en.wikipedia.org/wiki/Private_network#Private_IPv4_address_spaces</span></span><br><span class="line">      <span class="keyword">if</span> (</span><br><span class="line">        /^<span class="number">10</span>[.]|^<span class="number">172</span>[.](<span class="number">1</span>[<span class="number">6</span>-<span class="number">9</span>]|<span class="number">2</span>[<span class="number">0</span>-<span class="number">9</span>]|<span class="number">3</span>[<span class="number">0</span>-<span class="number">1</span>])[.]|^<span class="number">192</span>[.]<span class="number">168</span>[.]/.test(IPAddress)</span><br><span class="line">      ) &#123;</span><br><span class="line">        <span class="comment">// Address is private, format it for later use</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Address is not private, so we will discard it</span></span><br><span class="line">        IPAddress = <span class="string">&#x27;&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (_e) &#123;</span><br><span class="line">    IPAddress = <span class="string">&#x27;&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> IPAddress</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">devWebpackConfig = &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  portfinder.basePort = <span class="string">&#x27;3000&#x27;</span></span><br><span class="line">  portfinder.getPort(<span class="function">(<span class="params">err, port</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      reject(err)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// publish the new Port</span></span><br><span class="line">      process.env.PORT = port</span><br><span class="line">      <span class="comment">// add port to devServer config</span></span><br><span class="line">      devWebpackConfig.devServer.port = port</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Add FriendlyErrorsPlugin</span></span><br><span class="line">      devWebpackConfig.plugins.push(<span class="keyword">new</span> FriendlyErrorsPlugin(&#123;</span><br><span class="line">        compilationSuccessInfo: &#123;</span><br><span class="line">          messages: [</span><br><span class="line">            <span class="string">&#x27;Your application is running here:&#x27;</span>,</span><br><span class="line">            <span class="string">`- Local:   http://localhost:<span class="subst">$&#123;port&#125;</span>`</span>,</span><br><span class="line">            IPAddress ? <span class="string">`- Network: http://<span class="subst">$&#123;IPAddress&#125;</span>:<span class="subst">$&#123;port&#125;</span>`</span> : <span class="string">&#x27;&#x27;</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;))</span><br><span class="line"></span><br><span class="line">      resolve(devWebpackConfig)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>参考：<a href="https://segmentfault.com/a/1190000037794336">nodejs交互工具库 – strip-ansi, address, default-gateway和joi</a></p><h2 id="自定义插件"><a href="#自定义插件" class="headerlink" title="自定义插件"></a>自定义插件</h2><p>从远程复制文件放入指定位置（可以作为子模块构建的方式，如此不需要每次都要同时构建主模块和子模块）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * webpack3写法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> download = <span class="built_in">require</span>(<span class="string">&#x27;download&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolve</span> (<span class="params">dir</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> path.join(__dirname, <span class="string">&#x27;..&#x27;</span>, dir)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addFileToAssets</span> (<span class="params">filename, compilation</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> outputPath = compilation.compiler.options.output.path</span><br><span class="line">  <span class="keyword">const</span> absPath = path.resolve(outputPath, filename)</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.all([fs.statAsync(absPath), fs.readFileAsync(absPath)])</span><br><span class="line">    .then(<span class="function"><span class="params">results</span> =&gt;</span> &#123;</span><br><span class="line">      compilation.assets[filename] = &#123;</span><br><span class="line">        source: <span class="function"><span class="params">_</span> =&gt;</span> results[<span class="number">1</span>],</span><br><span class="line">        size: <span class="function"><span class="params">_</span> =&gt;</span> results[<span class="number">0</span>].size</span><br><span class="line">      &#125;</span><br><span class="line">      compilation.fileDependencies.push(filename)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从远程获取文件注入assets</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CopyRemoteUrlPlugin</span>(<span class="params">patterns = [], options = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">Array</span>.isArray(patterns)) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;CopyRemoteUrlPlugin: patterns must be an array&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> apply = <span class="function"><span class="keyword">function</span> <span class="title">apply</span>(<span class="params">compiler</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> outputPath = compiler.options.output.path</span><br><span class="line"></span><br><span class="line">    compiler.plugin(<span class="string">&#x27;emit&#x27;</span>, <span class="function">(<span class="params">compilation, cb</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">Promise</span>.all(patterns.map(<span class="function"><span class="params">pattern</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> sourceUrl = <span class="built_in">encodeURI</span>(pattern.from)</span><br><span class="line">        <span class="keyword">const</span> destDir = path.join(outputPath, pattern.to)</span><br><span class="line">        <span class="keyword">const</span> patternOpt = <span class="built_in">Object</span>.assign(options, pattern.options)</span><br><span class="line">        <span class="keyword">return</span> download(sourceUrl, destDir, patternOpt).then(<span class="function"><span class="params">files</span> =&gt;</span> &#123;</span><br><span class="line">          files = files.filter(<span class="function"><span class="params">item</span> =&gt;</span> (item.type === <span class="string">&#x27;file&#x27;</span>))</span><br><span class="line">          files.forEach(<span class="function"><span class="params">file</span> =&gt;</span> (file.pattern = pattern))</span><br><span class="line">          <span class="keyword">return</span> files</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)).then(<span class="function"><span class="params">files</span> =&gt;</span> &#123;</span><br><span class="line">        files = files.flat()</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.all(files.map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> filename = path.join(item.pattern.to, item.path)</span><br><span class="line">          <span class="keyword">return</span> addFileToAssets(filename, compilation)</span><br><span class="line">        &#125;))</span><br><span class="line">      &#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        compilation.errors.push(err)</span><br><span class="line">      &#125;).finally(cb)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123; apply &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  CopyRemoteUrlPlugin</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">const</span> &#123;CopyRemoteUrlPlugin&#125; = <span class="built_in">require</span>(<span class="string">&#x27;./extraWebpackPlugin.js&#x27;</span>)</span><br><span class="line">plugins: [</span><br><span class="line">     ...</span><br><span class="line">     <span class="keyword">new</span> CopyRemoteUrlPlugin([&#123;</span><br><span class="line">        <span class="keyword">from</span>: config.build.appZipRemoteUrl,</span><br><span class="line">        to: <span class="string">&#x27;app&#x27;</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          extract: <span class="literal">true</span>,</span><br><span class="line">          filter: <span class="function"><span class="params">file</span> =&gt;</span> path.extname(file.path) !== <span class="string">&#x27;.map&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">     &#125;])</span><br><span class="line">     ...</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="删除注释"><a href="#删除注释" class="headerlink" title="删除注释"></a>删除注释</h2><p>html注释</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> UglifyJsPlugin = <span class="built_in">require</span>(<span class="string">&#x27;uglifyjs-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> OptimizeCSSPlugin = <span class="built_in">require</span>(<span class="string">&#x27;optimize-css-assets-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> CssNano = <span class="built_in">require</span>(<span class="string">&#x27;cssnano&#x27;</span>)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// require html的注释删除</span></span><br><span class="line">                test: <span class="regexp">/\.html$/</span>,</span><br><span class="line">                use: [&#123;</span><br><span class="line">                    loader: <span class="string">&#x27;html-loader&#x27;</span>,</span><br><span class="line">                    options: &#123;</span><br><span class="line">                        minimize: <span class="literal">true</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;]</span><br><span class="line">            &#125;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="comment">// html注释</span></span><br><span class="line">        <span class="comment">// more: https://github.com/kangax/html-minifier#options-quick-reference</span></span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line"> ...</span><br><span class="line">          minify: &#123;</span><br><span class="line">            removeComments: <span class="literal">true</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="comment">// js注释</span></span><br><span class="line">        <span class="keyword">new</span> UglifyJsPlugin(&#123;</span><br><span class="line">          ...</span><br><span class="line">          uglifyOptions: &#123;</span><br><span class="line">            output: &#123;</span><br><span class="line">              comments: <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="comment">// css注释</span></span><br><span class="line">        <span class="comment">// more: https://github.com/NMFR/optimize-css-assets-webpack-plugin/tree/v3.2.0</span></span><br><span class="line">        <span class="keyword">new</span> OptimizeCSSPlugin(&#123;</span><br><span class="line">          cssProcessor: CssNano,</span><br><span class="line">          cssProcessorOptions: &#123;</span><br><span class="line">            safe: <span class="literal">true</span>,</span><br><span class="line">            discardComments: &#123; <span class="attr">removeAll</span>: <span class="literal">true</span> &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          canPrint: <span class="literal">true</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="遇到问题记录"><a href="#遇到问题记录" class="headerlink" title="遇到问题记录"></a>遇到问题记录</h2><h3 id="cheerio打包js里面存在package-json"><a href="#cheerio打包js里面存在package-json" class="headerlink" title="cheerio打包js里面存在package.json"></a>cheerio打包js里面存在package.json</h3><p>这里是使用juice遇到的，打包里面存在cheerio的package.json内容，如下图</p><p><img src="http://blog.cdn.ionluo.cn/blog/image-20230606112231019.png" alt="image-20230606112231019"></p><p>导致原因如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Export cheerio (with )</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span> = <span class="built_in">module</span>.exports = <span class="built_in">require</span>(<span class="string">&#x27;./lib/cheerio&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  Export the version</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.version = <span class="built_in">require</span>(<span class="string">&#x27;./package.json&#x27;</span>).version;</span><br></pre></td></tr></table></figure><p>暂时没有想到太好的方法，只能先固定写死version</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exports</span>.version = <span class="string">&quot;1.0.0&quot;</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;官方文档&quot;&gt;&lt;a href=&quot;#官方文档&quot; class=&quot;headerlink&quot; title=&quot;官方文档&quot;&gt;&lt;/a&gt;官方文档&lt;/h2&gt;&lt;p&gt;v5: &lt;a href=&quot;https://webpack.docschina.org/concepts/&quot;&gt;https://</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>【IDE】VSCODE使用经验总结</title>
    <link href="http://www.ionluo.cn/blog/posts/5a3690f1.html"/>
    <id>http://www.ionluo.cn/blog/posts/5a3690f1.html</id>
    <published>2023-04-26T11:40:02.326Z</published>
    <updated>2023-08-08T02:01:05.558Z</updated>
    
    <content type="html"><![CDATA[<h2 id="搜索不到中文问题"><a href="#搜索不到中文问题" class="headerlink" title="搜索不到中文问题"></a>搜索不到中文问题</h2><blockquote><p>ctrl + shift + f 进行全局搜索的时候：<br>搜索英文和数字没有问题，能出来结果；但是搜索中文就会出不来结果。</p></blockquote><p>该问题是 vs code 的默认编码导致的：</p><ul><li>vs code 的默认编码是 UTF-8</li><li>项目存在部分文件的默认编码是 GBK</li></ul><p>尽管开启Auto Guess Encoding可以在打开文件显示正常，但是文本搜索不遵守此设置。</p><p>因此可以设置项目的默认编码是GBK</p><p><img src="http://blog.cdn.ionluo.cn/blog/image-20230614180403669.png" alt="image-20230614180403669"></p><h2 id="在-VSCode-中集成-GitBash"><a href="#在-VSCode-中集成-GitBash" class="headerlink" title="在 VSCode 中集成 GitBash"></a>在 VSCode 中集成 GitBash</h2><p>settings.json配置如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&quot;terminal.integrated.profiles.windows&quot;: &#123;</span><br><span class="line">    &quot;bash&quot;: &#123;</span><br><span class="line">        &quot;path&quot;: &quot;C:\\Program Files\\Git\\bin\\bash.exe&quot;,</span><br><span class="line">        &quot;args&quot;: [&quot;-l&quot;, &quot;-i&quot;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;terminal.integrated.defaultProfile.windows&quot;: &quot;bash&quot;,</span><br><span class="line">&quot;terminal.external.windowsExec&quot;: &quot;C:\\Program Files\\Git\\bin\\bash.exe&quot;</span><br></pre></td></tr></table></figure><h2 id="好用插件"><a href="#好用插件" class="headerlink" title="好用插件"></a>好用插件</h2><h3 id="Search-node-modules"><a href="#Search-node-modules" class="headerlink" title="Search node_modules"></a>Search node_modules</h3><p>作用：查看node_modules包代码</p><p>使用：ctrl+k 后 ctrl+n 搜索</p><h2 id="我的配置记录"><a href="#我的配置记录" class="headerlink" title="我的配置记录"></a>我的配置记录</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;editor.fontFamily&quot;</span>: <span class="string">&quot;Monaco,&#x27;思源黑体&#x27;,&#x27;Courier New&#x27;, monospace&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;editor.fontSize&quot;</span>: <span class="number">14</span>, </span><br><span class="line">    <span class="attr">&quot;editor.lineHeight&quot;</span>: <span class="number">20</span>,</span><br><span class="line">    <span class="attr">&quot;workbench.colorTheme&quot;</span>: <span class="string">&quot;One Dark Pro&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;editor.tokenColorCustomizations&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;textMateRules&quot;</span>: [</span><br><span class="line">  &#123;</span><br><span class="line"><span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Comments&quot;</span>,</span><br><span class="line"><span class="attr">&quot;scope&quot;</span>: <span class="string">&quot;comment, punctuation.definition.comment&quot;</span>,</span><br><span class="line"><span class="attr">&quot;settings&quot;</span>: &#123;</span><br><span class="line">  <span class="attr">&quot;fontStyle&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line"><span class="attr">&quot;name&quot;</span>: <span class="string">&quot;js/ts italic&quot;</span>,</span><br><span class="line"><span class="attr">&quot;scope&quot;</span>: <span class="string">&quot;entity.other.attribute-name.js,entity.other.attribute-name.ts,entity.other.attribute-name.jsx,entity.other.attribute-name.tsx,variable.parameter,variable.language.super&quot;</span>,</span><br><span class="line"><span class="attr">&quot;settings&quot;</span>: &#123;</span><br><span class="line">  <span class="attr">&quot;fontStyle&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line"><span class="attr">&quot;name&quot;</span>: <span class="string">&quot;js ts this&quot;</span>,</span><br><span class="line"><span class="attr">&quot;scope&quot;</span>: <span class="string">&quot;var.this,variable.language.this.js,variable.language.this.ts,variable.language.this.jsx,variable.language.this.tsx&quot;</span>,</span><br><span class="line"><span class="attr">&quot;settings&quot;</span>: &#123;</span><br><span class="line">  <span class="attr">&quot;fontStyle&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;emmet.excludeLanguages&quot;</span>: [</span><br><span class="line"></span><br><span class="line">        <span class="string">&quot;markdown&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;emmet.includeLanguages&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;vue-html&quot;</span>: <span class="string">&quot;html&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;vue&quot;</span>: <span class="string">&quot;html&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;javascript&quot;</span>:<span class="string">&quot;javascriptreact&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;files.associations&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;*.art&quot;</span>: <span class="string">&quot;html&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;editor.tabSize&quot;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">&quot;prettier.eslintIntegration&quot;</span>: <span class="literal">true</span>, <span class="comment">//让prettier使用eslint的代码格式进行校验</span></span><br><span class="line">    <span class="attr">&quot;prettier.semi&quot;</span>: <span class="literal">false</span>, <span class="comment">//去掉代码结尾的分号</span></span><br><span class="line">    <span class="attr">&quot;prettier.singleQuote&quot;</span>: <span class="literal">true</span>, <span class="comment">//使用单引号替代双引号</span></span><br><span class="line">    <span class="attr">&quot;vetur.format.defaultFormatter.html&quot;</span>: <span class="string">&quot;js-beautify-html&quot;</span>, <span class="comment">//格式化.vue中html</span></span><br><span class="line">    <span class="attr">&quot;vetur.format.defaultFormatter.js&quot;</span>: <span class="string">&quot;vscode-typescript&quot;</span>, <span class="comment">//让vue中的js按编辑器自带的ts格式进行格式化</span></span><br><span class="line">    <span class="attr">&quot;vetur.format.defaultFormatterOptions&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;js-beautify-html&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;wrap_attributes&quot;</span>: <span class="string">&quot;force-aligned&quot;</span> <span class="comment">//属性强制折行对齐</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;search.exclude&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;**/node_modules&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;**/bower_components&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;**/dist&quot;</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;editor.codeActionsOnSave&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;source.fixAll.eslint&quot;</span>: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;eslint.codeAction.showDocumentation&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;enable&quot;</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// &quot;workbench.colorTheme&quot;: &quot;Atom Material Theme&quot;,</span></span><br><span class="line">    <span class="comment">// &quot;editor.fontSize&quot;: 16,</span></span><br><span class="line">    <span class="attr">&quot;eslint.format.enable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;vsicons.dontShowNewVersionMessage&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;[vue]&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;editor.defaultFormatter&quot;</span>: <span class="string">&quot;dbaeumer.vscode-eslint&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;[html]&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;editor.formatOnSave&quot;</span>: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;[json]&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;editor.formatOnSave&quot;</span>: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;[scss]&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;editor.formatOnSave&quot;</span>: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;html.format.enable&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">&quot;json.format.enable&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">&quot;editor.rulers&quot;</span>: [</span><br><span class="line">      <span class="number">120</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;git.enableSmartCommit&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;settingsSync.ignoredExtensions&quot;</span>: [</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;http.proxy&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;editor.minimap.enabled&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">&quot;diffEditor.ignoreTrimWhitespace&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">&quot;files.autoGuessEncoding&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;eslint.codeActionsOnSave.rules&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">&quot;editor.formatOnSave&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;editor.fontVariations&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">&quot;[javascript]&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;editor.defaultFormatter&quot;</span>: <span class="string">&quot;dbaeumer.vscode-eslint&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;window.titleSeparator&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;window.title&quot;</span>: <span class="string">&quot;$&#123;rootName&#125;&quot;</span>, <span class="comment">// 标题栏显示</span></span><br><span class="line">    <span class="attr">&quot;terminal.integrated.profiles.windows&quot;</span>: &#123; <span class="comment">// 终端集成git bash</span></span><br><span class="line">      <span class="attr">&quot;bash&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;path&quot;</span>: <span class="string">&quot;C:\\Program Files\\Git\\bin\\bash.exe&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;args&quot;</span>: [<span class="string">&quot;-l&quot;</span>, <span class="string">&quot;-i&quot;</span>]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;terminal.integrated.defaultProfile.windows&quot;</span>: <span class="string">&quot;bash&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;terminal.external.windowsExec&quot;</span>: <span class="string">&quot;C:\\Program Files\\Git\\bin\\bash.exe&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;workbench.sideBar.location&quot;</span>: <span class="string">&quot;right&quot;</span> <span class="comment">// 侧边栏放到右边</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;搜索不到中文问题&quot;&gt;&lt;a href=&quot;#搜索不到中文问题&quot; class=&quot;headerlink&quot; title=&quot;搜索不到中文问题&quot;&gt;&lt;/a&gt;搜索不到中文问题&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;ctrl + shift + f 进行全局搜索的时候：&lt;br&gt;搜索</summary>
      
    
    
    
    
    <category term="IDE" scheme="http://www.ionluo.cn/blog/tags/IDE/"/>
    
  </entry>
  
  <entry>
    <title>【前端】我的lodash使用记录</title>
    <link href="http://www.ionluo.cn/blog/posts/36f36d66.html"/>
    <id>http://www.ionluo.cn/blog/posts/36f36d66.html</id>
    <published>2023-02-06T03:33:55.000Z</published>
    <updated>2023-08-08T02:01:05.566Z</updated>
    
    <content type="html"><![CDATA[<h2 id="深拷贝cloneDeep"><a href="#深拷贝cloneDeep" class="headerlink" title="深拷贝cloneDeep"></a><a href="https://www.lodashjs.com/docs/lodash.cloneDeep">深拷贝cloneDeep</a></h2><p>有处理深拷贝中的循环引用以及深度过大引起的爆栈问题，但是发现函数的拷贝还是引用而不是重新创建。</p><p>这点不太确定是否会有影响，了解即可。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> lodash = <span class="built_in">require</span>(<span class="string">&#x27;lodash&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.FUN = &#123;<span class="attr">hanleClose</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="built_in">window</span>.close1111() &#125;&#125;</span><br><span class="line"><span class="keyword">const</span> newFUN = _.cloneDeep(<span class="built_in">window</span>.FUN)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.FUN.hanleClose === newFUN.hanleClose) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><blockquote><p>重新创建一个相同的函数可以用下面方式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="comment">// 方式1， 很多函数库都是用这个方法</span></span><br><span class="line"><span class="keyword">var</span> closeFunc = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">&#x27;return &#x27;</span> + func.toString())();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式2， 利用bind 返回函数</span></span><br><span class="line"><span class="keyword">var</span> closeFunc = func.prototype.bind(&#123;&#125;);</span><br></pre></td></tr></table></figure><p>扩展：遇到下面问题</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> lodash = <span class="built_in">require</span>(<span class="string">&#x27;lodash&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.FUN = &#123;<span class="attr">hanleClose</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="built_in">window</span>.close1111() &#125;&#125;</span><br><span class="line"><span class="keyword">const</span> newFUN = _.cloneDeep(<span class="built_in">window</span>.FUN)</span><br><span class="line"><span class="comment">// const newFUN = _.clone(window.FUN)</span></span><br><span class="line"><span class="comment">// const newFUN = &#123;...window.FUN&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.FUN.hanleClose === newFUN.hanleClose) <span class="comment">// true</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> handle <span class="keyword">in</span> newFUN) &#123;</span><br><span class="line">    <span class="built_in">window</span>.FUN[handle] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            newFUN[handle](...arguments)</span><br><span class="line">        &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">            alert(e) <span class="comment">// TypeError: window.close1111 is not a function</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.FUN = &#123;<span class="attr">hanleClose</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="built_in">window</span>.close1111() &#125;&#125;</span><br><span class="line"><span class="keyword">const</span> newFUN = <span class="built_in">window</span>.FUN</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.FUN.hanleClose === newFUN.hanleClose) <span class="comment">// true</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> handle <span class="keyword">in</span> newFUN) &#123;</span><br><span class="line">    <span class="built_in">window</span>.FUN[handle] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            newFUN[handle](...arguments)</span><br><span class="line">        &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">            alert(e) <span class="comment">// RangeError: Maximum call stack size exceeded</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于对于函数，cloneDeep其实就是浅拷贝，由于只有对象（typeof === ‘object’）是引用类型，其他类型都是值传递，因此浅拷贝也不会触发死循环。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;深拷贝cloneDeep&quot;&gt;&lt;a href=&quot;#深拷贝cloneDeep&quot; class=&quot;headerlink&quot; title=&quot;深拷贝cloneDeep&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.lodashjs.com/docs/lodash.clon</summary>
      
    
    
    
    
    <category term="前端" scheme="http://www.ionluo.cn/blog/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="lodash" scheme="http://www.ionluo.cn/blog/tags/lodash/"/>
    
  </entry>
  
  <entry>
    <title>【前端】兼容问题汇总</title>
    <link href="http://www.ionluo.cn/blog/posts/dbbab9bd.html"/>
    <id>http://www.ionluo.cn/blog/posts/dbbab9bd.html</id>
    <published>2022-12-30T09:55:35.000Z</published>
    <updated>2023-11-28T02:22:05.579Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Maximum-length-of-a-URL-in-different-browsers"><a href="#Maximum-length-of-a-URL-in-different-browsers" class="headerlink" title="Maximum length of a URL in different browsers"></a><a href="https://www.geeksforgeeks.org/maximum-length-of-a-url-in-different-browsers/">Maximum length of a URL in different browsers</a></h2><p>Most web browsers display the URL of a web page in the address bar. There is a limit on the length of the URL basing on the browser we use. Here are the details.</p><ul><li><p><strong>Google Chrome –</strong><br>Google Chrome allows the maximum length of the URL to be of the size 2MB (2,097,152 characters).</p></li><li><p><strong>Mozilla Firefox –</strong><br>In Firefox the length of the URL can be unlimited but practically after 65,536 characters the location bar no longer displays the URL.</p></li><li><p><strong>Edge –</strong><br>Edge allows the URL length to be a maximum of 2083 characters but not more than 2048 characters in the path portion of the URL.</p></li><li><p><strong>Opera –</strong><br>Opera allows the URL length to be unlimited.</p></li><li><p><strong>Safari –</strong><br>The maximum length of URL in Safari is 80000 characters after crossing this limit the page displays an error.</p></li><li><p><strong>Apache(Server) –</strong><br>Apache allows the URL length to be a maximum of 4000 characters after which it throws an error message. </p></li></ul><h2 id="乱码"><a href="#乱码" class="headerlink" title="乱码"></a>乱码</h2><ol><li><p>文件编码不正确</p><p>可通过vi打开指定文件输入 <code>:set fileencoding</code> 查看文件编码</p></li><li><p>上传文件乱码</p><p>见：<a href="https://www.xiaogd.net/md/form-encoding-and-mojibake-3-post-method-2">https://www.xiaogd.net/md/form-encoding-and-mojibake-3-post-method-2</a></p></li><li><p>中间件编码设置不正确</p><p>导致返回的content-type不是需要的编码</p></li></ol><blockquote><p>通过该网址有可能还原乱码原始字符：<a href="https://wrtools.top/coderepair.php">https://wrtools.top/coderepair.php</a></p><p>可以通过百度的ie（Input Encoding）参数来转换编码查看一个字符对应的编码是啥，或者借用记事本。</p><p><a href="https://www.baidu.com/s?wd=%E4%B8%AD&amp;ie=gb2312">https://www.baidu.com/s?wd=%E4%B8%AD&amp;ie=gb2312</a></p><p>根据下图可以大致猜测乱码成因：</p><p><img src="http://blog.cdn.ionluo.cn/blog/938105-20201209203329923-1623133577.jpg" alt="img"></p></blockquote><h2 id="下载变成打开"><a href="#下载变成打开" class="headerlink" title="下载变成打开"></a><a href="https://segmentfault.com/q/1010000018663286">下载变成打开</a></h2><p>检查响应头是否有 </p><p><code>Content-Disposition: attachment; filename=xxxx</code></p><p>如果有的话是平台自行阻止了下载，如钉钉、微信等平台。同样ios的Safari浏览器也存在这类问题，见：</p><blockquote><ul><li><a href="https://link.segmentfault.com/?enc=ADuPNOYsogKj2yxKAQSGog==.KV9E2vX25MX57CxW+TEyyK8fD1ZBk5oyfiq8t2o5EkRqzAhBpefXlkSSjivAFdLZkh9Ne1RS1oiwwep7EFj6zw==">https://github.com/eligrey/Fi…</a></li><li><a href="https://link.segmentfault.com/?enc=bBup/oCRLgOjSE9SVEmpBA==.PZjP79dEAGTpf7WIZnq1Sr2FFdh6Dn10sQ8WQMAgpSDbFxDsoBwFWZ8mRGf01r+f">https://bugs.webkit.org/show_…</a></li><li><a href="https://link.segmentfault.com/?enc=z2Rgwhg3zLSXBaCqRxHpPA==.t64jfPsXOgqs0HuA3/8Z/tVMwTJXh/fZuSM1+c0v0y9YQZBPUP8iCKn0CGUCergl">https://bugs.webkit.org/show_…</a></li></ul><p>apple的建议 ： <a href="https://link.segmentfault.com/?enc=yjfwQbOU5+Epj3QdIQCE6Q==.0M/1yUT8TlIIoH9Xm7hPGgk86c7ePdjHE+bmqx6au6SNmDr2+P+LyVR4UjuKRX3K5fAjduITcAKvXbOqvQdq6A5dyS7+YHzGTAz/8IJpxbCbqQVdt/Ttu8d1Z+NYh2UM">https://discussions.apple.com…</a></p></blockquote><h2 id="JS兼容处理"><a href="#JS兼容处理" class="headerlink" title="JS兼容处理"></a>JS兼容处理</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 兼容 location.origin</span></span><br><span class="line"><span class="keyword">var</span> protocol = location.protocol;</span><br><span class="line"><span class="keyword">var</span> hostname = location.hostname;</span><br><span class="line"><span class="keyword">var</span> port = location.port ? (<span class="string">&#x27;:&#x27;</span> + location.port) : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">location.origin = location.origin || protocol + <span class="string">&#x27;//&#x27;</span> + hostname + port;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Maximum-length-of-a-URL-in-different-browsers&quot;&gt;&lt;a href=&quot;#Maximum-length-of-a-URL-in-different-browsers&quot; class=&quot;headerlink&quot; title=&quot;Ma</summary>
      
    
    
    
    
    <category term="前端" scheme="http://www.ionluo.cn/blog/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="兼容问题" scheme="http://www.ionluo.cn/blog/tags/%E5%85%BC%E5%AE%B9%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>【好文收藏】Centos7磁盘满了排查思路以及解决办法</title>
    <link href="http://www.ionluo.cn/blog/posts/c8984d0c.html"/>
    <id>http://www.ionluo.cn/blog/posts/c8984d0c.html</id>
    <published>2022-11-23T01:15:01.000Z</published>
    <updated>2023-01-19T06:23:48.007Z</updated>
    
    <content type="html"><![CDATA[<p>当我们的服务器 比如 centos 出现硬盘存储满了，空闲空间不足以给其他应用提供存储需要的空间的时候。比较常见的异常就是 <code>终端命令行空间，自动补全功能失效,报临时空间不足</code> 或者数据库空间不足，导致写数据异常等等的问题。</p><h2 id="排查思路"><a href="#排查思路" class="headerlink" title="排查思路"></a>排查思路</h2><h3 id="1-查看当前磁盘占用情况"><a href="#1-查看当前磁盘占用情况" class="headerlink" title="1. 查看当前磁盘占用情况"></a>1. 查看当前磁盘占用情况</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df -hl</span><br><span class="line"># 输出</span><br></pre></td></tr></table></figure><h3 id="2-根据第一步确定，哪些文件占用百分比比较高"><a href="#2-根据第一步确定，哪些文件占用百分比比较高" class="headerlink" title="2. 根据第一步确定，哪些文件占用百分比比较高"></a>2. 根据第一步确定，哪些文件占用百分比比较高</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">du -h -x --max-depth=1</span><br><span class="line"># 检查当前目录下，目录层级深度为1，空间占用情况。</span><br></pre></td></tr></table></figure><h3 id="3-进入对应目录"><a href="#3-进入对应目录" class="headerlink" title="3. 进入对应目录"></a>3. 进入对应目录</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 查看当前目录所占空间</span><br><span class="line">du -sh</span><br><span class="line"></span><br><span class="line">## 查看每个目录所占空间</span><br><span class="line">du -h -x --max-depth=1</span><br></pre></td></tr></table></figure><h3 id="4-找出真正占空间的文件，然后决定是迁移还是删除"><a href="#4-找出真正占空间的文件，然后决定是迁移还是删除" class="headerlink" title="4. 找出真正占空间的文件，然后决定是迁移还是删除"></a>4. 找出真正占空间的文件，然后决定是迁移还是删除</h3><p>删除文件请看 目录6</p><p><strong>注意:</strong></p><p>有时候 发现有些日志文件，已经执行 rm 删除了。 通过 <code>du</code> 命令查看也已经没有占空间了，但是。</p><p><code>df -hl</code> 查看，还是没有释放，这个问题一般不常见，但是如果碰见了，就比较麻烦。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在 Linux 或者 Unix 系统中，通过rm或者文件管理器删除文件将会从文件系统的目录结构上解除链接(unlink).然而如果文件是被</span><br><span class="line">打开的（有一个进程正在使用），那么进程将仍然可以读取该文件，磁盘空间也一直被占用。</span><br></pre></td></tr></table></figure><p>解决方法</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsof |grep deleted</span><br></pre></td></tr></table></figure><p>找出已经删除了，但删除时有进程正在使用的文件，这里的文件会比较多，需要耐心，找出然后 kill 掉进程，或者重启服务。</p><h3 id="5-批量删除文件"><a href="#5-批量删除文件" class="headerlink" title="5. 批量删除文件"></a>5. 批量删除文件</h3><p>查看共有多少此类文件</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 查找 info-log. 开头的文件个数</span><br><span class="line">find . -name &#x27;info-log.*&#x27; | wc -l</span><br></pre></td></tr></table></figure><p>删除 查询出来的文件</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -name &#x27;info-log.*&#x27; | xargs rm -r</span><br></pre></td></tr></table></figure><p>直接删除对应目录以及子目录</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//慎用</span><br><span class="line">rm -rf dirname</span><br></pre></td></tr></table></figure><p>批量删除目录模糊（批量删除以7开头命名的文件夹）</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rm -rf 7*</span><br></pre></td></tr></table></figure><p>查找特定日期之前的图片并删除</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">find . -name &quot;*.gz&quot; -ctime +39 -exec rm -r &#123;&#125; \;</span><br><span class="line">// . 指代：当前目录</span><br><span class="line">// +39 指代：39 天之前。</span><br></pre></td></tr></table></figure><p>查询当前目录下，，365天之前创建的 jpg结尾的文件，并删除</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -name &quot;*.jpg&quot; -ctime +365 -exec rm -r &#123;&#125; \;</span><br></pre></td></tr></table></figure><blockquote><p>转自：<a href="https://zhuanlan.zhihu.com/p/508938405">https://zhuanlan.zhihu.com/p/508938405</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;当我们的服务器 比如 centos 出现硬盘存储满了，空闲空间不足以给其他应用提供存储需要的空间的时候。比较常见的异常就是 &lt;code&gt;终端命令行空间，自动补全功能失效,报临时空间不足&lt;/code&gt; 或者数据库空间不足，导致写数据异常等等的问题。&lt;/p&gt;
&lt;h2 id=&quot;排</summary>
      
    
    
    
    
    <category term="好文收藏" scheme="http://www.ionluo.cn/blog/tags/%E5%A5%BD%E6%96%87%E6%94%B6%E8%97%8F/"/>
    
  </entry>
  
  <entry>
    <title>【好文收藏】正则表达式</title>
    <link href="http://www.ionluo.cn/blog/posts/9434ed02.html"/>
    <id>http://www.ionluo.cn/blog/posts/9434ed02.html</id>
    <published>2022-11-19T06:54:39.000Z</published>
    <updated>2023-01-19T06:23:48.016Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一次性搞懂JavaScript正则表达式之语法"><a href="#一次性搞懂JavaScript正则表达式之语法" class="headerlink" title="一次性搞懂JavaScript正则表达式之语法"></a>一次性搞懂JavaScript正则表达式之语法</h2><blockquote><p>作者：马蹄疾 奇舞精选</p><p>出处：<a href="https://mp.weixin.qq.com/s/KE_Bjxk8I1QBUegBOR0mYw">https://mp.weixin.qq.com/s/KE_Bjxk8I1QBUegBOR0mYw</a></p><p>仅做备份学习用，排版未整理，为了更好的阅读体验请查看原文</p></blockquote><blockquote><p>名余曰正则兮，字余曰灵均。</p></blockquote><p>Regular Expressions翻译成中文叫正则表达式。也不知道是谁翻译过来的，听起来就很严肃。似乎翻译成通用表达式更能传达其精髓，如果你不怕梦见屈原的话。</p><p>为什么叫通用表达式？因为它有一套和编程语言无关的文本匹配规则。很多语言都实现了正则表达式的文本匹配引擎，只不过在功能集合上略有不同。</p><p>我们要记住的是三点：</p><p>其一，正则表达式是用来提取文本的。</p><p>其二，正则表达式的表达能力强大到令人发指。</p><p>其三，正则表达式的语法对初学者不友好。</p><p>另外，本专题只涉及JavaScript语言的正则表达式，其他语言的规则可能略有不同。</p><p>我还为各位读者准备了一副宣传语，应该能让你心动(点赞)吧？</p><blockquote><p>学一门前端工具，几年就过时了。学正则表达式，受用一辈子。</p></blockquote><h3 id="普通字符"><a href="#普通字符" class="headerlink" title="普通字符"></a>普通字符</h3><p>什么叫普通字符？</p><p>当我们写a的时候，我们指的就是a；当我们写爱的时候，我们指的就是爱。</p><blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;hello 😀 regex&#x27;</span>.match(<span class="regexp">/😀/</span>);<span class="regexp">//</span> [<span class="string">&quot;😀&quot;</span>, index: <span class="number">6</span>, input: <span class="string">&quot;hello 😀 regex&quot;</span>, groups: undefined]</span><br></pre></td></tr></table></figure></blockquote><p>这就是普通字符，它在正则中的含义就是检索它本身。除了正则规定的部分字符外，其余的都是普通字符，包括各种人类语言，包括emoji，只要能够表达为字符串。</p><h3 id="开始与结束"><a href="#开始与结束" class="headerlink" title="开始与结束"></a>开始与结束</h3><p>^字符的英文是caret，翻译成中文是脱字符。不要问我，又不是我翻译的。它在正则中属于元字符，通常代表的意义是文本的开始。说通常是因为当它在字符组中[^abc]另有含义。</p><p>什么叫文本的开始？就是如果它是正则主体的第一个符号，那紧跟着它的字符必须是被匹配文本的第一个字符。</p><blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;regex&#x27;</span>.match(<span class="regexp">/^r/</span>);<span class="regexp">//</span> [<span class="string">&quot;r&quot;</span>, index: <span class="number">0</span>, input: <span class="string">&quot;regex&quot;</span>, groups: undefined]</span><br></pre></td></tr></table></figure></blockquote><p>问题来了，如果^不是正则的第一个符号呢？</p><blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;regex&#x27;</span>.match(<span class="regexp">/a^r/</span>);<span class="regexp">//</span> null</span><br></pre></td></tr></table></figure></blockquote><p>所以呀，关于它有三点需要注意：</p><ul><li>作为匹配文本开始元字符的时候必须是正则主体的第一个符号，否则正则无效。</li><li>它匹配的是一个位置，而不是具体的文本。</li><li>它在其他规则中有另外的含义。</li></ul><p>$字符与^正好相反。它代表文本的结束，并且没有其他含义(其实是有的，但不是在正则主体内)。同样，它必须是正则主体的最后一个符号。</p><blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;regex&#x27;</span>.match(<span class="regexp">/x$/</span>);<span class="regexp">//</span> [<span class="string">&quot;x&quot;</span>, index: <span class="number">4</span>, input: <span class="string">&quot;regex&quot;</span>, groups: undefined]</span><br></pre></td></tr></table></figure></blockquote><p>^与$特殊的地方在于它匹配的是一个位置。位置不像字符，它看不见，所以更不容易理解。</p><h3 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h3><p>我们现在已经知道$匹配文本的结束位置，它是元字符。但是如果我想匹配$本身呢？匹配一个美元符号的需求再常见不过了吧。所以我们得将它贬为庶民。</p><p>\反斜杠就是干这个的。</p><blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;price: $3.6&#x27;</span>.match(<span class="regexp">/\$[0-9]+\.[0-9]+$/</span>);<span class="regexp">//</span> [<span class="string">&quot;$3.6&quot;</span>, index: <span class="number">7</span>, input: <span class="string">&quot;price: $3.6&quot;</span>, groups: undefined]</span><br></pre></td></tr></table></figure></blockquote><p>上面的例子有点超纲了，超纲的部分先不管。</p><p>你可以认为\也是一个元字符，它跟在另一个元字符后面，就能还原它本来的含义。</p><p>如果有两个\呢？那就是转义自身了。如果有三个\呢？我们得分成两段去理解。以此类推。</p><p>普通字符前面跟了一个\是什么效果？首先它们是一个整体，然后普通字符转义后还是普通字符。</p><h3 id="带反斜杠的元字符"><a href="#带反斜杠的元字符" class="headerlink" title="带反斜杠的元字符"></a>带反斜杠的元字符</h3><p>一般来说，普通字符前面带反斜杠还是普通字符，但是有一些普通字符，带反斜杠后反而变成了元字符。</p><p>要怪只能怪计算机领域的常用符号太少了。</p><table><thead><tr><th>元字符</th><th>含义</th></tr></thead><tbody><tr><td>\b</td><td>匹配一个单词边界(boundary)</td></tr><tr><td>\B</td><td>匹配一个非单词边界</td></tr><tr><td>\d</td><td>匹配一个数字字符(digit)</td></tr><tr><td>\D</td><td>匹配一个非数字字符</td></tr><tr><td>\s</td><td>匹配一个空白字符(space)</td></tr><tr><td>\S</td><td>匹配一个非空白字符</td></tr><tr><td>\w</td><td>匹配一个字母或者一个数字或者一个下划线(word)</td></tr><tr><td>\W</td><td>匹配一个字母、数字和下划线之外的字符</td></tr></tbody></table><p>你这么聪明，肯定一眼就看出来，大写代表反义。对，就是这么好记。</p><p>\b元字符</p><p>\b匹配的也是一个位置，而不是一个字符。单词和空格之间的位置，就是所谓单词边界。</p><blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;hello regex&#x27;</span>.match(<span class="regexp">/\bregex$/</span>);<span class="regexp">//</span> [<span class="string">&quot;regex&quot;</span>, index: <span class="number">6</span>, input: <span class="string">&quot;hello regex&quot;</span>, groups: undefined]<span class="string">&#x27;hello regex&#x27;</span>.match(<span class="regexp">/\Bregex$/</span>);<span class="regexp">//</span> null</span><br></pre></td></tr></table></figure></blockquote><p>所谓单词边界，对中文等其他语言是无效的。</p><blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;jiangshuying gaoyuanyuan huosiyan&#x27;</span>.match(<span class="regexp">/\bgaoyuanyuan\b/</span>);<span class="regexp">//</span> [<span class="string">&quot;gaoyuanyuan&quot;</span>, index: <span class="number">13</span>, input: <span class="string">&quot;jiangshuying gaoyuanyuan huosiyan&quot;</span>, groups: undefined]<span class="string">&#x27;江疏影 高圆圆 霍思燕&#x27;</span>.match(<span class="regexp">/\b高圆圆\b/</span>);<span class="regexp">//</span> null</span><br></pre></td></tr></table></figure></blockquote><p>所以\b翻译一下就是^\w|\w$|\W\w|\w\W。</p><p>\d元字符</p><p>\d匹配一个数字，注意，这里的数字不是指JavaScript中的数字类型，因为文本全是字符串。它指的是代表数字的字符。</p><blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;123&#x27;</span>.match(<span class="regexp">/\d/</span>);<span class="regexp">//</span> [<span class="string">&quot;1&quot;</span>, index: <span class="number">0</span>, input: <span class="string">&quot;123&quot;</span>, groups: undefined]</span><br></pre></td></tr></table></figure></blockquote><p>\s元字符</p><p>\s匹配一个空白字符。</p><p>这里需要解释一下什么是空白字符。</p><p>空白字符不是空格，它是空格的超集。很多人说它是\f\n\r\t\v的总和，其中\f是换页符，\n是换行符，\r是回车符，\t是水平制表符，\v是垂直制表符。是这样么？</p><blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;a b&#x27;</span>.match(<span class="regexp">/\w\s\w/</span>);<span class="regexp">//</span> [<span class="string">&quot;a b&quot;</span>, index: <span class="number">0</span>, input: <span class="string">&quot;a b&quot;</span>, groups: undefined]<span class="string">&#x27;a b&#x27;</span>.match(<span class="regexp">/\w\f\w/</span>);<span class="regexp">//</span> null<span class="string">&#x27;a b&#x27;</span>.match(<span class="regexp">/\w\n\w/</span>);<span class="regexp">//</span> null<span class="string">&#x27;a b&#x27;</span>.match(<span class="regexp">/\w\r\w/</span>);<span class="regexp">//</span> null<span class="string">&#x27;a b&#x27;</span>.match(<span class="regexp">/\w\t\w/</span>);<span class="regexp">//</span> null<span class="string">&#x27;a b&#x27;</span>.match(<span class="regexp">/\w\v\w/</span>);<span class="regexp">//</span> null<span class="string">&#x27;a b&#x27;</span>.match(<span class="regexp">/\w \w/</span>);<span class="regexp">//</span> [<span class="string">&quot;a b&quot;</span>, index: <span class="number">0</span>, input: <span class="string">&quot;a b&quot;</span>, groups: undefined]</span><br></pre></td></tr></table></figure></blockquote><p>这样说的人，明显是没有做过实验。其实正确的写法是空格\f\n\r\t\v的总和，集合里面包含一个空格，可千万别忽略了。诶，难道空格在正则中的写法就是空一格么，是的，就是这样随意。</p><p>这个集合中很多都是不可打印字符，估计只有\n是我们的老朋友。所以，如果不需要区分空格和换行的话，那就大胆的用\s吧。</p><p>\w元字符</p><p>\w匹配一个字母或者一个数字或者一个下划线。为什么要将它们放一起？想一想JavaScript中的变量规则，包括很多应用的用户名都只能是这三样，所以把它们放一起挺方便的。</p><p>不过要注意，字母指的是26个英文字母，其他的不行。</p><blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;正则&#x27;</span>.match(<span class="regexp">/\w/</span>);<span class="regexp">//</span> null</span><br></pre></td></tr></table></figure></blockquote><p>负阴抱阳</p><p>如果我们将大写和小写的带反斜杠的元字符组合在一起，就能匹配任何字符。是的，不针对任何人。</p><blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;@regex&#x27;</span>.match(<span class="regexp">/[\s\S]/</span>);<span class="regexp">//</span> [<span class="string">&quot;@&quot;</span>, index: <span class="number">0</span>, input: <span class="string">&quot;@regex&quot;</span>, groups: undefined]</span><br></pre></td></tr></table></figure></blockquote><p>方括号的含义我们先按下不表。</p><h3 id="道生一"><a href="#道生一" class="headerlink" title="道生一"></a>道生一</h3><p>.在正则中的含义仙风道骨，它匹配换行符之外的任意单个字符。</p><p>如果文本不存在换行符，那么.和[\b\B]和[\d\D]和[\s\S]和[\w\W]是等价的。</p><p>如果文本存在换行符，那么(.|\n)和[\b\B]和[\d\D]和[\s\S]和[\w\W]是等价的。</p><blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;@regex&#x27;</span>.match(<span class="regexp">/./</span>);<span class="regexp">//</span> [<span class="string">&quot;@&quot;</span>, index: <span class="number">0</span>, input: <span class="string">&quot;@regex&quot;</span>, groups: undefined]</span><br></pre></td></tr></table></figure></blockquote><h3 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h3><p>前面我们一直在强调，一个元字符只匹配一个字符。即便强大如.它也只能匹配一个。</p><p>那匹配gooooogle的正则是不是得写成/gooooogle/呢？</p><p>正则冷笑，并向你发射一个蔑视。</p><p>如果匹配的模式有重复，我们可以声明它重复的次数。</p><table><thead><tr><th>量词</th><th>含义</th></tr></thead><tbody><tr><td>?</td><td>重复零次或者一次</td></tr><tr><td>+</td><td>重复一次或者多次，也就是至少一次</td></tr><tr><td>*</td><td>重复零次或者多次，也就是任意次数</td></tr><tr><td>{n}</td><td>重复n次</td></tr><tr><td>{n,}</td><td>重复n次或者更多次</td></tr><tr><td>{n,m}</td><td>重复n次到m次之间的次数，包含n次和m次</td></tr></tbody></table><p>有三点需要注意：</p><ul><li><p>?在诸如匹配http协议的时候非常有用，就像这样：/http(s)?/。它在正则中除了是量词还有别的含义，后面会提到。</p></li><li><p>我们习惯用/.*/来匹配若干对我们没有价值的文本，它的含义是若干除换行符之外的字符。比如我们需要文本两头的格式化信息，中间是什么无所谓，它就派上用场了。不过它的性能可不好。</p></li><li><p>{n,m}之间不能有空格，空格在正则中是有含义的。</p></li></ul><p>关于量词最令人困惑的是：它重复什么？</p><p>它重复紧贴在它前面的某个集合。第一点，必须是紧贴在它前面；第二点，重复一个集合。最常见的集合就是一个字符，当然正则中有一些元字符能够将若干字符变成一个集合，后面会讲到。</p><blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;gooooogle&#x27;</span>.match(<span class="regexp">/go&#123;2,5&#125;gle/</span>);<span class="regexp">//</span> [<span class="string">&quot;gooooogle&quot;</span>, index: <span class="number">0</span>, input: <span class="string">&quot;gooooogle&quot;</span>, groups: undefined]</span><br></pre></td></tr></table></figure></blockquote><p>如果一个量词紧贴在另一个量词后面会怎样？</p><blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;gooooogle&#x27;</span>.match(<span class="regexp">/go&#123;2,5&#125;+gle/</span>);<span class="regexp">//</span> Uncaught SyntaxError: Invalid regular expression: <span class="regexp">/go&#123;2,5&#125;+gle/</span>: Nothing to repeat</span><br></pre></td></tr></table></figure></blockquote><h3 id="贪婪模式与非贪婪模式"><a href="#贪婪模式与非贪婪模式" class="headerlink" title="贪婪模式与非贪婪模式"></a>贪婪模式与非贪婪模式</h3><p>前面提到量词不能紧跟在另一个量词后面，马上要👋👋打脸了。</p><blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;https&#x27;</span>.match(<span class="regexp">/http(s)?/</span>);<span class="regexp">//</span> [<span class="string">&quot;https&quot;</span>, <span class="string">&quot;s&quot;</span>, index: <span class="number">0</span>, input: <span class="string">&quot;https&quot;</span>, groups: undefined]<span class="string">&#x27;https&#x27;</span>.match(<span class="regexp">/http(s)??/</span>);<span class="regexp">//</span> [<span class="string">&quot;http&quot;</span>, undefined, index: <span class="number">0</span>, input: <span class="string">&quot;https&quot;</span>, groups: undefined]</span><br></pre></td></tr></table></figure></blockquote><p>然而，我的脸是这么好打的？</p><p>紧跟在?后面的?它不是一个量词，而是一个模式切换符，从贪婪模式切换到非贪婪模式。</p><p>贪婪模式在正则中是默认的模式，就是在既定规则之下匹配尽可能多的文本。因为正则中有量词，它的重复次数可能是一个区间，这就有了取舍。</p><p>紧跟在量词之后加上?就可以开启非贪婪模式。怎么省事怎么来。</p><p>这里的要点是，?必须紧跟着量词，否则的话它自己就变成量词了。</p><h3 id="字符组"><a href="#字符组" class="headerlink" title="字符组"></a>字符组</h3><p>正则中的普通字符只能匹配它自己。如果我要匹配一个普通字符，但是我不确定它是什么，怎么办？</p><blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;grey or gray&#x27;</span>.match(<span class="regexp">/gr[ae]y/</span>);<span class="regexp">//</span> [<span class="string">&quot;grey&quot;</span>, index: <span class="number">0</span>, input: <span class="string">&quot;grey or gray&quot;</span>, groups: undefined]</span><br></pre></td></tr></table></figure></blockquote><p>方括号在正则中表示一个区间，我们称它为字符组。</p><p>首先，字符组中的字符集合只是所有的可选项，最终它只能匹配一个字符。</p><p>然后，字符组是一个独立的世界，元字符不需要转义。</p><blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;$&#x27;</span>.match(<span class="regexp">/[$&amp;@]/</span>);<span class="regexp">//</span> [<span class="string">&quot;$&quot;</span>, index: <span class="number">0</span>, input: <span class="string">&quot;$&quot;</span>, groups: undefined]</span><br></pre></td></tr></table></figure></blockquote><p>最后，有两个字符在字符组中有特殊含义。</p><p>^在字符组中表示取反，不再是文本开始的位置了。</p><blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;regex&#x27;</span>.match(<span class="regexp">/[^abc]/</span>);<span class="regexp">//</span> [<span class="string">&quot;r&quot;</span>, index: <span class="number">0</span>, input: <span class="string">&quot;regex&quot;</span>, groups: undefined]</span><br></pre></td></tr></table></figure></blockquote><p>如果我就要^呢？前面已经讲过了，转义。</p><p>-本来是一个普通字符，在字符组中摇身一变成为连字符。</p><blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;13&#x27;</span>.match(<span class="regexp">/[1-9]3/</span>);<span class="regexp">//</span> [<span class="string">&quot;13&quot;</span>, index: <span class="number">0</span>, input: <span class="string">&quot;13&quot;</span>, groups: undefined]</span><br></pre></td></tr></table></figure></blockquote><p>连字符的意思是匹配范围在它的左边字符和右边字符之间。</p><p>如果我这样呢？</p><blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;abc-3&#x27;</span>.match(<span class="regexp">/[0-z]/</span>);<span class="regexp">//</span> [<span class="string">&quot;a&quot;</span>, index: <span class="number">0</span>, input: <span class="string">&quot;abc-3&quot;</span>, groups: undefined]</span><br></pre></td></tr></table></figure></blockquote><blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;xyz-3&#x27;</span>.match(<span class="regexp">/[0-c]/</span>);<span class="regexp">//</span> [<span class="string">&quot;3&quot;</span>, index: <span class="number">4</span>, input: <span class="string">&quot;xyz-3&quot;</span>, groups: undefined]</span><br></pre></td></tr></table></figure></blockquote><blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;xyz-3&#x27;</span>.match(<span class="regexp">/[0-$]/</span>);<span class="regexp">//</span> Uncaught SyntaxError: Invalid regular expression: <span class="regexp">/[0-$]/</span>: Range out of order <span class="keyword">in</span> character class</span><br></pre></td></tr></table></figure></blockquote><p>发现什么了没有？只有两种字符是可以用连字符的：英文字母和数字。而且英文字母可以和数字连起来，英文字母的顺序在后面。这和扑克牌1 2 3 4 5 6 7 8 9 10 J Q K是一个道理。</p><h3 id="捕获组与非捕获组"><a href="#捕获组与非捕获组" class="headerlink" title="捕获组与非捕获组"></a>捕获组与非捕获组</h3><p>我们已经知道量词是怎么回事了，我们也知道量词只能重复紧贴在它前面的字符。</p><p>如果我要重复的是一串字符呢？</p><blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;i love you very very very much&#x27;</span>.match(<span class="regexp">/i love you very +much/</span>);<span class="regexp">//</span> null<span class="string">&#x27;i love you very very very much&#x27;</span>.match(<span class="regexp">/i love you v+e+r+y+ +much/</span>);<span class="regexp">//</span> null</span><br></pre></td></tr></table></figure></blockquote><p>这样肯定是不行的。是时候请圆括号出山了。</p><blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;i love you very very very much&#x27;</span>.match(<span class="regexp">/i love you (very )+much/</span>);<span class="regexp">//</span> [<span class="string">&quot;i love you very very very much&quot;</span>, <span class="string">&quot;very &quot;</span>, index: <span class="number">0</span>, input: <span class="string">&quot;i love you very very very much&quot;</span>, groups: undefined]</span><br></pre></td></tr></table></figure></blockquote><p>圆括号的意思是将它其中的字符集合打包成一个整体，然后量词就可以操作这个整体了。这和方括号的效果是完全不一样的。</p><p>而且默认的，圆括号的匹配结果是可以捕获的。</p><p>正则内捕获</p><p>现在我们有一个需求，匹配<div>标签。</p><blockquote><figure class="highlight bnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27;<span class="attribute">&lt;div&gt;</span>hello regex<span class="attribute">&lt;/div&gt;</span>&#x27;.match(/<span class="attribute">&lt;div&gt;</span>.*<span class="attribute">&lt;\/div&gt;</span>/);// [&quot;<span class="attribute">&lt;div&gt;</span>hello regex<span class="attribute">&lt;/div&gt;</span>&quot;, index: 0, input: &quot;<span class="attribute">&lt;div&gt;</span>hello regex<span class="attribute">&lt;/div&gt;</span>&quot;, groups: undefined]</span><br></pre></td></tr></table></figure></blockquote><p>这很简单。但如果我要匹配的是任意标签，包括自定义的标签呢？</p><blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&lt;App&gt;hello regex&lt;/App&gt;&#x27;</span>.match(<span class="regexp">/&lt;([a-zA-Z]+)&gt;.*&lt;\/\1&gt;/</span>);<span class="regexp">//</span> [<span class="string">&quot;&lt;App&gt;hello regex&lt;/App&gt;&quot;</span>, <span class="string">&quot;App&quot;</span>, index: <span class="number">0</span>, input: <span class="string">&quot;&lt;App&gt;hello regex&lt;/App&gt;&quot;</span>, groups: undefined]</span><br></pre></td></tr></table></figure></blockquote><p>这时候就要用到正则的捕获特性。正则内捕获使用\数字的形式，分别对应前面的圆括号捕获的内容。这种捕获的引用也叫<strong>反向引用</strong>。</p><p>我们来看一个更复杂的情况：</p><blockquote><figure class="highlight bnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27;<span class="attribute">&lt;App&gt;</span>hello regex<span class="attribute">&lt;/App&gt;</span><span class="attribute">&lt;p&gt;</span>A<span class="attribute">&lt;/p&gt;</span><span class="attribute">&lt;p&gt;</span>hello regex<span class="attribute">&lt;/p&gt;</span>&#x27;.match(/<span class="attribute">&lt;((A|a)pp)&gt;</span>(hello regex)+<span class="attribute">&lt;\/\1&gt;</span><span class="attribute">&lt;p&gt;</span>\2<span class="attribute">&lt;\/p&gt;</span><span class="attribute">&lt;p&gt;</span>\3<span class="attribute">&lt;\/p&gt;</span>/);// [&quot;<span class="attribute">&lt;App&gt;</span>hello regex<span class="attribute">&lt;/App&gt;</span><span class="attribute">&lt;p&gt;</span>A<span class="attribute">&lt;/p&gt;</span><span class="attribute">&lt;p&gt;</span>hello regex<span class="attribute">&lt;/p&gt;</span>&quot;, &quot;App&quot;, &quot;A&quot;, &quot;hello regex&quot;, index: 0, input: &quot;<span class="attribute">&lt;App&gt;</span>hello regex<span class="attribute">&lt;/App&gt;</span><span class="attribute">&lt;p&gt;</span>A<span class="attribute">&lt;/p&gt;</span><span class="attribute">&lt;p&gt;</span>hello regex<span class="attribute">&lt;/p&gt;</span>&quot;, groups: undefined]</span><br></pre></td></tr></table></figure></blockquote><p>如果有嵌套的圆括号，那么捕获的引用是先递归的，然后才是下一个顶级捕获。</p><p>正则外捕获</p><blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;@abc&#x27;</span>.match(<span class="regexp">/@(abc)/</span>);<span class="regexp">//</span> [<span class="string">&quot;@abc&quot;</span>, <span class="string">&quot;abc&quot;</span>, index: <span class="number">0</span>, input: <span class="string">&quot;@abc&quot;</span>, groups: undefined]RegExp.<span class="variable">$1</span>;<span class="regexp">//</span> <span class="string">&quot;abc&quot;</span></span><br></pre></td></tr></table></figure></blockquote><p>没错，RegExp就是构造正则的构造函数。如果有捕获组，它的实例属性$数字会显示对应的引用。</p><p>如果有多个正则呢？</p><blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;@abc&#x27;</span>.match(<span class="regexp">/@(abc)/</span>);<span class="regexp">//</span> [<span class="string">&quot;@abc&quot;</span>, <span class="string">&quot;abc&quot;</span>, index: <span class="number">0</span>, input: <span class="string">&quot;@abc&quot;</span>, groups: undefined]<span class="string">&#x27;@xyz&#x27;</span>.match(<span class="regexp">/@(xyz)/</span>);<span class="regexp">//</span> [<span class="string">&quot;@xyz&quot;</span>, <span class="string">&quot;xyz&quot;</span>, index: <span class="number">0</span>, input: <span class="string">&quot;@xyz&quot;</span>, groups: undefined]RegExp.<span class="variable">$1</span>;<span class="regexp">//</span> <span class="string">&quot;xyz&quot;</span></span><br></pre></td></tr></table></figure></blockquote><p>RegExp构造函数的引用只显示最后一个正则的捕获。</p><p>另外还有一个字符串实例方法也支持正则捕获的引用，它就是replace方法。</p><blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;hello **regex**&#x27;</span>.replace(<span class="regexp">/\*&#123;2&#125;(.*)\*&#123;2&#125;/</span>, <span class="string">&#x27;&lt;strong&gt;$1&lt;/strong&gt;&#x27;</span>);<span class="regexp">//</span> <span class="string">&quot;hello &lt;strong&gt;regex&lt;/strong&gt;&quot;</span></span><br></pre></td></tr></table></figure></blockquote><p>实际上它才是最常用的引用捕获的方式。</p><p>捕获命名</p><blockquote><p>这是ES2018的新特性。</p></blockquote><p>使用\数字引用捕获必须保证捕获组的顺序不变。现在开发者可以给捕获组命名了，有了名字以后，引用起来更加确定。</p><blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&lt;App&gt;hello regex&lt;/App&gt;&#x27;</span>.match(<span class="regexp">/&lt;(?&lt;tag&gt;[a-zA-Z]+)&gt;.*&lt;\/\k&lt;tag&gt;&gt;/</span>);<span class="regexp">//</span> [<span class="string">&quot;&lt;App&gt;hello regex&lt;/App&gt;&quot;</span>, <span class="string">&quot;App&quot;</span>, index: <span class="number">0</span>, input: <span class="string">&quot;&lt;App&gt;hello regex&lt;/App&gt;&quot;</span>, groups: &#123;tag: <span class="string">&quot;App&quot;</span>&#125;]</span><br></pre></td></tr></table></figure></blockquote><p>在捕获组内部最前面加上?<key>，它就被命名了。使用\k<key>语法就可以引用已经命名的捕获组。</p><p>是不是很简单？</p><p>通常情况下，开发者只是想在正则中将某些字符当成一个整体看待。捕获组很棒，但是它做了额外的事情，肯定需要额外的内存占用和计算资源。于是正则又有了非捕获组的概念。</p><blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;@abc&#x27;</span>.match(<span class="regexp">/@(abc)/</span>);<span class="regexp">//</span> [<span class="string">&quot;@abc&quot;</span>, <span class="string">&quot;abc&quot;</span>, index: <span class="number">0</span>, input: <span class="string">&quot;@abc&quot;</span>, groups: undefined]<span class="string">&#x27;@abc&#x27;</span>.match(<span class="regexp">/@(?:abc)/</span>);<span class="regexp">//</span> [<span class="string">&quot;@abc&quot;</span>, index: <span class="number">0</span>, input: <span class="string">&quot;@abc&quot;</span>, groups: undefined]</span><br></pre></td></tr></table></figure></blockquote><p>只要在圆括号内最前面加上?:标识，就是告诉正则引擎：我只要这个整体，不需要它的引用，你就别费劲了。从上面的例子也可以看出来，match方法返回的结果有些许不一样。</p><p>个人观点：我觉得正则的捕获设计应该反过来，默认不捕获，加上?:标识后才捕获。因为大多数时候开发者是不需要捕获的，但是它又懒得加?:标识，会有些许性能浪费。</p><h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><p>有时候开发者需要在正则中使用或者。</p><blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;高圆圆&#x27;</span>.match(<span class="regexp">/陈乔恩|高圆圆/</span>);<span class="regexp">//</span> [<span class="string">&quot;高圆圆&quot;</span>, index: <span class="number">0</span>, input: <span class="string">&quot;高圆圆&quot;</span>, groups: undefined]</span><br></pre></td></tr></table></figure></blockquote><p>|就代表或者。字符组其实也是一个多选结构，但是它们俩有本质区别。字符组最终只能匹配一个字符，而分支匹配的是左边所有的字符或者右边所有的字符。</p><p>我们来看一个例子：</p><blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;我喜欢高圆圆&#x27;</span>.match(<span class="regexp">/我喜欢陈乔恩|高圆圆/</span>);<span class="regexp">//</span> [<span class="string">&quot;高圆圆&quot;</span>, index: <span class="number">3</span>, input: <span class="string">&quot;我喜欢高圆圆&quot;</span>, groups: undefined]</span><br></pre></td></tr></table></figure></blockquote><p>因为|是将左右两边一切两半，然后匹配左边或者右边。所以上面的正则显然达不到我们想要的效果。这个时候就需要一个东西来缩小分支的范围。诶，你可能已经想到了：</p><blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;我喜欢高圆圆&#x27;</span>.match(<span class="regexp">/我喜欢(?:陈乔恩|高圆圆)/</span>);<span class="regexp">//</span> [<span class="string">&quot;我喜欢高圆圆&quot;</span>, index: <span class="number">0</span>, input: <span class="string">&quot;我喜欢高圆圆&quot;</span>, groups: undefined]</span><br></pre></td></tr></table></figure></blockquote><p>没错，就是圆括号。</p><h3 id="零宽断言"><a href="#零宽断言" class="headerlink" title="零宽断言"></a>零宽断言</h3><p>正则中有一些元字符，它不匹配字符，而是匹配一个位置。比如之前提到的^和$。^的意思是说这个位置应该是文本开始的位置。</p><p>正则还有一些比较高级的匹配位置的语法，它匹配的是：在这个位置之前或之后应该有什么内容。</p><p>零宽(zero-width)是什么意思？指的就是它匹配一个位置，本身没有宽度。</p><p>断言(assertion)是什么意思？指的是一种判断，断言之前或之后应该有什么或应该没有什么。</p><p>零宽肯定先行断言</p><p>所谓的肯定就是判断有什么，而不是判断没有什么。</p><p>而先行指的是向前看(lookahead)，断言的这个位置是为前面的规则服务的。</p><p>语法很简单：圆括号内最左边加上?=标识。</p><blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;CoffeeScript JavaScript javascript&#x27;</span>.match(<span class="regexp">/\b\w&#123;4&#125;(?=Script\b)/</span>);<span class="regexp">//</span> [<span class="string">&quot;Java&quot;</span>, index: <span class="number">13</span>, input: <span class="string">&quot;CoffeeScript JavaScript javascript&quot;</span>, groups: undefined]</span><br></pre></td></tr></table></figure></blockquote><p>上面匹配的是四个字母，这四个字母要满足以下条件：紧跟着的应该是Script字符串，而且Script字符串应该是单词的结尾部分。</p><p>所以，零宽肯定先行断言的意思是：现在有一段正则语法，用这段语法去匹配给定的文本。但是，满足条件的文本不仅要匹配这段语法，紧跟着它的必须是一个位置，这个位置又必须满足一段正则语法。</p><p>说的再直白点，我要匹配一段文本，但是这段文本后面必须紧跟着另一段特定的文本。零宽肯定先行断言就是一个界碑，我要满足前面和后面所有的条件，但是我只要前面的文本。</p><p>我们来看另一种情况：</p><blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;CoffeeScript JavaScript javascript&#x27;</span>.match(<span class="regexp">/\b\w&#123;4&#125;(?=Script\b)\w+/</span>);<span class="regexp">//</span> [<span class="string">&quot;JavaScript&quot;</span>, index: <span class="number">13</span>, input: <span class="string">&quot;CoffeeScript JavaScript javascript&quot;</span>, groups: undefined]</span><br></pre></td></tr></table></figure></blockquote><p>上面的例子更加直观，零宽肯定先行断言已经匹配过Script一次了，后面的\w+却还是能匹配Script成功，足以说明它的零宽特性。它为紧贴在它前面的规则服务，并且不影响后面的匹配规则。</p><p>零宽肯定后行断言</p><p>先行是向前看，那后行就是向后看(lookbehind)咯。</p><p>语法是圆括号内最左边加上?&lt;=标识。</p><blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;演员高圆圆 将军霍去病 演员霍思燕&#x27;</span>.match(<span class="regexp">/(?&lt;=演员)霍\S+/</span>);<span class="regexp">//</span> [<span class="string">&quot;霍思燕&quot;</span>, index: <span class="number">14</span>, input: <span class="string">&quot;演员高圆圆 将军霍去病 演员霍思燕&quot;</span>, groups: undefined]</span><br></pre></td></tr></table></figure></blockquote><p>一个正则可以有多个断言：</p><blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;演员高圆圆 将军霍去病 演员霍思燕&#x27;</span>.match(<span class="regexp">/(?&lt;=演员)霍.+?(?=\s|$)/</span>);<span class="regexp">//</span> [<span class="string">&quot;霍思燕&quot;</span>, index: <span class="number">14</span>, input: <span class="string">&quot;演员高圆圆 将军霍去病 演员霍思燕&quot;</span>, groups: undefined]</span><br></pre></td></tr></table></figure></blockquote><p>零宽否定先行断言</p><p>肯定是判断有什么，否定就是判断没有什么咯。</p><p>语法是圆括号内最左边加上?!标识。</p><blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;TypeScript Perl JavaScript&#x27;</span>.match(<span class="regexp">/\b\w&#123;4&#125;(?!Script\b)/</span>);<span class="regexp">//</span> [<span class="string">&quot;Perl&quot;</span>, index: <span class="number">11</span>, input: <span class="string">&quot;TypeScript Perl JavaScript&quot;</span>, groups: undefined]</span><br></pre></td></tr></table></figure></blockquote><p>零宽否定后行断言</p><p>语法是圆括号最左边加上?&lt;!标识。</p><blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;演员高圆圆 将军霍去病 演员霍思燕&#x27;</span>.match(<span class="regexp">/(?&lt;!演员)霍\S+/</span>);<span class="regexp">//</span> [<span class="string">&quot;霍去病&quot;</span>, index: <span class="number">8</span>, input: <span class="string">&quot;演员高圆圆 将军霍去病 演员霍思燕&quot;</span>, groups: undefined]</span><br></pre></td></tr></table></figure></blockquote><h3 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h3><p>正则表达式除了主体语法，还有若干可选的模式修饰符。</p><p>写法就是将修饰符安插在正则主体的尾巴上。比如这样：/abc/gi。</p><p>g修饰符</p><p>g是global的缩写。默认情况下，正则从左向右匹配，只要匹配到了结果就会收工。g修饰符会开启全局匹配模式，找到所有匹配的结果。</p><blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;演员高圆圆 将军霍去病 演员霍思燕&#x27;</span>.match(<span class="regexp">/(?&lt;=演员)\S+/</span>);<span class="regexp">//</span> [<span class="string">&quot;高圆圆&quot;</span>, index: <span class="number">2</span>, input: <span class="string">&quot;演员高圆圆 将军霍去病 演员霍思燕&quot;</span>, groups: undefined]<span class="string">&#x27;演员高圆圆 将军霍去病 演员霍思燕&#x27;</span>.match(<span class="regexp">/(?&lt;=演员)\S+/g</span>);<span class="regexp">//</span> [<span class="string">&quot;高圆圆&quot;</span>, <span class="string">&quot;霍思燕&quot;</span>]</span><br></pre></td></tr></table></figure></blockquote><p>i修饰符</p><p>i是ignoreCase的缩写。默认情况下，/z/是无法匹配Z的，所以我们有时候不得不这样写：/[a-zA-Z]/。i修饰符可以全局忽略大小写。</p><p>很多时候我们不在乎文本是大写、小写还是大小写混写，这个修饰符还是很有用的。</p><blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;javascript is great&#x27;</span>.match(<span class="regexp">/JavaScript/</span>);<span class="regexp">//</span> null<span class="string">&#x27;javascript is great&#x27;</span>.match(<span class="regexp">/JavaScript/i</span>);<span class="regexp">//</span> [<span class="string">&quot;javascript&quot;</span>, index: <span class="number">0</span>, input: <span class="string">&quot;javascript is great&quot;</span>, groups: undefined]</span><br></pre></td></tr></table></figure></blockquote><p>m修饰符</p><p>m是multiline的缩写。这个修饰符有特定起作用的场景：它要和^和$搭配起来使用。默认情况下，^和$匹配的是文本的开始和结束，加上m修饰符，它们的含义就变成了行的开始和结束。</p><blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`abcxyz`.match(<span class="regexp">/xyz/</span>);<span class="regexp">//</span> [<span class="string">&quot;xyz&quot;</span>, index: <span class="number">5</span>, input: <span class="string">&quot;↵abc↵xyz↵&quot;</span>, groups: undefined]`abcxyz`.match(<span class="regexp">/^xyz$/</span>);<span class="regexp">//</span> null`abcxyz`.match(<span class="regexp">/^xyz$/m</span>);<span class="regexp">//</span> [<span class="string">&quot;xyz&quot;</span>, index: <span class="number">5</span>, input: <span class="string">&quot;↵abc↵xyz↵&quot;</span>, groups: undefined]</span><br></pre></td></tr></table></figure></blockquote><p>y修饰符</p><blockquote><p>这是ES2015的新特性。</p></blockquote><p>y是sticky的缩写。y修饰符有和g修饰符重合的功能，它们都是全局匹配。所以重点在sticky上，怎么理解这个粘连呢？</p><p>g修饰符不挑食，匹配完一个接着匹配下一个，对于文本的位置没有要求。但是y修饰符要求必须从文本的开始实施匹配，因为它会开启全局匹配，匹配到的文本的下一个字符就是下一次文本的开始。这就是所谓的粘连。</p><blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;a bag with a tag has a mag&#x27;</span>.match(<span class="regexp">/\wag/g</span>);<span class="regexp">//</span> [<span class="string">&quot;bag&quot;</span>, <span class="string">&quot;tag&quot;</span>, <span class="string">&quot;mag&quot;</span>]<span class="string">&#x27;a bag with a tag has a mag&#x27;</span>.match(<span class="regexp">/\wag/y</span>);<span class="regexp">//</span> null<span class="string">&#x27;bagtagmag&#x27;</span>.match(<span class="regexp">/\wag/y</span>);<span class="regexp">//</span> [<span class="string">&quot;bag&quot;</span>, index: <span class="number">0</span>, input: <span class="string">&quot;bagtagmag&quot;</span>, groups: undefined]<span class="string">&#x27;bagtagmag&#x27;</span>.match(<span class="regexp">/\wag/gy</span>);<span class="regexp">//</span> [<span class="string">&quot;bag&quot;</span>, <span class="string">&quot;tag&quot;</span>, <span class="string">&quot;mag&quot;</span>]</span><br></pre></td></tr></table></figure></blockquote><p>有人肯定发现了猫腻：你不是说y修饰符是全局匹配么？看上面的例子，单独一个y修饰符用match方法怎么并不是全局匹配呢？</p><p>诶，这里说来就话长了。</p><p>长话短说呢，就涉及到y修饰符的本质是什么。它的本质有二：</p><ul><li>全局匹配(先别着急打我)。</li><li>从文本的lastIndex位置开始新的匹配。lastIndex是什么？它是正则表达式的一个属性，如果是全局匹配，它用来标注下一次匹配的起始点。这才是粘连的本质所在。</li></ul><p>不知道你们发现什么了没有：<strong>lastIndex是正则表达式的一个属性</strong>。而上面例子中的match方法是作用在字符串上的，都没有lastIndex属性，休怪人家工作不上心。</p><blockquote><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const reg = /\wag/y;reg.exec(<span class="string">&#x27;bagtagmag&#x27;</span>);// [&quot;bag&quot;, <span class="keyword">index</span>: <span class="number">0</span>, <span class="keyword">input</span>: &quot;bagtagmag&quot;, <span class="keyword">groups</span>: undefined]reg.exec(<span class="string">&#x27;bagtagmag&#x27;</span>);// [&quot;tag&quot;, <span class="keyword">index</span>: <span class="number">3</span>, <span class="keyword">input</span>: &quot;bagtagmag&quot;, <span class="keyword">groups</span>: undefined]reg.exec(<span class="string">&#x27;bagtagmag&#x27;</span>);// [&quot;mag&quot;, <span class="keyword">index</span>: <span class="number">6</span>, <span class="keyword">input</span>: &quot;bagtagmag&quot;, <span class="keyword">groups</span>: undefined]</span><br></pre></td></tr></table></figure></blockquote><p>咱们换成正则方法exec，多次执行，正则的lastIndex在变，匹配的结果也在变。全局匹配无疑了吧。</p><p>s修饰符</p><blockquote><p>这是ES2018的新特性。</p></blockquote><p>s不是dotAll的缩写。s修饰符要和.搭配使用，默认情况下，.匹配除了换行符之外的任意单个字符，然而它还没有强大到无所不能的地步，所以正则索性给它开个挂。</p><p>s修饰符的作用就是让.可以匹配任意单个字符。</p><p>s是singleline的缩写。</p><blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`abcxyz`.match(<span class="regexp">/c.x/</span>);<span class="regexp">//</span> null`abcxyz`.match(<span class="regexp">/c.x/</span>s);<span class="regexp">//</span> [<span class="string">&quot;c↵x&quot;</span>, index: <span class="number">3</span>, input: <span class="string">&quot;↵abc↵xyz↵&quot;</span>, groups: undefined]</span><br></pre></td></tr></table></figure></blockquote><p>u修饰符</p><blockquote><p>这是ES2015的新特性。</p></blockquote><p>u是unicode的缩写。有一些Unicode字符超过一个字节，正则就无法正确的识别它们。u修饰符就是用来处理这些不常见的情况的。</p><blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;𠮷&#x27;</span>.match(<span class="regexp">/^.$/</span>);<span class="regexp">//</span> null<span class="string">&#x27;𠮷&#x27;</span>.match(<span class="regexp">/^.$/u</span>);<span class="regexp">//</span> [<span class="string">&quot;𠮷&quot;</span>, index: <span class="number">0</span>, input: <span class="string">&quot;𠮷&quot;</span>, groups: undefined]</span><br></pre></td></tr></table></figure></blockquote><p>𠮷念jí，与吉同义。</p><p>笔者对Unicode认识尚浅，这里不过多展开。</p><h2 id="不容易自己琢磨出来的正则表达式用法"><a href="#不容易自己琢磨出来的正则表达式用法" class="headerlink" title="不容易自己琢磨出来的正则表达式用法"></a>不容易自己琢磨出来的正则表达式用法</h2><blockquote><p>作者：打码日记</p><p>出处：<a href="https://mp.weixin.qq.com/s/XBzfXq9e-uPBHRLAKtxxlg">https://mp.weixin.qq.com/s/XBzfXq9e-uPBHRLAKtxxlg</a></p><p>仅做备份学习用，排版未整理，为了更好的阅读体验请查看原文</p></blockquote><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>现如今，正则表达式几乎是程序员的必备技能了，它入手确实很容易，但如果你不仔细琢磨学习，会长期停留在正则最基本的用法层面上。<br>因此，本篇文章，我会介绍一些能用正则解决的场景，但这些场景如果全自己琢磨实现的话，需要花一些时间才能完成，或者就完全想不出来，另外也会介绍一些正则表达式的性能问题。</p><p>匹配多个单词</p><p>比如我想匹配zhangsan、lisi、wangwu这三个人名，这是一个很常见的场景，其实在正则里面也算基本功，但鉴于本人初入门时还是在网上搜索得到的答案，还是值得提一下的！<br>实现如下：</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zhangsan|<span class="type">lisi</span>|<span class="type">wangwu</span></span><br></pre></td></tr></table></figure><p>其中<code>|</code>表示或的含义，就是匹配zhangsan或lisi或wangwu了。</p><p>匹配重复数字</p><p>匹配如1111、2222、3333这样的4位长度的重复数字，突一想，这不用<code>\d&#123;4&#125;</code>就解决了嚒，其实不然，因为<code>\d&#123;4&#125;</code>可以匹配1111，但也可以匹配1234啊。<br>写法如下：</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="symbol">\d</span>)<span class="symbol">\1</span>&#123;3&#125;</span><br></pre></td></tr></table></figure><p>\d匹配第一个数字，后面的\1匹配前面\d匹配的内容，重复3次，这样就可以匹配1111或2222这样的4位数字串了。</p><p>匹配各种空白</p><p>在使用正则时，常用<code>\s</code>来匹配空白，但遗憾的是，还是有一些Unicode的空白字符，<code>\s</code>无法匹配，这时可以尝试POSIX字符类<code>\p&#123;Space&#125;</code>，我在Java中验证通过，可以匹配ascii空白字符与Unicode空白字符，如果是其它语言的话，可能正则语法会稍有区别。</p><p>位置匹配</p><p>正则表达式中\G与环视是比较难理解的，因为这两个东西很多书上只是介绍了匹配的规则，没有说出实质，导致死记的规则过一段时间就忘，也不明白这两东西有啥用。<br>我们转换一下思维，其实在正则表达式中，匹配目标只有两个，一是匹配字符串中的字符，二是匹配字符串中的位置，如下图：<br><img src="http://blog.cdn.ionluo.cn/blog/640.png" alt="图片"></p><p>上边的hello，有5个字符可以匹配，另外还有6个位置可以匹配，而<code>^hello</code>中<code>^</code>就是代表匹配开头的位置，所以如果是<code>_hello</code>就无法被<code>^hello</code>匹配，因为<code>_</code>与<code>h</code>之间的位置并不是开头，不能与<code>^</code>匹配！</p><p><strong>常见位置匹配规则</strong></p><table><thead><tr><th align="left">规则</th><th align="left">匹配的位置</th></tr></thead><tbody><tr><td align="left">^  \A</td><td align="left">匹配开始位置</td></tr><tr><td align="left">$  \z  \Z</td><td align="left">匹配结束位置</td></tr><tr><td align="left">\b  \B</td><td align="left">匹配单词与非单词边界位置</td></tr><tr><td align="left">\G</td><td align="left">匹配当前匹配的开始位置</td></tr><tr><td align="left">(?=a) (?!a)</td><td align="left">正向环视，看看当前位置后面是否是a，或不是a</td></tr><tr><td align="left">(?&lt;=a) (?&lt;!a)</td><td align="left">逆向环视，看看当前位置前面是否是a，或不是a</td></tr></tbody></table><p><strong>^与\A</strong><br>^ 匹配文本开始位置，但在多行匹配模式下，^匹配每一行的开始位置。<br>\A 仅仅只能匹配开始位置，不管什么匹配模式下</p><p><img src="http://blog.cdn.ionluo.cn/blog/640-16688409523061.png" alt="图片"></p><p><strong>$与\Z</strong></p><p><code>$</code> 匹配文本末尾位置，但在多行匹配模式下，$匹配每一行的末尾位置。\Z 仅仅只能匹配末尾位置，不管什么匹配模式下</p><p><img src="http://blog.cdn.ionluo.cn/blog/640-16688409523062.png" alt="图片"></p><p><strong><em>\</em><br>\</strong>\b与\B**</p><p>\b匹配单词边界，在Java中，单词边界即是字母与非字母之间的位置，中文不认为是单词，另外文本开头与文本结尾也是单词边界</p><p>\B匹配非单词边界</p><p><img src="http://blog.cdn.ionluo.cn/blog/640-16688409523063.png" alt="图片"></p><p><strong>\G</strong><br>匹配上次匹配的结束位置或当前匹配的开始位置，第一次匹配时，匹配文本开始位置，如下：<br>从1234a5678中找单个数字，如果用\d去找，可以找到8个，但使用\G\d去找，却只能找到4个<br>查找过程：<br>第1次查找，\G匹配文本开始位置，1与\d匹配，找到第1个匹配，即1<br>第2次查找，\G匹配1后面2前面之间的位置，2与\d匹配，找到第2个匹配，即2<br>第3次查找，\G匹配2后面3前面之间的位置，3与\d匹配，找到第3个匹配，即3<br>第4次查找，\G匹配3后面4前面之间的位置，4与\d匹配，找到第4个匹配，即4<br>第5次查询，\G匹配4后面5前面之间的位置，但a与\d不匹配，匹配结束，总共找到4个匹配。</p><p><img src="http://blog.cdn.ionluo.cn/blog/640-16688409523064.png" alt="图片"></p><p><strong>环视</strong><br>(?=a) 与 (?!a)<br>正向肯定(否定)环视，用来检测当前位置后面字符是否是a，或不是a<br>(?&lt;=a) 与 (?&lt;!a)<br>逆向肯定(否定)环视，用来检查当前位置前面字符是否是a，或不是a<br>如下，查找被()包裹的单词，使用环视限定单词左边是<code>(</code>，右边是<code>)</code></p><p><img src="http://blog.cdn.ionluo.cn/blog/640-16688409523065.png" alt="图片"></p><p><strong>位置可被多次匹配</strong><br>文本中的一个位置，可以同时匹配多个规则，且与规则在正则表达式中的先后顺序无关，例如下面3个正则表达式是等价的：</p><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">^abc</span></span><br><span class="line">^^^^^<span class="symbol">^abc</span></span><br><span class="line">^(?=a)\b^^<span class="symbol">^abc</span></span><br></pre></td></tr></table></figure><p><img src="http://blog.cdn.ionluo.cn/blog/640-16688409523066.png" alt="图片"></p><p>下面举两个实际例子体会一下位置匹配！</p><p><strong>例1：密码强度校验</strong><br>前端校验密码强度时，经常有这样的要求，长度8到10位，且必须包含数字、字母、标点符号，可通过一个正则表达式校验出来，如下：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^<span class="comment">(?=.*[0-9])</span><span class="comment">(?=.*[a-zA-Z])</span><span class="comment">(?=.*\p&#123;P&#125;)</span>.&#123;<span class="number">8</span>,<span class="number">10</span>&#125;$</span><br></pre></td></tr></table></figure><p>其中，<code>(?=.*[0-9])</code>表示开头位置的后面一定要有数字，<code>(?=.*[a-zA-Z])</code>表示开头位置后面一定要有字母，<code>(?=.*\p&#123;P&#125;)</code>表示开头位置的后面一定要有标点符号，<code>.&#123;8,10&#125;</code>表示匹配8到10位字符，这几个正则合在一起，就实现了校验密码强度的要求。</p><p><img src="http://blog.cdn.ionluo.cn/blog/640-16688409523077.png" alt="图片"></p><p><strong>例2：千分位数字</strong><br>有时我们需要将<code>123456789</code>变成<code>123,456,789</code>这样的千分位数字，这个使用正则就可以实现，如下，将此正则匹配到的位置，替换为<code>,</code>：</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">?!</span>^)(<span class="name">?=</span>(\d&#123;<span class="number">3</span>&#125;)+$)</span><br></pre></td></tr></table></figure><p>其中，<code>(?=(\d&#123;3&#125;)+$)</code>表示匹配位置，这个位置后面必须要有一组或多组3个数字，满足这样条件的位置有3个，开头与1之间的位置，3和4之间的位置，6和7之间的位置，然后<code>(?!^)</code>又限制了同样的这些位置，不能是开头，就只能3和4，6和7之间的位置满足要求了，所以替换之后，就变成了<code>123,456,789</code>。</p><p><img src="http://blog.cdn.ionluo.cn/blog/640-16688409523078.png" alt="图片"></p><p>匹配带引号字符串</p><p>匹配诸如<code>&quot;hello,world&quot;</code>这样的带引号的字符串，很容易想到，用<code>&quot;[^&quot;]+&quot;</code>即可，但是如果引号字符串里面允许用<code>\</code>来转义<code>&quot;</code>呢，如<code>&quot;hello \&quot;bob\&quot;!&quot;</code>，如果用<code>&quot;[^&quot;]+&quot;</code>来匹配的话，就只会匹配到<code>&quot;hello \&quot;</code>了，显然不对，可以先自行想想如何用正则实现。<br>…<br>…<br>…<br>想不出来？我们可以换一个视角，包含带<code>\</code>开头转义字符的字符串，其实可以拆解为<code>&quot;</code>,<code>hello</code>,<code>\&quot;bob</code>,<code>\&quot;!</code>,<code>&quot;</code>，然后再泛化为正则形式，<code>&quot;</code>,<code>[^\\&quot;]*</code>,<code>\\.[^\\&quot;]*</code>,<code>\\.[^\\&quot;]*</code>,<code>&quot;</code>，组合在一起如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;[^<span class="subst">\\</span>&quot;</span>]<span class="operator">*</span>(<span class="operator">?</span>:\\.[<span class="operator">^</span>\\<span class="string">&quot;]*)*&quot;</span></span><br></pre></td></tr></table></figure><p>表达式中多了个<code>(?:)</code>，这表示非捕获分组，可以用来提高正则匹配性能，而由于字符串中有可能没有<code>\</code>开头的转义字符，故<code>(?:\\.[^\\&quot;]*)</code>后面是<code>*</code>，直接由<code>[^\\&quot;]*</code>匹配完引号内所有内容。</p><p>别搞炸了CPU</p><p>正则表达式如果写得很复杂，就需要谨慎评估了，因为有可能平时运行得好好的，但遇到一些特殊情况，会导致CPU直接100%，比如还是上面那个匹配带引号字符串的场景，有同学可能会给出这样的正则：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;([^\\&quot;</span>]+<span class="string">|\\.)*&quot;</span></span><br></pre></td></tr></table></figure><p>乍一看，这个正则很完美，<code>[^\\&quot;]+</code>匹配非转义字符的部分，<code>\\.</code>匹配<code>\&quot;</code>，<code>\n</code>之类的。这个正则在遇到满足条件的字符串时完全没有问题(如<code>&quot;hello \&quot;bob\&quot;!&quot;</code>)，而遇到不满足条件的字符串时，正则匹配复杂度会随着字符串长度呈指数式上升，导致CPU 100%，如<code>&quot;hello \&quot;bob\&quot;!!!!!!!!!!!!!!!!!!!!!</code>，其中<code>&quot;</code>没有闭合。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> void main(<span class="type">String</span>[] args) &#123;</span><br><span class="line">    long begin <span class="operator">=</span> <span class="type">System</span>.currentTimeMillis();</span><br><span class="line">    boolean isMatch <span class="operator">=</span> <span class="string">&quot;<span class="subst">\&quot;</span>hello <span class="subst">\\</span><span class="subst">\&quot;</span>bob<span class="subst">\\</span><span class="subst">\&quot;</span>!!!!!!!!!!!!!!!!!!&quot;</span>.matches(<span class="string">&quot;<span class="subst">\&quot;</span>([^<span class="subst">\\</span><span class="subst">\\</span><span class="subst">\&quot;</span>]+|<span class="subst">\\</span><span class="subst">\\</span>.)*<span class="subst">\&quot;</span>&quot;</span>);</span><br><span class="line">    <span class="type">System</span>.out.println(<span class="type">String</span>.format(<span class="string">&quot;%s ms, isMatch: %s&quot;</span>, <span class="type">System</span>.currentTimeMillis() <span class="operator">-</span> begin, isMatch));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段java代码，在我机器上跑完要2s的样子，但如果字符串中再加4个<code>!</code>，运行时间立马上升到17s，性能下降非常恐怖！</p><p><strong>原因</strong><br>如果知道一些正则匹配原理，应该知道正则在匹配时，如果匹配不上，会将已经匹配的字符吐出来，再看看是否能够匹配，这叫回溯，比如<code>&quot;.*&quot;</code>匹配<code>&quot;hello&quot;</code>，先正则中的<code>&quot;</code>匹配上了字符串中的<code>&quot;</code>，然后<code>.*</code>依次匹配了<code>h</code>,<code>e</code>,<code>l</code>,<code>l</code>,<code>o</code>,<code>&quot;</code>，最后正则中的<code>&quot;</code>匹配字符串结尾位置，匹配不上，这时正则引擎会让前面的<code>.*</code>吐出它匹配的<code>&quot;</code>，然后吐出来的这个<code>&quot;</code>，刚好可以和正则中的<code>&quot;</code>匹配，这样就匹配成功了。</p><p>那如果是<code>&quot;hello</code>这样没有闭合的字符串，<code>.*</code>会一直吐字符，一直到它没有字符可吐，发现还是匹配不上，这样整个匹配才认定为匹配失败。</p><p>是的，正则中包含匹配量词<code>?</code>,<code>*</code>,<code>+</code>时，你就可以想像为它们一直在吃字符，当后面的规则匹配不上时，会强迫它又吐出来，而如果是懒惰匹配量词<code>??</code>,<code>*?</code>,<code>+?</code>，你就可以想像它先不吃，当后面的规则匹配不上时，会强迫它去吃。</p><p>我们再来分析下<code>&quot;([^\\&quot;]+|\\.)*&quot;</code>匹配<code>&quot;!!!!!!!!!!!!!!!!!!!!!!!!!!!</code>为啥会如此低效！<br>注：为了分析方便，我简化了待匹配字符串，但效果是一样的</p><ol><li>首先<code>[^\\&quot;]+</code>吃掉了<code>!!!!!!!!!!!!!!!!!!!!!!!!!!!</code>。</li><li>然后发现正则中<code>&quot;</code>与字符串结尾位置不匹配，开始回溯。</li><li>然后<code>[^\\&quot;]+</code>吐出一个<code>!</code>，注意这里，由于外层还有一个<code>*</code>贪婪量词，吐出来的<code>!</code>又被<code>[^\\&quot;]+|\\.</code>中的<code>[^\\&quot;]+</code>吃掉了，它吃掉后，到了字符串结尾，发现结尾又与正则中的<code>&quot;</code>不匹配，又要求<code>[^\\&quot;]+|\\.</code>中的<code>[^\\&quot;]+</code>吐出刚吃掉的<code>!</code>，结果吐出后又不匹配。</li><li>然后又逼着最前面的那个<code>[^\\&quot;]+</code>吐出倒数第二个<code>!</code>，注意，再次吐出<code>!</code>后，当前匹配位置后面有两个<code>!</code>，可恶的是，这两个<code>!</code>又被后面<code>[^\\&quot;]+|\\.</code>中的<code>[^\\&quot;]+</code>吃掉了，然后悲剧重演，它又要吐出来，如此循环往复，计算量指数级上升。</li></ol><p><strong>解决办法</strong><br>其实可以看出来，造成这个问题是因为正则表达式中有两个量词，内层有一个<code>+</code>，外层有一个<code>*</code>，不信的话，你可以尝试用<code>^(a+)*$</code>去匹配<code>aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa0</code>，同样的会非常慢。<br>而要解决这个问题，有两个办法。</p><ol><li>让<code>[^\\&quot;]+</code>吐出来的字符，无法被外层正则中另一个贪婪的自己吃掉，比如前面介绍的<code>&quot;[^\\&quot;]*(?:\\.[^\\&quot;]*)*&quot;</code>，<code>[^\\&quot;]*</code>吐出来的字符，是无法被<code>\\.[^\\&quot;]*</code>吃掉的，因为吐出来的一定不是<code>\</code>，而<code>\\.[^\\&quot;]*</code>要先吃一个<code>\</code>。</li><li>明知道自己吐出来的字符后，后面的规则也无法匹配，那就让量词吃掉字符后不吐，比如将正则修改为<code>&quot;([^\\&quot;]++|\\.)*&quot;</code>这样，<code>+</code>变成了<code>++</code>，像这种量词后面再加<code>+</code>号的，比如<code>?+</code>,<code>*+</code>,<code>++</code>，这表示占有量词，吃完字符后就不会吐了。</li></ol><p>注：占有量词不要乱用，有时吐出来字符可以让整个正则匹配，而你强制让它不吐出来，反而让它匹配不了了，如<code>^.+b$</code>可以匹配ab，但如果你用<code>^.++b$</code>就无法匹配ab了，因为<code>.</code>吃掉了<code>ab</code>，吐出一个b刚好可以使后面的<code>b</code>匹配。而<code>^[^b]++b$</code>这种用法就是对的，因为<code>^b</code>吐出来的字符肯定不能和后面的<code>b</code>匹配，就没必要再吐了。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>正则表达式很强大，用好它事半功倍，但也需要了解它的执行过程，避免指数级回溯陷阱。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一次性搞懂JavaScript正则表达式之语法&quot;&gt;&lt;a href=&quot;#一次性搞懂JavaScript正则表达式之语法&quot; class=&quot;headerlink&quot; title=&quot;一次性搞懂JavaScript正则表达式之语法&quot;&gt;&lt;/a&gt;一次性搞懂JavaScript正则</summary>
      
    
    
    
    
    <category term="好文收藏" scheme="http://www.ionluo.cn/blog/tags/%E5%A5%BD%E6%96%87%E6%94%B6%E8%97%8F/"/>
    
  </entry>
  
  <entry>
    <title>【eslint】eslint的使用</title>
    <link href="http://www.ionluo.cn/blog/posts/fcdef12b.html"/>
    <id>http://www.ionluo.cn/blog/posts/fcdef12b.html</id>
    <published>2022-11-07T02:15:32.000Z</published>
    <updated>2023-01-19T06:23:47.990Z</updated>
    
    <content type="html"><![CDATA[<h2 id="eslint-规则中文注释"><a href="#eslint-规则中文注释" class="headerlink" title="eslint 规则中文注释"></a><a href="https://www.cnblogs.com/clm1010/p/8312893.html">eslint 规则中文注释</a></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;no-alert&quot;</span>: <span class="number">0</span>,<span class="comment">//禁止使用alert confirm prompt</span></span><br><span class="line"><span class="string">&quot;no-array-constructor&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止使用数组构造器</span></span><br><span class="line"><span class="string">&quot;no-bitwise&quot;</span>: <span class="number">0</span>,<span class="comment">//禁止使用按位运算符</span></span><br><span class="line"><span class="string">&quot;no-caller&quot;</span>: <span class="number">1</span>,<span class="comment">//禁止使用arguments.caller或arguments.callee</span></span><br><span class="line"><span class="string">&quot;no-catch-shadow&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止catch子句参数与外部作用域变量同名</span></span><br><span class="line"><span class="string">&quot;no-class-assign&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止给类赋值</span></span><br><span class="line"><span class="string">&quot;no-cond-assign&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止在条件表达式中使用赋值语句</span></span><br><span class="line"><span class="string">&quot;no-console&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止使用console</span></span><br><span class="line"><span class="string">&quot;no-const-assign&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止修改const声明的变量</span></span><br><span class="line"><span class="string">&quot;no-constant-condition&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止在条件中使用常量表达式 if(true) if(1)</span></span><br><span class="line"><span class="string">&quot;no-continue&quot;</span>: <span class="number">0</span>,<span class="comment">//禁止使用continue</span></span><br><span class="line"><span class="string">&quot;no-control-regex&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止在正则表达式中使用控制字符</span></span><br><span class="line"><span class="string">&quot;no-debugger&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止使用debugger</span></span><br><span class="line"><span class="string">&quot;no-delete-var&quot;</span>: <span class="number">2</span>,<span class="comment">//不能对var声明的变量使用delete操作符</span></span><br><span class="line"><span class="string">&quot;no-div-regex&quot;</span>: <span class="number">1</span>,<span class="comment">//不能使用看起来像除法的正则表达式/=foo/</span></span><br><span class="line"><span class="string">&quot;no-dupe-keys&quot;</span>: <span class="number">2</span>,<span class="comment">//在创建对象字面量时不允许键重复 &#123;a:1,a:1&#125;</span></span><br><span class="line"><span class="string">&quot;no-dupe-args&quot;</span>: <span class="number">2</span>,<span class="comment">//函数参数不能重复</span></span><br><span class="line"><span class="string">&quot;no-duplicate-case&quot;</span>: <span class="number">2</span>,<span class="comment">//switch中的case标签不能重复</span></span><br><span class="line"><span class="string">&quot;no-else-return&quot;</span>: <span class="number">2</span>,<span class="comment">//如果if语句里面有return,后面不能跟else语句</span></span><br><span class="line"><span class="string">&quot;no-empty&quot;</span>: <span class="number">2</span>,<span class="comment">//块语句中的内容不能为空</span></span><br><span class="line"><span class="string">&quot;no-empty-character-class&quot;</span>: <span class="number">2</span>,<span class="comment">//正则表达式中的[]内容不能为空</span></span><br><span class="line"><span class="string">&quot;no-empty-label&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止使用空label</span></span><br><span class="line"><span class="string">&quot;no-eq-null&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止对null使用==或!=运算符</span></span><br><span class="line"><span class="string">&quot;no-eval&quot;</span>: <span class="number">1</span>,<span class="comment">//禁止使用eval</span></span><br><span class="line"><span class="string">&quot;no-ex-assign&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止给catch语句中的异常参数赋值</span></span><br><span class="line"><span class="string">&quot;no-extend-native&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止扩展native对象</span></span><br><span class="line"><span class="string">&quot;no-extra-bind&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止不必要的函数绑定</span></span><br><span class="line"><span class="string">&quot;no-extra-boolean-cast&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止不必要的bool转换</span></span><br><span class="line"><span class="string">&quot;no-extra-parens&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止非必要的括号</span></span><br><span class="line"><span class="string">&quot;no-extra-semi&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止多余的冒号</span></span><br><span class="line"><span class="string">&quot;no-fallthrough&quot;</span>: <span class="number">1</span>,<span class="comment">//禁止switch穿透</span></span><br><span class="line"><span class="string">&quot;no-floating-decimal&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止省略浮点数中的0 .5 3.</span></span><br><span class="line"><span class="string">&quot;no-func-assign&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止重复的函数声明</span></span><br><span class="line"><span class="string">&quot;no-implicit-coercion&quot;</span>: <span class="number">1</span>,<span class="comment">//禁止隐式转换</span></span><br><span class="line"><span class="string">&quot;no-implied-eval&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止使用隐式eval</span></span><br><span class="line"><span class="string">&quot;no-inline-comments&quot;</span>: <span class="number">0</span>,<span class="comment">//禁止行内备注</span></span><br><span class="line"><span class="string">&quot;no-inner-declarations&quot;</span>: [<span class="number">2</span>, <span class="string">&quot;functions&quot;</span>],<span class="comment">//禁止在块语句中使用声明（变量或函数）</span></span><br><span class="line"><span class="string">&quot;no-invalid-regexp&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止无效的正则表达式</span></span><br><span class="line"><span class="string">&quot;no-invalid-this&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止无效的this，只能用在构造器，类，对象字面量</span></span><br><span class="line"><span class="string">&quot;no-irregular-whitespace&quot;</span>: <span class="number">2</span>,<span class="comment">//不能有不规则的空格</span></span><br><span class="line"><span class="string">&quot;no-iterator&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止使用__iterator__ 属性</span></span><br><span class="line"><span class="string">&quot;no-label-var&quot;</span>: <span class="number">2</span>,<span class="comment">//label名不能与var声明的变量名相同</span></span><br><span class="line"><span class="string">&quot;no-labels&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止标签声明</span></span><br><span class="line"><span class="string">&quot;no-lone-blocks&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止不必要的嵌套块</span></span><br><span class="line"><span class="string">&quot;no-lonely-if&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止else语句内只有if语句</span></span><br><span class="line"><span class="string">&quot;no-loop-func&quot;</span>: <span class="number">1</span>,<span class="comment">//禁止在循环中使用函数（如果没有引用外部变量不形成闭包就可以）</span></span><br><span class="line"><span class="string">&quot;no-mixed-requires&quot;</span>: [<span class="number">0</span>, <span class="literal">false</span>],<span class="comment">//声明时不能混用声明类型</span></span><br><span class="line"><span class="string">&quot;no-mixed-spaces-and-tabs&quot;</span>: [<span class="number">2</span>, <span class="literal">false</span>],<span class="comment">//禁止混用tab和空格</span></span><br><span class="line"><span class="string">&quot;linebreak-style&quot;</span>: [<span class="number">0</span>, <span class="string">&quot;windows&quot;</span>],<span class="comment">//换行风格</span></span><br><span class="line"><span class="string">&quot;no-multi-spaces&quot;</span>: <span class="number">1</span>,<span class="comment">//不能用多余的空格</span></span><br><span class="line"><span class="string">&quot;no-multi-str&quot;</span>: <span class="number">2</span>,<span class="comment">//字符串不能用\换行</span></span><br><span class="line"><span class="string">&quot;no-multiple-empty-lines&quot;</span>: [<span class="number">1</span>, &#123;<span class="string">&quot;max&quot;</span>: <span class="number">2</span>&#125;],<span class="comment">//空行最多不能超过2行</span></span><br><span class="line"><span class="string">&quot;no-native-reassign&quot;</span>: <span class="number">2</span>,<span class="comment">//不能重写native对象</span></span><br><span class="line"><span class="string">&quot;no-negated-in-lhs&quot;</span>: <span class="number">2</span>,<span class="comment">//in 操作符的左边不能有!</span></span><br><span class="line"><span class="string">&quot;no-nested-ternary&quot;</span>: <span class="number">0</span>,<span class="comment">//禁止使用嵌套的三目运算</span></span><br><span class="line"><span class="string">&quot;no-new&quot;</span>: <span class="number">1</span>,<span class="comment">//禁止在使用new构造一个实例后不赋值</span></span><br><span class="line"><span class="string">&quot;no-new-func&quot;</span>: <span class="number">1</span>,<span class="comment">//禁止使用new Function</span></span><br><span class="line"><span class="string">&quot;no-new-object&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止使用new Object()</span></span><br><span class="line"><span class="string">&quot;no-new-require&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止使用new require</span></span><br><span class="line"><span class="string">&quot;no-new-wrappers&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止使用new创建包装实例，new String new Boolean new Number</span></span><br><span class="line"><span class="string">&quot;no-obj-calls&quot;</span>: <span class="number">2</span>,<span class="comment">//不能调用内置的全局对象，比如Math() JSON()</span></span><br><span class="line"><span class="string">&quot;no-octal&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止使用八进制数字</span></span><br><span class="line"><span class="string">&quot;no-octal-escape&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止使用八进制转义序列</span></span><br><span class="line"><span class="string">&quot;no-param-reassign&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止给参数重新赋值</span></span><br><span class="line"><span class="string">&quot;no-path-concat&quot;</span>: <span class="number">0</span>,<span class="comment">//node中不能使用__dirname或__filename做路径拼接</span></span><br><span class="line"><span class="string">&quot;no-plusplus&quot;</span>: <span class="number">0</span>,<span class="comment">//禁止使用++，--</span></span><br><span class="line"><span class="string">&quot;no-process-env&quot;</span>: <span class="number">0</span>,<span class="comment">//禁止使用process.env</span></span><br><span class="line"><span class="string">&quot;no-process-exit&quot;</span>: <span class="number">0</span>,<span class="comment">//禁止使用process.exit()</span></span><br><span class="line"><span class="string">&quot;no-proto&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止使用__proto__属性</span></span><br><span class="line"><span class="string">&quot;no-redeclare&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止重复声明变量</span></span><br><span class="line"><span class="string">&quot;no-regex-spaces&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止在正则表达式字面量中使用多个空格 /foo bar/</span></span><br><span class="line"><span class="string">&quot;no-restricted-modules&quot;</span>: <span class="number">0</span>,<span class="comment">//如果禁用了指定模块，使用就会报错</span></span><br><span class="line"><span class="string">&quot;no-return-assign&quot;</span>: <span class="number">1</span>,<span class="comment">//return 语句中不能有赋值表达式</span></span><br><span class="line"><span class="string">&quot;no-script-url&quot;</span>: <span class="number">0</span>,<span class="comment">//禁止使用javascript:void(0)</span></span><br><span class="line"><span class="string">&quot;no-self-compare&quot;</span>: <span class="number">2</span>,<span class="comment">//不能比较自身</span></span><br><span class="line"><span class="string">&quot;no-sequences&quot;</span>: <span class="number">0</span>,<span class="comment">//禁止使用逗号运算符</span></span><br><span class="line"><span class="string">&quot;no-shadow&quot;</span>: <span class="number">2</span>,<span class="comment">//外部作用域中的变量不能与它所包含的作用域中的变量或参数同名</span></span><br><span class="line"><span class="string">&quot;no-shadow-restricted-names&quot;</span>: <span class="number">2</span>,<span class="comment">//严格模式中规定的限制标识符不能作为声明时的变量名使用</span></span><br><span class="line"><span class="string">&quot;no-spaced-func&quot;</span>: <span class="number">2</span>,<span class="comment">//函数调用时 函数名与()之间不能有空格</span></span><br><span class="line"><span class="string">&quot;no-sparse-arrays&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止稀疏数组， [1,,2]</span></span><br><span class="line"><span class="string">&quot;no-sync&quot;</span>: <span class="number">0</span>,<span class="comment">//nodejs 禁止同步方法</span></span><br><span class="line"><span class="string">&quot;no-ternary&quot;</span>: <span class="number">0</span>,<span class="comment">//禁止使用三目运算符</span></span><br><span class="line"><span class="string">&quot;no-trailing-spaces&quot;</span>: <span class="number">1</span>,<span class="comment">//一行结束后面不要有空格</span></span><br><span class="line"><span class="string">&quot;no-this-before-super&quot;</span>: <span class="number">0</span>,<span class="comment">//在调用super()之前不能使用this或super</span></span><br><span class="line"><span class="string">&quot;no-throw-literal&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止抛出字面量错误 throw &quot;error&quot;;</span></span><br><span class="line"><span class="string">&quot;no-undef&quot;</span>: <span class="number">1</span>,<span class="comment">//不能有未定义的变量</span></span><br><span class="line"><span class="string">&quot;no-undef-init&quot;</span>: <span class="number">2</span>,<span class="comment">//变量初始化时不能直接给它赋值为undefined</span></span><br><span class="line"><span class="string">&quot;no-undefined&quot;</span>: <span class="number">2</span>,<span class="comment">//不能使用undefined</span></span><br><span class="line"><span class="string">&quot;no-unexpected-multiline&quot;</span>: <span class="number">2</span>,<span class="comment">//避免多行表达式</span></span><br><span class="line"><span class="string">&quot;no-underscore-dangle&quot;</span>: <span class="number">1</span>,<span class="comment">//标识符不能以_开头或结尾</span></span><br><span class="line"><span class="string">&quot;no-unneeded-ternary&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止不必要的嵌套 var isYes = answer === 1 ? true : false;</span></span><br><span class="line"><span class="string">&quot;no-unreachable&quot;</span>: <span class="number">2</span>,<span class="comment">//不能有无法执行的代码</span></span><br><span class="line"><span class="string">&quot;no-unused-expressions&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止无用的表达式</span></span><br><span class="line"><span class="string">&quot;no-unused-vars&quot;</span>: [<span class="number">2</span>, &#123;<span class="string">&quot;vars&quot;</span>: <span class="string">&quot;all&quot;</span>, <span class="string">&quot;args&quot;</span>: <span class="string">&quot;after-used&quot;</span>&#125;],<span class="comment">//不能有声明后未被使用的变量或参数</span></span><br><span class="line"><span class="string">&quot;no-use-before-define&quot;</span>: <span class="number">2</span>,<span class="comment">//未定义前不能使用</span></span><br><span class="line"><span class="string">&quot;no-useless-call&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止不必要的call和apply</span></span><br><span class="line"><span class="string">&quot;no-void&quot;</span>: <span class="number">2</span>,<span class="comment">//禁用void操作符</span></span><br><span class="line"><span class="string">&quot;no-var&quot;</span>: <span class="number">0</span>,<span class="comment">//禁用var，用let和const代替</span></span><br><span class="line"><span class="string">&quot;no-warning-comments&quot;</span>: [<span class="number">1</span>, &#123; <span class="string">&quot;terms&quot;</span>: [<span class="string">&quot;todo&quot;</span>, <span class="string">&quot;fixme&quot;</span>, <span class="string">&quot;xxx&quot;</span>], <span class="string">&quot;location&quot;</span>: <span class="string">&quot;start&quot;</span> &#125;],<span class="comment">//不能有警告备注</span></span><br><span class="line"><span class="string">&quot;no-with&quot;</span>: <span class="number">2</span>,<span class="comment">//禁用with</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;array-bracket-spacing&quot;</span>: [<span class="number">2</span>, <span class="string">&quot;never&quot;</span>],<span class="comment">//是否允许非空数组里面有多余的空格</span></span><br><span class="line"><span class="string">&quot;arrow-parens&quot;</span>: <span class="number">0</span>,<span class="comment">//箭头函数用小括号括起来</span></span><br><span class="line"><span class="string">&quot;arrow-spacing&quot;</span>: <span class="number">0</span>,<span class="comment">//=&gt;的前/后括号</span></span><br><span class="line"><span class="string">&quot;accessor-pairs&quot;</span>: <span class="number">0</span>,<span class="comment">//在对象中使用getter/setter</span></span><br><span class="line"><span class="string">&quot;block-scoped-var&quot;</span>: <span class="number">0</span>,<span class="comment">//块语句中使用var</span></span><br><span class="line"><span class="string">&quot;brace-style&quot;</span>: [<span class="number">1</span>, <span class="string">&quot;1tbs&quot;</span>],<span class="comment">//大括号风格</span></span><br><span class="line"><span class="string">&quot;callback-return&quot;</span>: <span class="number">1</span>,<span class="comment">//避免多次调用回调什么的</span></span><br><span class="line"><span class="string">&quot;camelcase&quot;</span>: <span class="number">2</span>,<span class="comment">//强制驼峰法命名</span></span><br><span class="line"><span class="string">&quot;comma-dangle&quot;</span>: [<span class="number">2</span>, <span class="string">&quot;never&quot;</span>],<span class="comment">//对象字面量项尾不能有逗号</span></span><br><span class="line"><span class="string">&quot;comma-spacing&quot;</span>: <span class="number">0</span>,<span class="comment">//逗号前后的空格</span></span><br><span class="line"><span class="string">&quot;comma-style&quot;</span>: [<span class="number">2</span>, <span class="string">&quot;last&quot;</span>],<span class="comment">//逗号风格，换行时在行首还是行尾</span></span><br><span class="line"><span class="string">&quot;complexity&quot;</span>: [<span class="number">0</span>, <span class="number">11</span>],<span class="comment">//循环复杂度</span></span><br><span class="line"><span class="string">&quot;computed-property-spacing&quot;</span>: [<span class="number">0</span>, <span class="string">&quot;never&quot;</span>],<span class="comment">//是否允许计算后的键名什么的</span></span><br><span class="line"><span class="string">&quot;consistent-return&quot;</span>: <span class="number">0</span>,<span class="comment">//return 后面是否允许省略</span></span><br><span class="line"><span class="string">&quot;consistent-this&quot;</span>: [<span class="number">2</span>, <span class="string">&quot;that&quot;</span>],<span class="comment">//this别名</span></span><br><span class="line"><span class="string">&quot;constructor-super&quot;</span>: <span class="number">0</span>,<span class="comment">//非派生类不能调用super，派生类必须调用super</span></span><br><span class="line"><span class="string">&quot;curly&quot;</span>: [<span class="number">2</span>, <span class="string">&quot;all&quot;</span>],<span class="comment">//必须使用 if()&#123;&#125; 中的&#123;&#125;</span></span><br><span class="line"><span class="string">&quot;default-case&quot;</span>: <span class="number">2</span>,<span class="comment">//switch语句最后必须有default</span></span><br><span class="line"><span class="string">&quot;dot-location&quot;</span>: <span class="number">0</span>,<span class="comment">//对象访问符的位置，换行的时候在行首还是行尾</span></span><br><span class="line"><span class="string">&quot;dot-notation&quot;</span>: [<span class="number">0</span>, &#123; <span class="string">&quot;allowKeywords&quot;</span>: <span class="literal">true</span> &#125;],<span class="comment">//避免不必要的方括号</span></span><br><span class="line"><span class="string">&quot;eol-last&quot;</span>: <span class="number">0</span>,<span class="comment">//文件以单一的换行符结束</span></span><br><span class="line"><span class="string">&quot;eqeqeq&quot;</span>: <span class="number">2</span>,<span class="comment">//必须使用全等</span></span><br><span class="line"><span class="string">&quot;func-names&quot;</span>: <span class="number">0</span>,<span class="comment">//函数表达式必须有名字</span></span><br><span class="line"><span class="string">&quot;func-style&quot;</span>: [<span class="number">0</span>, <span class="string">&quot;declaration&quot;</span>],<span class="comment">//函数风格，规定只能使用函数声明/函数表达式</span></span><br><span class="line"><span class="string">&quot;generator-star-spacing&quot;</span>: <span class="number">0</span>,<span class="comment">//生成器函数*的前后空格</span></span><br><span class="line"><span class="string">&quot;guard-for-in&quot;</span>: <span class="number">0</span>,<span class="comment">//for in循环要用if语句过滤</span></span><br><span class="line"><span class="string">&quot;handle-callback-err&quot;</span>: <span class="number">0</span>,<span class="comment">//nodejs 处理错误</span></span><br><span class="line"><span class="string">&quot;id-length&quot;</span>: <span class="number">0</span>,<span class="comment">//变量名长度</span></span><br><span class="line"><span class="string">&quot;indent&quot;</span>: [<span class="number">2</span>, <span class="number">4</span>],<span class="comment">//缩进风格</span></span><br><span class="line"><span class="string">&quot;init-declarations&quot;</span>: <span class="number">0</span>,<span class="comment">//声明时必须赋初值</span></span><br><span class="line"><span class="string">&quot;key-spacing&quot;</span>: [<span class="number">0</span>, &#123; <span class="string">&quot;beforeColon&quot;</span>: <span class="literal">false</span>, <span class="string">&quot;afterColon&quot;</span>: <span class="literal">true</span> &#125;],<span class="comment">//对象字面量中冒号的前后空格</span></span><br><span class="line"><span class="string">&quot;lines-around-comment&quot;</span>: <span class="number">0</span>,<span class="comment">//行前/行后备注</span></span><br><span class="line"><span class="string">&quot;max-depth&quot;</span>: [<span class="number">0</span>, <span class="number">4</span>],<span class="comment">//嵌套块深度</span></span><br><span class="line"><span class="string">&quot;max-len&quot;</span>: [<span class="number">0</span>, <span class="number">80</span>, <span class="number">4</span>],<span class="comment">//字符串最大长度</span></span><br><span class="line"><span class="string">&quot;max-nested-callbacks&quot;</span>: [<span class="number">0</span>, <span class="number">2</span>],<span class="comment">//回调嵌套深度</span></span><br><span class="line"><span class="string">&quot;max-params&quot;</span>: [<span class="number">0</span>, <span class="number">3</span>],<span class="comment">//函数最多只能有3个参数</span></span><br><span class="line"><span class="string">&quot;max-statements&quot;</span>: [<span class="number">0</span>, <span class="number">10</span>],<span class="comment">//函数内最多有几个声明</span></span><br><span class="line"><span class="string">&quot;new-cap&quot;</span>: <span class="number">2</span>,<span class="comment">//函数名首行大写必须使用new方式调用，首行小写必须用不带new方式调用</span></span><br><span class="line"><span class="string">&quot;new-parens&quot;</span>: <span class="number">2</span>,<span class="comment">//new时必须加小括号</span></span><br><span class="line"><span class="string">&quot;newline-after-var&quot;</span>: <span class="number">2</span>,<span class="comment">//变量声明后是否需要空一行</span></span><br><span class="line"><span class="string">&quot;object-curly-spacing&quot;</span>: [<span class="number">0</span>, <span class="string">&quot;never&quot;</span>],<span class="comment">//大括号内是否允许不必要的空格</span></span><br><span class="line"><span class="string">&quot;object-shorthand&quot;</span>: <span class="number">0</span>,<span class="comment">//强制对象字面量缩写语法</span></span><br><span class="line"><span class="string">&quot;one-var&quot;</span>: <span class="number">1</span>,<span class="comment">//连续声明</span></span><br><span class="line"><span class="string">&quot;operator-assignment&quot;</span>: [<span class="number">0</span>, <span class="string">&quot;always&quot;</span>],<span class="comment">//赋值运算符 += -=什么的</span></span><br><span class="line"><span class="string">&quot;operator-linebreak&quot;</span>: [<span class="number">2</span>, <span class="string">&quot;after&quot;</span>],<span class="comment">//换行时运算符在行尾还是行首</span></span><br><span class="line"><span class="string">&quot;padded-blocks&quot;</span>: <span class="number">0</span>,<span class="comment">//块语句内行首行尾是否要空行</span></span><br><span class="line"><span class="string">&quot;prefer-const&quot;</span>: <span class="number">0</span>,<span class="comment">//首选const</span></span><br><span class="line"><span class="string">&quot;prefer-spread&quot;</span>: <span class="number">0</span>,<span class="comment">//首选展开运算</span></span><br><span class="line"><span class="string">&quot;prefer-reflect&quot;</span>: <span class="number">0</span>,<span class="comment">//首选Reflect的方法</span></span><br><span class="line"><span class="string">&quot;quotes&quot;</span>: [<span class="number">1</span>, <span class="string">&quot;single&quot;</span>],<span class="comment">//引号类型 `` &quot;&quot; &#x27;&#x27;</span></span><br><span class="line"><span class="string">&quot;quote-props&quot;</span>:[<span class="number">2</span>, <span class="string">&quot;always&quot;</span>],<span class="comment">//对象字面量中的属性名是否强制双引号</span></span><br><span class="line"><span class="string">&quot;radix&quot;</span>: <span class="number">2</span>,<span class="comment">//parseInt必须指定第二个参数</span></span><br><span class="line"><span class="string">&quot;id-match&quot;</span>: <span class="number">0</span>,<span class="comment">//命名检测</span></span><br><span class="line"><span class="string">&quot;require-yield&quot;</span>: <span class="number">0</span>,<span class="comment">//生成器函数必须有yield</span></span><br><span class="line"><span class="string">&quot;semi&quot;</span>: [<span class="number">2</span>, <span class="string">&quot;always&quot;</span>],<span class="comment">//语句强制分号结尾</span></span><br><span class="line"><span class="string">&quot;semi-spacing&quot;</span>: [<span class="number">0</span>, &#123;<span class="string">&quot;before&quot;</span>: <span class="literal">false</span>, <span class="string">&quot;after&quot;</span>: <span class="literal">true</span>&#125;],<span class="comment">//分号前后空格</span></span><br><span class="line"><span class="string">&quot;sort-vars&quot;</span>: <span class="number">0</span>,<span class="comment">//变量声明时排序</span></span><br><span class="line"><span class="string">&quot;space-after-keywords&quot;</span>: [<span class="number">0</span>, <span class="string">&quot;always&quot;</span>],<span class="comment">//关键字后面是否要空一格</span></span><br><span class="line"><span class="string">&quot;space-before-blocks&quot;</span>: [<span class="number">0</span>, <span class="string">&quot;always&quot;</span>],<span class="comment">//不以新行开始的块&#123;前面要不要有空格</span></span><br><span class="line"><span class="string">&quot;space-before-function-paren&quot;</span>: [<span class="number">0</span>, <span class="string">&quot;always&quot;</span>],<span class="comment">//函数定义时括号前面要不要有空格</span></span><br><span class="line"><span class="string">&quot;space-in-parens&quot;</span>: [<span class="number">0</span>, <span class="string">&quot;never&quot;</span>],<span class="comment">//小括号里面要不要有空格</span></span><br><span class="line"><span class="string">&quot;space-infix-ops&quot;</span>: <span class="number">0</span>,<span class="comment">//中缀操作符周围要不要有空格</span></span><br><span class="line"><span class="string">&quot;space-return-throw-case&quot;</span>: <span class="number">2</span>,<span class="comment">//return throw case后面要不要加空格</span></span><br><span class="line"><span class="string">&quot;space-unary-ops&quot;</span>: [<span class="number">0</span>, &#123; <span class="string">&quot;words&quot;</span>: <span class="literal">true</span>, <span class="string">&quot;nonwords&quot;</span>: <span class="literal">false</span> &#125;],<span class="comment">//一元运算符的前/后要不要加空格</span></span><br><span class="line"><span class="string">&quot;spaced-comment&quot;</span>: <span class="number">0</span>,<span class="comment">//注释风格要不要有空格什么的</span></span><br><span class="line"><span class="string">&quot;strict&quot;</span>: <span class="number">2</span>,<span class="comment">//使用严格模式</span></span><br><span class="line"><span class="string">&quot;use-isnan&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止比较时使用NaN，只能用isNaN()</span></span><br><span class="line"><span class="string">&quot;valid-jsdoc&quot;</span>: <span class="number">0</span>,<span class="comment">//jsdoc规则</span></span><br><span class="line"><span class="string">&quot;valid-typeof&quot;</span>: <span class="number">2</span>,<span class="comment">//必须使用合法的typeof的值</span></span><br><span class="line"><span class="string">&quot;vars-on-top&quot;</span>: <span class="number">2</span>,<span class="comment">//var必须放在作用域顶部</span></span><br><span class="line"><span class="string">&quot;wrap-iife&quot;</span>: [<span class="number">2</span>, <span class="string">&quot;inside&quot;</span>],<span class="comment">//立即执行函数表达式的小括号风格</span></span><br><span class="line"><span class="string">&quot;wrap-regex&quot;</span>: <span class="number">0</span>,<span class="comment">//正则表达式字面量用小括号包起来</span></span><br><span class="line"><span class="string">&quot;yoda&quot;</span>: [<span class="number">2</span>, <span class="string">&quot;never&quot;</span>]<span class="comment">//禁止尤达条件</span></span><br></pre></td></tr></table></figure><h2 id="ESLint-语法检查忽略配置"><a href="#ESLint-语法检查忽略配置" class="headerlink" title="ESLint 语法检查忽略配置"></a>ESLint 语法检查忽略配置</h2><ol><li>整个文件范围内禁止规则出现警告 (将<code>/* eslint-disable */</code>放置于文件最顶部)</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* eslint-disable */</span></span><br><span class="line">alert(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line"><span class="number">1234</span></span><br></pre></td></tr></table></figure><ol start="2"><li>在文件中临时禁止规则出现警告</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* eslint-disable */</span></span><br><span class="line">alert(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line"><span class="comment">/* eslint-enable */</span></span><br></pre></td></tr></table></figure><ol start="3"><li>对指定规则的启用或者禁用警告</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* eslint-disable no-alert, no-console */</span></span><br><span class="line">alert(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;bar&#x27;</span>);</span><br><span class="line"><span class="comment">/* eslint-enable no-alert, no-console */</span></span><br></pre></td></tr></table></figure><ol start="4"><li>对指定行禁用规则警告</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">有两种形式</span><br><span class="line"></span><br><span class="line">【<span class="number">1</span>】形式<span class="number">1</span></span><br><span class="line">alert(<span class="string">&#x27;foo&#x27;</span>); <span class="comment">// eslint-disable-line</span></span><br><span class="line"></span><br><span class="line">【<span class="number">2</span>】形式<span class="number">2</span></span><br><span class="line"><span class="comment">// eslint-disable-next-line</span></span><br><span class="line">alert(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line"><span class="number">12345678</span></span><br></pre></td></tr></table></figure><ol start="5"><li>在指定行上禁用指定的某个规则</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="string">&#x27;foo&#x27;</span>); <span class="comment">// eslint-disable-line no-alert</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// eslint-disable-next-line no-alert</span></span><br><span class="line">alert(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line"><span class="number">1234</span></span><br></pre></td></tr></table></figure><ol start="6"><li>在某个特定的行上禁用多个规则</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="string">&#x27;foo&#x27;</span>); <span class="comment">// eslint-disable-line no-alert, quotes, semi</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// eslint-disable-next-line no-alert, quotes, semi</span></span><br><span class="line">alert(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line"><span class="number">1234</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;eslint-规则中文注释&quot;&gt;&lt;a href=&quot;#eslint-规则中文注释&quot; class=&quot;headerlink&quot; title=&quot;eslint 规则中文注释&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.cnblogs.com/clm1010/p/8312</summary>
      
    
    
    
    
    <category term="eslint" scheme="http://www.ionluo.cn/blog/tags/eslint/"/>
    
    <category term="前端" scheme="http://www.ionluo.cn/blog/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>【好文收藏】运用transform导致文本模糊的现象探究</title>
    <link href="http://www.ionluo.cn/blog/posts/42f26a92.html"/>
    <id>http://www.ionluo.cn/blog/posts/42f26a92.html</id>
    <published>2022-11-02T01:36:22.000Z</published>
    <updated>2023-01-19T06:23:48.010Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>转自：<a href="https://www.cnblogs.com/coco1s/p/15917870.html">https://www.cnblogs.com/coco1s/p/15917870.html</a></p></blockquote><p>在我们的页面中，经常会出现这样的问题，一块区域内的文本或者边框，在展示的时候，变得特别的模糊，如下(数据经过脱敏处理)：</p><p><img src="http://blog.cdn.ionluo.cn/blog/4b65d7b8651041268f0373d24d90d3cdtplv-k3u1fbpfcp-zoom-1.png" alt="img"></p><p>正常而言，应该是这样的：</p><p><img src="http://blog.cdn.ionluo.cn/blog/892bd3d729fd4c3f965a5cd787e784a2tplv-k3u1fbpfcp-zoom-1.png" alt="img"></p><p>emmm，可能大图不是很明显，我们取一细节对比，就非常直观了：</p><p><img src="http://blog.cdn.ionluo.cn/blog/01da86a2cbf3421396ab09e34fd4e505tplv-k3u1fbpfcp-zoom-1.png" alt="img"></p><h2 id="何时触发这种现象？"><a href="#何时触发这种现象？" class="headerlink" title="何时触发这种现象？"></a>何时触发这种现象？</h2><p>那么？什么时候会触发这种问题呢？在 Google 上，其实我们能搜到非常多类似的案例，总结而言：</p><ol><li><strong>当文本元素的某个祖先容器存在 <code>transform: translate()</code> 或者 <code>transform: scale()</code> 等 <code>transform</code> 操作时，容易出现这种问题</strong></li></ol><p>当然，这只是必要条件，不是充分条件。继续深入探究，会发现，必须还得同时满足一些其它条件：</p><ol start="2"><li><strong>元素作用了 <code>transform: translate()</code> 或者 <code>transform: scale()</code> 后的计算值产生了非整数</strong></li></ol><p>譬如，上述案例触发的 CSS 代码如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1104px</span>; </span><br><span class="line">    <span class="attribute">height</span>: <span class="number">475px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">50%</span>);</span><br><span class="line">    // ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于元素的高度为 <code>475px</code>，<code>translateY(-50%)</code> 等于 <code>237.5px</code>，非整数，才导致了内部的字体模糊。</p><p>但是，需要注意的是，并非所有产生的非整数都会导致了内部的字体模糊。</p><p>这里有个简单的示意：</p><p><img src="http://blog.cdn.ionluo.cn/blog/150341331-3c591701-a95b-4cb4-8c3c-131a073a2c11.gif" alt="img"></p><p>还是上述的例子，当高度从 <code>477px</code> 一直调整到 <code>469px</code> 的过程中，只有 <code>477px</code> 和 <code>475px</code> 导致了模糊，而 <code>473, 471, 469</code> 则没有。所以，这也只是引发模糊的一个必要条件。</p><ol start="3"><li><strong>文本内容是否模糊还与屏幕有关，高清屏（dpr &gt; 2）下不容易触发，更多发生在普通屏幕下（dpr = 1）</strong></li></ol><p>在我实测的过程中还发现，这个现象基本只会发生在 dpr 为 1 的普通屏幕下。</p><p>类似于 MAC 的高清屏幕则不太会触发这个问题。</p><blockquote><p>dpr = 物理像素 / 设备独立像素，表示设备像素比。这个与我们通常说的视网膜屏（多倍屏，Retina屏）有关。设备像素比描述的是未缩放状态下，物理像素和设备独立像素的初始比例关系。</p></blockquote><ol start="4"><li><strong>并非所有浏览器都是这个表现，基本发生在 chromium 内核。</strong></li></ol><h2 id="为何发生这种现象呢？"><a href="#为何发生这种现象呢？" class="headerlink" title="为何发生这种现象呢？"></a>为何发生这种现象呢？</h2><p>那么，为何会发生这种现象？针对这个问题，没有找到特别官方的回答，普遍的认为是因为：</p><p><strong>由于浏览器将图层拆分到 GPU 以进行 3D 转换，而非整数的像素偏移，使得 Chrome 在字体渲染的时候，不是那么的精确</strong>。</p><p>关于这个问题，感兴趣的可以再看看这两个讨论：</p><ul><li><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=521364">Chromium Bugs – Issue 521364: Transformed text at fractional offsets is very blurry.</a></li><li><a href="https://github.com/kenwheeler/slick/issues/2275">Serious bug: Slick Slider turns off subpixel font rendering on the entire site in Chrome #2275</a></li></ul><h2 id="如何解决？"><a href="#如何解决？" class="headerlink" title="如何解决？"></a>如何解决？</h2><p>那么针对这个问题，我们该如何解决呢？社区里给出的一种方案：</p><ol><li>给元素设置 <code>-webkit-font-smoothing: antialiased</code></li></ol><p><code>font-smooth</code> CSS 属性用来控制字体渲染时的平滑效果，该特性是非标准的，我们应该尽量不要在生产环境中使用它。并且在我的实测中，这个方法不太奏效。</p><ol><li>保证运用了 <code>transform: translate()</code> 或者 <code>transform: scale()</code> 的元素的高宽为偶数</li></ol><p>如果你赋予给元素的 <code>transform</code> 的值非常明确，譬如我上文例子中的利用其来对元素进行水平垂直居中 – <code>transform: translate(-50%, -50%)</code>，让元素的高宽为偶数这个方法是可行的，但如果当你无法确定<code>transform</code> 的值，譬如 <code>transform: translateX(-31.24%)</code> 或者是 transform: scale(1.05)`，那这个方法依旧无法奏效。</p><ol><li>弃用 <code>transform</code></li></ol><p>如果这个问题对你的页面非常致命，那么只能弃用 <code>transform</code>，寻找替代方案。大部分的时候，我们还是可以找到不使用 <code>transform</code> 的替代方案的。</p><p>总结一下，本文简单探究了在 Chromium 内核下，使用了 <code>transform</code> 导致内部文本模糊的现象，并且给出了一些可尝试的解决方案，实际遇到，需要多加调试，尝试最优的解决方案。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>好了，本文到此结束，希望本文对你有所帮助 😃</p><p>更多精彩 CSS 技术文章汇总在我的 <a href="https://github.com/chokcoco/iCSS">Github – iCSS</a> ，持续更新，欢迎点个 star 订阅收藏。</p><p>如果还有什么疑问或者建议，可以多多交流，原创文章，文笔有限，才疏学浅，文中若有不正之处，万望告知。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;转自：&lt;a href=&quot;https://www.cnblogs.com/coco1s/p/15917870.html&quot;&gt;https://www.cnblogs.com/coco1s/p/15917870.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockqu</summary>
      
    
    
    
    
    <category term="转载" scheme="http://www.ionluo.cn/blog/tags/%E8%BD%AC%E8%BD%BD/"/>
    
    <category term="前端" scheme="http://www.ionluo.cn/blog/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>【草稿】yarn的使用记录</title>
    <link href="http://www.ionluo.cn/blog/posts/26356f33.html"/>
    <id>http://www.ionluo.cn/blog/posts/26356f33.html</id>
    <published>2022-08-16T01:30:42.000Z</published>
    <updated>2022-08-29T01:14:16.620Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://wjhsh.net/hellomrr-p-13237653.html">http://wjhsh.net/hellomrr-p-13237653.html</a></p><p><a href="https://blog.csdn.net/qq_64970126/article/details/125818888">https://blog.csdn.net/qq_64970126/article/details/125818888</a></p><p><a href="https://blog.csdn.net/finghting321/article/details/105563346/">https://blog.csdn.net/finghting321/article/details/105563346/</a></p><p><a href="https://wenwen.soso.com/z/q908193856.htm">https://wenwen.soso.com/z/q908193856.htm</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://wjhsh.net/hellomrr-p-13237653.html&quot;&gt;http://wjhsh.net/hellomrr-p-13237653.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/q</summary>
      
    
    
    
    
    <category term="前端" scheme="http://www.ionluo.cn/blog/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="草稿" scheme="http://www.ionluo.cn/blog/tags/%E8%8D%89%E7%A8%BF/"/>
    
  </entry>
  
  <entry>
    <title>【草稿】文档转换</title>
    <link href="http://www.ionluo.cn/blog/posts/5b641ec.html"/>
    <id>http://www.ionluo.cn/blog/posts/5b641ec.html</id>
    <published>2022-08-09T10:04:06.000Z</published>
    <updated>2022-08-29T01:14:16.622Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用Python转换PDF，Word-Excel-PPT-md-HTML都能转！"><a href="#使用Python转换PDF，Word-Excel-PPT-md-HTML都能转！" class="headerlink" title="使用Python转换PDF，Word/Excel/PPT/md/HTML都能转！"></a><strong>使用Python转换PDF，Word/Excel/PPT/md/HTML都能转！</strong></h2><p><a href="https://blog.51cto.com/u_13002900/5226580">https://blog.51cto.com/u_13002900/5226580</a></p><h2 id="【解锁】Pandoc——Pandoc安装、使用、快速上手"><a href="#【解锁】Pandoc——Pandoc安装、使用、快速上手" class="headerlink" title="【解锁】Pandoc——Pandoc安装、使用、快速上手"></a>【解锁】Pandoc——Pandoc安装、使用、快速上手</h2><p><a href="https://blog.csdn.net/xk_xx/article/details/104179256/">https://blog.csdn.net/xk_xx/article/details/104179256/</a></p><p><a href="https://www.pandoc.org/">https://www.pandoc.org/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;使用Python转换PDF，Word-Excel-PPT-md-HTML都能转！&quot;&gt;&lt;a href=&quot;#使用Python转换PDF，Word-Excel-PPT-md-HTML都能转！&quot; class=&quot;headerlink&quot; title=&quot;使用Python转换PD</summary>
      
    
    
    
    
    <category term="hide" scheme="http://www.ionluo.cn/blog/tags/hide/"/>
    
  </entry>
  
  <entry>
    <title>【前端】ionic使用记录</title>
    <link href="http://www.ionluo.cn/blog/posts/58a5b361.html"/>
    <id>http://www.ionluo.cn/blog/posts/58a5b361.html</id>
    <published>2022-08-02T09:03:46.000Z</published>
    <updated>2023-05-30T05:46:17.574Z</updated>
    
    <content type="html"><![CDATA[<h2 id="学习记录"><a href="#学习记录" class="headerlink" title="学习记录"></a>学习记录</h2><p>教程：<a href="https://blog.cdn.ionluo.cn/pdf/Ionic%E5%AE%9E%E6%88%98%EF%BC%9A%E5%9F%BA%E4%BA%8EAngularJS%E7%9A%84%E7%A7%BB%E5%8A%A8%E6%B7%B7%E5%90%88%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91[%E6%92%A9%E6%92%A9%E5%89%8D%E7%AB%AF].pdf">Ionic实战：基于AngularJS的移动混合应用开发</a></p><p>仓库地址：<a href="https://github.com/ionic-in-action">https://github.com/ionic-in-action</a></p><p>论坛：<a href="https://www.manning.com/books/ionic-in-action">https://www.manning.com/books/ionic-in-action</a></p><p>ionic图标：<a href="https://github.com/ionic-team/ionicons/tree/v1.1">https://github.com/ionic-team/ionicons/tree/v1.1</a></p><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装node版本管理</span></span><br><span class="line">npm install -g nvm</span><br><span class="line"><span class="comment"># 安装指定版本node</span></span><br><span class="line">nvm install 0.12.0</span><br><span class="line"><span class="comment"># 切换到指定版本node</span></span><br><span class="line">nvm use 0.12.0</span><br><span class="line"><span class="comment"># npm查看源</span></span><br><span class="line">npm get registry</span><br><span class="line"><span class="comment"># 切换npm成淘宝源</span></span><br><span class="line">npm config <span class="built_in">set</span> registry http://registry.npm.taobao.org</span><br><span class="line"><span class="comment"># 安装Ionic CLI和Cordova</span></span><br><span class="line">npm install -g cordova@4.2.0 ionic@1.3.22</span><br><span class="line"><span class="comment"># 查看版本</span></span><br><span class="line">cordoova -v</span><br><span class="line">ionic -v</span><br></pre></td></tr></table></figure><blockquote><p>问题1： nvm install报错<code>Could not retrieve https://nodejs.org/dist/latest/SHASUMS256.txt</code></p><p>解决办法：<code>where nvm</code> 找到nvm的安装路径，在同级目录下找到或者新建settings.txt，修改源为淘宝源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node_mirror: npm.taobao.org/mirrors/node/</span><br><span class="line">npm_mirror: npm.taobao.org/mirrors/npm/</span><br></pre></td></tr></table></figure><p>问题2：ionic无法安装成功</p><p>由于<a href="https://www.npmjs.com/package/ionic?activeTab=versions">ionic</a>已被废弃，可能淘宝源不记录废弃的包，这里我实在没有啥解决方法，只能科学上网了。</p></blockquote><h3 id="常用组件"><a href="#常用组件" class="headerlink" title="常用组件"></a>常用组件</h3><h4 id="日期选择组件"><a href="#日期选择组件" class="headerlink" title="日期选择组件"></a>日期选择组件</h4><p>日期选择组件：<a href="https://github.com/katemihalikova/ion-datetime-picker">https://github.com/katemihalikova/ion-datetime-picker</a></p><p>模仿minit-ui做的日期选择组件：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.popup-container</span>&#123;</span><br><span class="line">  &amp;<span class="selector-class">.datetime-picker-popup</span> &#123;</span><br><span class="line">    <span class="attribute">align-items</span>: flex-end;</span><br><span class="line">  </span><br><span class="line">    <span class="selector-class">.popup</span> &#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">      <span class="attribute">border-radius</span>: <span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line">      <span class="selector-class">.popup-head</span>, <span class="selector-class">.popup-buttons</span> &#123;</span><br><span class="line">        <span class="attribute">display</span>: none;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="selector-class">.popup-body</span> &#123;</span><br><span class="line">        <span class="attribute">text-align</span>: left;</span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="selector-class">.picker-toolbar</span> &#123;</span><br><span class="line">          <span class="attribute">border-bottom</span>: solid <span class="number">1px</span> <span class="number">#eaeaea</span>;</span><br><span class="line">          <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line"></span><br><span class="line">          <span class="selector-class">.mint-datetime-cancel</span> &#123;</span><br><span class="line">            <span class="attribute">float</span>: left;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="selector-class">.mint-datetime-confirm</span> &#123;</span><br><span class="line">            <span class="attribute">float</span>: right;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="selector-class">.mint-datetime-action</span> &#123;</span><br><span class="line">            <span class="attribute">display</span>: inline-block;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">            <span class="attribute">text-align</span>: center;</span><br><span class="line">            <span class="attribute">line-height</span>: <span class="number">40px</span>;</span><br><span class="line">            <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">            <span class="attribute">color</span>: var(--main-color, <span class="variable">$main-color</span>);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-class">.picker-items</span> &#123;</span><br><span class="line">          <span class="attribute">display</span>: flex;</span><br><span class="line">          <span class="attribute">justify-content</span>: center;</span><br><span class="line">          <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">          <span class="attribute">text-align</span>: right;</span><br><span class="line">          <span class="attribute">font-size</span>: <span class="number">24px</span>;</span><br><span class="line">          <span class="attribute">position</span>: relative;</span><br><span class="line"></span><br><span class="line">          <span class="selector-class">.picker-slot</span> &#123;</span><br><span class="line">              <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">              <span class="attribute">height</span>: <span class="number">252px</span>;</span><br><span class="line">              <span class="attribute">overflow</span>: hidden;</span><br><span class="line">              <span class="attribute">position</span>: relative;</span><br><span class="line">              <span class="attribute">max-height</span>: <span class="number">100%</span>;</span><br><span class="line">              <span class="attribute">flex</span>: <span class="number">1</span> <span class="number">1</span> <span class="number">0%</span>;</span><br><span class="line"></span><br><span class="line">              &amp;<span class="selector-class">.picker-slot-center</span> &#123;</span><br><span class="line">                <span class="attribute">text-align</span>: center;</span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line">              <span class="selector-class">.picker-slot-wrapper</span> &#123;</span><br><span class="line">                  <span class="attribute">transform</span>: translate(<span class="number">0</span>,<span class="number">0</span>) translateZ(<span class="number">0</span>);</span><br><span class="line">                  <span class="attribute">transition-duration</span>: <span class="number">0.3s</span>;</span><br><span class="line">                  <span class="attribute">transition-timing-function</span>: ease-out;</span><br><span class="line">                  <span class="attribute">backface-visibility</span>: hidden;</span><br><span class="line"></span><br><span class="line">                  <span class="selector-class">.picker-item</span> &#123;</span><br><span class="line">                      <span class="attribute">height</span>: <span class="number">36px</span>;</span><br><span class="line">                      <span class="attribute">line-height</span>: <span class="number">36px</span>;</span><br><span class="line">                      <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">                      <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">                      <span class="attribute">position</span>: relative;</span><br><span class="line">                      <span class="attribute">overflow</span>: hidden;</span><br><span class="line">                      <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">                      <span class="attribute">color</span>: <span class="number">#707274</span>;</span><br><span class="line">                      <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">                      <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">                      <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">                      <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">                      <span class="attribute">transition-duration</span>: .<span class="number">3s</span>;</span><br><span class="line">                      <span class="attribute">backface-visibility</span>: hidden;</span><br><span class="line"></span><br><span class="line">                      &amp;<span class="selector-class">.picker-selected</span> &#123;</span><br><span class="line">                        <span class="comment">// color: #000;</span></span><br><span class="line">                        <span class="attribute">color</span>: red;</span><br><span class="line">                        <span class="attribute">transform</span>: translate3d(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>) rotateX(<span class="number">0</span>);</span><br><span class="line">                      &#125;</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="selector-class">.picker-center-highlight</span> &#123;</span><br><span class="line">              <span class="attribute">height</span>: <span class="number">36px</span>; </span><br><span class="line">              <span class="attribute">margin-top</span>: -<span class="number">18px</span>;</span><br><span class="line">              <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">              <span class="attribute">position</span>: absolute;</span><br><span class="line">              <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">              <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">              <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">              <span class="attribute">margin-top</span>: -<span class="number">18px</span>;</span><br><span class="line">              <span class="attribute">pointer-events</span>: none;</span><br><span class="line">              <span class="attribute">height</span>: <span class="number">36px</span>;</span><br><span class="line"></span><br><span class="line">              &amp;<span class="selector-pseudo">:before</span>, &amp;<span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">                  <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">                  <span class="attribute">position</span>: absolute;</span><br><span class="line">                  <span class="attribute">height</span>: <span class="number">1px</span>;</span><br><span class="line">                  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">                  <span class="attribute">background-color</span>: <span class="number">#eaeaea</span>;</span><br><span class="line">                  <span class="attribute">display</span>: block;</span><br><span class="line">                  <span class="attribute">z-index</span>: <span class="number">15</span>;</span><br><span class="line">                  <span class="attribute">transform</span>: scaleY(<span class="number">0.5</span>);</span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line">              &amp;<span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">                  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">                  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">                  <span class="attribute">bottom</span>: auto;</span><br><span class="line">                  <span class="attribute">right</span>: auto;</span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line">              &amp;<span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">                  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">                  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">                  <span class="attribute">right</span>: auto;</span><br><span class="line">                  <span class="attribute">top</span>: auto;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;<span class="attr">iScroll</span>: IScroll&#125; = <span class="built_in">require</span>(<span class="string">&#x27;iscroll&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> angular = <span class="built_in">require</span>(<span class="string">&#x27;angular&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 求时间段交集(time1, time2)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getTimeIntersection</span>(<span class="params">[start1 = -<span class="literal">Infinity</span>, end1 = <span class="literal">Infinity</span>], [start2 = -<span class="literal">Infinity</span>, end2 = <span class="literal">Infinity</span>]</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (start1 &gt; end1) [start1, end1] = [end1, start1]</span><br><span class="line">  <span class="keyword">if</span> (start2 &gt; end2) [start2, end2] = [end2, start2]</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 无交集(time2在time1的左右)</span></span><br><span class="line">  <span class="keyword">if</span> (end1 &lt; start2 || start1 &gt; end2) <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 完全相交(time2在time1内部或time1在time2内部)</span></span><br><span class="line">  <span class="keyword">if</span> (start1 &lt;= start2 &amp;&amp; end1 &gt;= end2) <span class="keyword">return</span> [start2, end2]</span><br><span class="line">  <span class="keyword">if</span> (start2 &lt;= start1 &amp;&amp; end2 &gt;= end1) <span class="keyword">return</span> [start1, end1]</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 部分相交(time2仅开始或者结束点在time1内)</span></span><br><span class="line">  <span class="keyword">if</span> (start2 &lt;= end1 &amp;&amp; start2 &gt;= start1) <span class="keyword">return</span> [start2, end1]</span><br><span class="line">  <span class="keyword">if</span> (end2 &lt;= end1 &amp;&amp; end2 &gt;= start1) <span class="keyword">return</span> [start1, end2]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 日期转数组</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">splitDate</span>(<span class="params">date</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [</span><br><span class="line">    date.getFullYear(), date.getMonth(), date.getDate(),</span><br><span class="line">    date.getHours(), date.getMinutes(), date.getSeconds()</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addYears</span>(<span class="params">date, num</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [year, month, day, hour, minute, second] = [</span><br><span class="line">    date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds()</span><br><span class="line">  ]</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>(year + num, month, day, hour, minute, second)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = [<span class="string">&#x27;$q&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$q</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> afterDomLoad = <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> selector !== <span class="string">&#x27;string&#x27;</span> || !selector) <span class="keyword">return</span> $q.reject(<span class="string">&#x27;selector cannot is invalid&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> defer = $q.defer()</span><br><span class="line">    <span class="keyword">const</span> interval = <span class="built_in">setInterval</span>(<span class="function"><span class="params">_</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> elList = <span class="built_in">document</span>.querySelectorAll(selector)</span><br><span class="line">      <span class="keyword">if</span> (elList) &#123;</span><br><span class="line">        <span class="built_in">clearInterval</span>(interval)</span><br><span class="line">        defer.resolve(elList)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="number">500</span>)</span><br><span class="line">    <span class="keyword">return</span> defer.promise</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> template = <span class="string">`</span></span><br><span class="line"><span class="string">  &lt;div class=&quot;picker-toolbar&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;span class=&quot;mint-datetime-action mint-datetime-cancel&quot; ng-click=&quot;cancel()&quot;&gt;取消&lt;/span&gt;</span></span><br><span class="line"><span class="string">    &lt;span class=&quot;mint-datetime-action mint-datetime-confirm&quot; ng-click=&quot;confirm()&quot;&gt;确定&lt;/span&gt;</span></span><br><span class="line"><span class="string">  &lt;/div&gt;</span></span><br><span class="line"><span class="string">  &lt;div class=&quot;picker-items&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;div class=&quot;picker-slot picker-slot-center&quot; ng-show=&quot;view.isShow&quot; </span></span><br><span class="line"><span class="string">        ng-repeat=&quot;view in viewData track by $index&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;div class=&quot;picker-slot-wrapper&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;div class=&quot;picker-item&quot; ng-class=&quot;&#123;&#x27;picker-selected&#x27;: view.selectedIndex + 3 === $index&#125;&quot; </span></span><br><span class="line"><span class="string">            ng-repeat=&quot;item in view.data track by $index&quot;&gt;&#123;&#123; item &#125;&#125;&lt;/div&gt;</span></span><br><span class="line"><span class="string">      &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div class=&quot;picker-center-highlight&quot;&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    restrict: <span class="string">&#x27;AE&#x27;</span>,</span><br><span class="line">    <span class="built_in">require</span>: <span class="string">&#x27;ngModel&#x27;</span>,</span><br><span class="line">    scope: &#123;</span><br><span class="line">      modelDate: <span class="string">&#x27;=ngModel&#x27;</span>,</span><br><span class="line">      dateRange: <span class="string">&#x27;=?&#x27;</span> <span class="comment">// [start, end]</span></span><br><span class="line">    &#125;,</span><br><span class="line">    controller: [<span class="string">&#x27;$scope&#x27;</span>, <span class="string">&#x27;$ionicPopup&#x27;</span>, <span class="string">&#x27;$timeout&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope, $ionicPopup, $timeout</span>) </span>&#123;</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * &#123;data: [], selectedIndex: &#x27;&#x27;, iscroll: null, el: null, isShow: false&#125;</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">      $scope.viewData = [&#123;&#125;, &#123;&#125;, &#123;&#125;, &#123;&#125;, &#123;&#125;, &#123;&#125;]</span><br><span class="line">      $scope.itemHeight = <span class="number">36</span></span><br><span class="line">      $scope.year = $scope.month = $scope.day = $scope.hour = $scope.minute = $scope.second = <span class="literal">undefined</span></span><br><span class="line">      <span class="keyword">let</span> dateTimePicker = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">generateViewData</span>(<span class="params">date</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> dateRange = $scope.dateRange</span><br><span class="line">        <span class="keyword">const</span> dateArray = angular.isArray(date) ? date : splitDate(date)</span><br><span class="line">        <span class="keyword">const</span> [year, month, day, hour, minute, second] = dateArray</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> preDateArray = [$scope.year, $scope.month, $scope.day, $scope.hour, $scope.minute, $scope.second]</span><br><span class="line">        <span class="comment">// if (JSON.stringify(preDateArray) === JSON.stringify(dateArray)) return</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">updateYears</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">const</span> len = dateRange[<span class="number">1</span>].getFullYear() - dateRange[<span class="number">0</span>].getFullYear() + <span class="number">1</span></span><br><span class="line">          <span class="keyword">const</span> years = [...new <span class="built_in">Array</span>(len).keys()].map(<span class="function"><span class="params">item</span> =&gt;</span> <span class="built_in">String</span>(dateRange[<span class="number">0</span>].getFullYear() + item).padStart(<span class="number">4</span>, <span class="string">&#x27;0&#x27;</span>))</span><br><span class="line"></span><br><span class="line">          <span class="comment">// if (!years.length) debugger</span></span><br><span class="line">          $scope.viewData[<span class="number">0</span>].data = [<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>].concat(years).concat([<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>])</span><br><span class="line">          $scope.viewData[<span class="number">0</span>].selectedIndex = years.findIndex(<span class="function"><span class="params">item</span> =&gt;</span> (item === <span class="built_in">String</span>(year).padStart(<span class="number">4</span>, <span class="string">&#x27;0&#x27;</span>)))</span><br><span class="line">          $scope.viewData[<span class="number">0</span>].selectedIndex = !~$scope.viewData[<span class="number">0</span>].selectedIndex ? <span class="number">0</span> : $scope.viewData[<span class="number">0</span>].selectedIndex</span><br><span class="line">          $scope.viewData[<span class="number">0</span>].isShow = $scope.dateEnabled</span><br><span class="line">          $scope.viewData[<span class="number">0</span>].iscroll &amp;&amp; <span class="built_in">setTimeout</span>(<span class="function"><span class="params">_</span> =&gt;</span> &#123;</span><br><span class="line">            $scope.viewData[<span class="number">1</span>].iscroll.refresh()</span><br><span class="line">            $scope.viewData[<span class="number">1</span>].iscroll.scrollToPage(<span class="number">0</span>, $scope.viewData[<span class="number">1</span>].selectedIndex)</span><br><span class="line">          &#125;, <span class="number">300</span>)</span><br><span class="line">          $scope.year = <span class="built_in">parseInt</span>(years[$scope.viewData[<span class="number">0</span>].selectedIndex])</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">updateMonths</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">let</span> months = [...new <span class="built_in">Array</span>(<span class="number">12</span>).keys()].map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> curTime = <span class="keyword">new</span> <span class="built_in">Date</span>($scope.year, item, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">const</span> startTimeArr = splitDate(dateRange[<span class="number">0</span>]).slice(<span class="number">0</span>, <span class="number">2</span>).concat(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">const</span> endTimeArr = splitDate(dateRange[<span class="number">1</span>]).slice(<span class="number">0</span>, <span class="number">2</span>).concat(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">if</span> (curTime &gt;= <span class="keyword">new</span> <span class="built_in">Date</span>(...startTimeArr) &amp;&amp; curTime &lt;= <span class="keyword">new</span> <span class="built_in">Date</span>(...endTimeArr)) &#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="built_in">String</span>(item + <span class="number">1</span>).padStart(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">          months = months.filter(<span class="function"><span class="params">item</span> =&gt;</span> item)</span><br><span class="line">          <span class="comment">// if (!months.length) debugger</span></span><br><span class="line">          $scope.viewData[<span class="number">1</span>].data = [<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>].concat(months).concat([<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>])</span><br><span class="line">          $scope.viewData[<span class="number">1</span>].selectedIndex = months.findIndex(<span class="function"><span class="params">item</span> =&gt;</span> (item === <span class="built_in">String</span>(month + <span class="number">1</span>).padStart(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>)))</span><br><span class="line">          $scope.viewData[<span class="number">1</span>].selectedIndex = !~$scope.viewData[<span class="number">1</span>].selectedIndex ? <span class="number">0</span> : $scope.viewData[<span class="number">1</span>].selectedIndex</span><br><span class="line">          $scope.viewData[<span class="number">1</span>].isShow = $scope.dateEnabled</span><br><span class="line">          $scope.viewData[<span class="number">1</span>].iscroll &amp;&amp; <span class="built_in">setTimeout</span>(<span class="function"><span class="params">_</span> =&gt;</span> &#123;</span><br><span class="line">            $scope.viewData[<span class="number">1</span>].iscroll.refresh()</span><br><span class="line">            $scope.viewData[<span class="number">1</span>].iscroll.scrollToPage(<span class="number">0</span>, $scope.viewData[<span class="number">1</span>].selectedIndex)</span><br><span class="line">          &#125;, <span class="number">300</span>)</span><br><span class="line">          $scope.month = <span class="built_in">parseInt</span>(months[$scope.viewData[<span class="number">1</span>].selectedIndex]) - <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">updateDays</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">let</span> days = [...new <span class="built_in">Array</span>(<span class="number">31</span>).keys()].map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> curTime = <span class="keyword">new</span> <span class="built_in">Date</span>($scope.year, $scope.month, item + <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">if</span> (curTime.getMonth() !== $scope.month) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">const</span> startTimeArr = splitDate(dateRange[<span class="number">0</span>]).slice(<span class="number">0</span>, <span class="number">3</span>).concat(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">const</span> endTimeArr = splitDate(dateRange[<span class="number">1</span>]).slice(<span class="number">0</span>, <span class="number">3</span>).concat(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">if</span> (curTime &gt;= <span class="keyword">new</span> <span class="built_in">Date</span>(...startTimeArr) &amp;&amp; curTime &lt;= <span class="keyword">new</span> <span class="built_in">Date</span>(...endTimeArr)) &#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="built_in">String</span>(item + <span class="number">1</span>).padStart(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">          days = days.filter(<span class="function"><span class="params">item</span> =&gt;</span> item)</span><br><span class="line">          <span class="comment">// if (!days.length) debugger</span></span><br><span class="line">          $scope.viewData[<span class="number">2</span>].data = [<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>].concat(days).concat([<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>])</span><br><span class="line">          $scope.viewData[<span class="number">2</span>].selectedIndex = days.findIndex(<span class="function"><span class="params">item</span> =&gt;</span> (item === <span class="built_in">String</span>(day).padStart(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>)))</span><br><span class="line">          $scope.viewData[<span class="number">2</span>].selectedIndex = !~$scope.viewData[<span class="number">2</span>].selectedIndex ? <span class="number">0</span> : $scope.viewData[<span class="number">2</span>].selectedIndex</span><br><span class="line">          $scope.viewData[<span class="number">2</span>].isShow = $scope.dateEnabled</span><br><span class="line">          $scope.viewData[<span class="number">2</span>].iscroll &amp;&amp; <span class="built_in">setTimeout</span>(<span class="function"><span class="params">_</span> =&gt;</span> &#123;</span><br><span class="line">            $scope.viewData[<span class="number">2</span>].iscroll.refresh()</span><br><span class="line">            $scope.viewData[<span class="number">2</span>].iscroll.scrollToPage(<span class="number">0</span>, $scope.viewData[<span class="number">2</span>].selectedIndex)</span><br><span class="line">          &#125;, <span class="number">300</span>)</span><br><span class="line">          $scope.day = <span class="built_in">parseInt</span>(days[$scope.viewData[<span class="number">2</span>].selectedIndex])</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">updateHours</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">let</span> hours = [...new <span class="built_in">Array</span>(<span class="number">24</span>).keys()].map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> curTime = <span class="keyword">new</span> <span class="built_in">Date</span>($scope.year, $scope.month, $scope.day, item, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">const</span> startTimeArr = splitDate(dateRange[<span class="number">0</span>]).slice(<span class="number">0</span>, <span class="number">4</span>).concat(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">const</span> endTimeArr = splitDate(dateRange[<span class="number">1</span>]).slice(<span class="number">0</span>, <span class="number">4</span>).concat(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">if</span> (curTime &gt;= <span class="keyword">new</span> <span class="built_in">Date</span>(...startTimeArr) &amp;&amp; curTime &lt;= <span class="keyword">new</span> <span class="built_in">Date</span>(...endTimeArr)) &#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="built_in">String</span>(item).padStart(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">          hours = hours.filter(<span class="function"><span class="params">item</span> =&gt;</span> item)</span><br><span class="line">          <span class="comment">// if (!hours.length) debugger</span></span><br><span class="line">          $scope.viewData[<span class="number">3</span>].data = [<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>].concat(hours).concat([<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>])</span><br><span class="line">          $scope.viewData[<span class="number">3</span>].selectedIndex = hours.findIndex(<span class="function"><span class="params">item</span> =&gt;</span> (item === <span class="built_in">String</span>(hour).padStart(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>)))</span><br><span class="line">          $scope.viewData[<span class="number">3</span>].selectedIndex = !~$scope.viewData[<span class="number">3</span>].selectedIndex ? <span class="number">0</span> : $scope.viewData[<span class="number">3</span>].selectedIndex</span><br><span class="line">          $scope.viewData[<span class="number">3</span>].isShow = $scope.timeEnabled</span><br><span class="line">          $scope.viewData[<span class="number">3</span>].iscroll &amp;&amp; <span class="built_in">setTimeout</span>(<span class="function"><span class="params">_</span> =&gt;</span> &#123;</span><br><span class="line">            $scope.viewData[<span class="number">3</span>].iscroll.refresh()</span><br><span class="line">            $scope.viewData[<span class="number">3</span>].iscroll.scrollToPage(<span class="number">0</span>, $scope.viewData[<span class="number">3</span>].selectedIndex)</span><br><span class="line">          &#125;, <span class="number">300</span>)</span><br><span class="line">          $scope.hour = <span class="built_in">parseInt</span>(hours[$scope.viewData[<span class="number">3</span>].selectedIndex])</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">updateMinutes</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">let</span> minutes = [...new <span class="built_in">Array</span>(<span class="number">60</span>).keys()].map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> curTime = <span class="keyword">new</span> <span class="built_in">Date</span>($scope.year, $scope.month, $scope.day, $scope.hour, item, <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">const</span> startTimeArr = splitDate(dateRange[<span class="number">0</span>]).slice(<span class="number">0</span>, <span class="number">5</span>).concat(<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">const</span> endTimeArr = splitDate(dateRange[<span class="number">1</span>]).slice(<span class="number">0</span>, <span class="number">5</span>).concat(<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">if</span> (curTime &gt;= <span class="keyword">new</span> <span class="built_in">Date</span>(...startTimeArr) &amp;&amp; curTime &lt;= <span class="keyword">new</span> <span class="built_in">Date</span>(...endTimeArr)) &#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="built_in">String</span>(item).padStart(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">          minutes = minutes.filter(<span class="function"><span class="params">item</span> =&gt;</span> item)</span><br><span class="line">          <span class="comment">// if (!minutes.length) debugger</span></span><br><span class="line">          $scope.viewData[<span class="number">4</span>].data = [<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>].concat(minutes).concat([<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>])</span><br><span class="line">          $scope.viewData[<span class="number">4</span>].selectedIndex = minutes.findIndex(<span class="function"><span class="params">item</span> =&gt;</span> (item === <span class="built_in">String</span>(minute).padStart(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>)))</span><br><span class="line">          $scope.viewData[<span class="number">4</span>].selectedIndex = !~$scope.viewData[<span class="number">4</span>].selectedIndex ? <span class="number">0</span> : $scope.viewData[<span class="number">4</span>].selectedIndex</span><br><span class="line">          $scope.viewData[<span class="number">4</span>].isShow = $scope.timeEnabled</span><br><span class="line">          $scope.viewData[<span class="number">4</span>].iscroll &amp;&amp; <span class="built_in">setTimeout</span>(<span class="function"><span class="params">_</span> =&gt;</span> &#123;</span><br><span class="line">            $scope.viewData[<span class="number">4</span>].iscroll.refresh()</span><br><span class="line">            $scope.viewData[<span class="number">4</span>].iscroll.scrollToPage(<span class="number">0</span>, $scope.viewData[<span class="number">4</span>].selectedIndex)</span><br><span class="line">          &#125;, <span class="number">300</span>)</span><br><span class="line">          $scope.minute = <span class="built_in">parseInt</span>(minutes[$scope.viewData[<span class="number">4</span>].selectedIndex])</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">updateSeconds</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">let</span> seconds = [...new <span class="built_in">Array</span>(<span class="number">60</span>).keys()].map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> curTime = <span class="keyword">new</span> <span class="built_in">Date</span>($scope.year, $scope.month, $scope.day, $scope.hour, $scope.minute, item)</span><br><span class="line">            <span class="keyword">const</span> startTimeArr = splitDate(dateRange[<span class="number">0</span>]).slice(<span class="number">0</span>, <span class="number">6</span>)</span><br><span class="line">            <span class="keyword">const</span> endTimeArr = splitDate(dateRange[<span class="number">1</span>]).slice(<span class="number">0</span>, <span class="number">6</span>)</span><br><span class="line">            <span class="keyword">if</span> (curTime &gt;= <span class="keyword">new</span> <span class="built_in">Date</span>(...startTimeArr) &amp;&amp; curTime &lt;= <span class="keyword">new</span> <span class="built_in">Date</span>(...endTimeArr)) &#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="built_in">String</span>(item).padStart(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">          seconds = seconds.filter(<span class="function"><span class="params">item</span> =&gt;</span> item)</span><br><span class="line">          <span class="comment">// if (!seconds.length) debugger</span></span><br><span class="line">          $scope.viewData[<span class="number">5</span>].data = [<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>].concat(seconds).concat([<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>])</span><br><span class="line">          $scope.viewData[<span class="number">5</span>].selectedIndex = seconds.findIndex(<span class="function"><span class="params">item</span> =&gt;</span> (item === <span class="built_in">String</span>(second).padStart(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>)))</span><br><span class="line">          $scope.viewData[<span class="number">5</span>].selectedIndex = !~$scope.viewData[<span class="number">5</span>].selectedIndex ? <span class="number">0</span> : $scope.viewData[<span class="number">5</span>].selectedIndex</span><br><span class="line">          $scope.viewData[<span class="number">5</span>].isShow = $scope.timeEnabled</span><br><span class="line">          $scope.viewData[<span class="number">5</span>].iscroll &amp;&amp; <span class="built_in">setTimeout</span>(<span class="function"><span class="params">_</span> =&gt;</span> &#123;</span><br><span class="line">            $scope.viewData[<span class="number">5</span>].iscroll.refresh()</span><br><span class="line">            $scope.viewData[<span class="number">5</span>].iscroll.scrollToPage(<span class="number">0</span>, $scope.viewData[<span class="number">5</span>].selectedIndex)</span><br><span class="line">          &#125;, <span class="number">300</span>)</span><br><span class="line">          $scope.second = <span class="built_in">parseInt</span>(seconds[$scope.viewData[<span class="number">5</span>].selectedIndex])</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> updateFunList = [updateYears, updateMonths, updateDays, updateHours, updateMinutes, updateSeconds]</span><br><span class="line">        <span class="keyword">const</span> startIndex = preDateArray.findIndex(<span class="function">(<span class="params">item, index</span>) =&gt;</span> (item &amp;&amp; item !== dateArray[index]))</span><br><span class="line">        updateFunList.slice(startIndex &lt; <span class="number">0</span> ? <span class="number">0</span> : startIndex).forEach(<span class="function"><span class="params">fun</span> =&gt;</span> fun())</span><br><span class="line">        preDateArray = dateArray</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      $scope.processModel = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 初始化日期数据</span></span><br><span class="line">        <span class="keyword">let</span> date = $scope.modelDate</span><br><span class="line">        date = $scope.modelDate <span class="keyword">instanceof</span> <span class="built_in">Date</span> ? $scope.modelDate : <span class="keyword">new</span> <span class="built_in">Date</span>($scope.modelDate)</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">isNaN</span>(date)) date = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">        $scope.modelDate = date</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化校验数据（年份由于过多，限制是当前时间 +- 10，不做无限滚动）</span></span><br><span class="line">        $scope.dateRange = $scope.dateRange || []</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> ($scope.dateRange) === <span class="string">&#x27;string&#x27;</span>) $scope.dateRange = $scope.dateRange.split(<span class="string">&#x27;,&#x27;</span>).map(<span class="function"><span class="params">item</span> =&gt;</span> (<span class="keyword">new</span> <span class="built_in">Date</span>(item)))</span><br><span class="line">        $scope.dateRange[<span class="number">0</span>] = $scope.dateRange[<span class="number">0</span>] || <span class="literal">undefined</span></span><br><span class="line">        $scope.dateRange[<span class="number">1</span>] = $scope.dateRange[<span class="number">1</span>] || <span class="literal">undefined</span></span><br><span class="line">        $scope.dateRange = getTimeIntersection($scope.dateRange, [addYears(date, -<span class="number">10</span>), addYears(date, <span class="number">10</span>)])</span><br><span class="line"></span><br><span class="line">        generateViewData($scope.modelDate)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      $scope.showPopup = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        dateTimePicker = $ionicPopup.show(&#123;</span><br><span class="line">          template,</span><br><span class="line">          scope: $scope,</span><br><span class="line">          cssClass: <span class="string">&#x27;datetime-picker-popup&#x27;</span>,</span><br><span class="line">        &#125;)</span><br><span class="line">        afterDomLoad(<span class="string">&#x27;.picker-slot&#x27;</span>).then(<span class="function"><span class="params">domList</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&#x27;afterDomLoad - viewData&#x27;</span>, $scope.viewData)</span><br><span class="line">          $scope.viewData.forEach(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">            item.el = domList[index]</span><br><span class="line"></span><br><span class="line">            <span class="keyword">let</span> timer = <span class="literal">null</span></span><br><span class="line">            <span class="keyword">const</span> onTouchAnimationEnd = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">              <span class="built_in">console</span>.log(<span class="string">&#x27;onTouchEnd&#x27;</span>)</span><br><span class="line">              <span class="keyword">if</span> (<span class="built_in">this</span>.animating) &#123;</span><br><span class="line">                timer &amp;&amp; <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">                timer = <span class="built_in">setTimeout</span>(<span class="function"><span class="params">_</span> =&gt;</span> &#123;</span><br><span class="line">                  onTouchAnimationEnd.call(<span class="built_in">this</span>, e)</span><br><span class="line">                &#125;, <span class="number">500</span>)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line">              <span class="built_in">console</span>.log(<span class="string">&#x27;onTouchAnimationEnd&#x27;</span>, <span class="built_in">this</span>, e)</span><br><span class="line">              <span class="keyword">const</span> yIndex = <span class="built_in">this</span>.pagesY.findIndex(<span class="function"><span class="params">y</span> =&gt;</span> (y === <span class="built_in">this</span>.y)) + <span class="number">3</span></span><br><span class="line">              <span class="comment">// if (yIndex === -1) debugger</span></span><br><span class="line">              <span class="keyword">let</span> newValue = item.data[yIndex]</span><br><span class="line">              newValue = <span class="built_in">parseInt</span>(newValue || item.data[<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">              <span class="keyword">const</span> newDateArr = [$scope.year, $scope.month, $scope.day, $scope.hour, $scope.minute, $scope.second]</span><br><span class="line">              newDateArr[index] = newValue</span><br><span class="line">              <span class="keyword">if</span> (index === <span class="number">1</span>) &#123;</span><br><span class="line">                newDateArr[index]--</span><br><span class="line">                <span class="keyword">new</span> <span class="built_in">Date</span>(...newDateArr).getMonth() !== newDateArr[index] &amp;&amp; (newDateArr[index + <span class="number">1</span>] = <span class="number">1</span>)</span><br><span class="line">              &#125;</span><br><span class="line">              generateViewData(<span class="keyword">new</span> <span class="built_in">Date</span>(...newDateArr))</span><br><span class="line">              $scope.$apply()</span><br><span class="line">            &#125;</span><br><span class="line">            item.iscroll = <span class="keyword">new</span> IScroll(item.el, &#123;</span><br><span class="line">              hScrollbar: <span class="literal">false</span>,</span><br><span class="line">              vScrollbar: <span class="literal">false</span>,</span><br><span class="line">              zoom: <span class="literal">false</span>,</span><br><span class="line">              momentum: <span class="literal">false</span>,</span><br><span class="line">              snap: <span class="string">&#x27;.picker-item&#x27;</span>,</span><br><span class="line">              y: -item.selectedIndex * $scope.itemHeight,</span><br><span class="line">              onTouchEnd: onTouchAnimationEnd</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      $scope.cancel = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        dateTimePicker.close()</span><br><span class="line">      &#125;</span><br><span class="line">      $scope.confirm = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        dateTimePicker.close()</span><br><span class="line">        $scope.commit()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;],</span><br><span class="line">    link: <span class="function"><span class="keyword">function</span>(<span class="params">$scope, $element, $attrs, ngModelCtrl</span>) </span>&#123;</span><br><span class="line">      $scope.dateEnabled = $attrs.type === <span class="string">&#x27;date&#x27;</span></span><br><span class="line">      $scope.timeEnabled = $attrs.type === <span class="string">&#x27;time&#x27;</span></span><br><span class="line">      <span class="keyword">if</span> (!$scope.dateEnabled &amp;&amp; !$scope.timeEnabled) &#123;</span><br><span class="line">        $scope.dateEnabled = $scope.timeEnabled = <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      ngModelCtrl.$render = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        $scope.modelDate = ngModelCtrl.$viewValue</span><br><span class="line">        $scope.processModel()</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      $scope.commit = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        $scope.modelDate = <span class="keyword">new</span> <span class="built_in">Date</span>($scope.year, $scope.month, $scope.day, $scope.hour, $scope.minute, $scope.second)</span><br><span class="line">        ngModelCtrl.$setViewValue($scope.modelDate)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      $element.on(<span class="string">&#x27;click&#x27;</span>, $scope.showPopup)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><h4 id="弹窗组件"><a href="#弹窗组件" class="headerlink" title="弹窗组件"></a>弹窗组件</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 点击遮罩关闭处理函数</span></span><br><span class="line"><span class="comment">* @param popup  弹窗对象</span></span><br><span class="line"><span class="comment">* @param maskClose  是否开启点击遮罩关闭弹窗</span></span><br><span class="line"><span class="comment">* @param e  点击事件</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">closePopup</span>(<span class="params">popup, maskClose, e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!maskClose) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    ~[<span class="string">&#x27;html&#x27;</span>, <span class="string">&#x27;body&#x27;</span>].indexOf(e.target.tagName.toLowerCase()) ||</span><br><span class="line">    e.target.classList.contains(<span class="string">&#x27;popup-container&#x27;</span>)</span><br><span class="line">  ) &#123;</span><br><span class="line">    popup.close()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// http://www.ionic.wang/js_doc-index-id-52.html</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    $get: [<span class="string">&#x27;$ionicPopup&#x27;</span>, <span class="string">&#x27;i18n&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$ionicPopup, i18n</span>) </span>&#123;</span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">      * 弹出提示窗口</span></span><br><span class="line"><span class="comment">      * @param content  内容</span></span><br><span class="line"><span class="comment">      * @param title  标题</span></span><br><span class="line"><span class="comment">      * @param options  配置项</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">alert</span>(<span class="params">content, title, options</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">arguments</span>.length === <span class="number">2</span> &amp;&amp; <span class="keyword">typeof</span> title === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">          options = title</span><br><span class="line">          options.template = content</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">arguments</span>.length === <span class="number">1</span> &amp;&amp; <span class="keyword">typeof</span> content === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">          options = content</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          options = <span class="keyword">typeof</span> options === <span class="string">&#x27;object&#x27;</span> ? options : &#123;&#125;</span><br><span class="line">          options.title = title</span><br><span class="line">          options.template = content</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">Object</span>.keys(options).forEach(<span class="function"><span class="params">key</span> =&gt;</span> (options[key] === <span class="literal">undefined</span> &amp;&amp; <span class="keyword">delete</span> options[key]))</span><br><span class="line">        <span class="keyword">const</span> params = &#123;</span><br><span class="line">          title: i18n.t(<span class="string">&#x27;TIPS.SYSTEM_MESSAGE&#x27;</span>),</span><br><span class="line">          okText: i18n.t(<span class="string">&#x27;OP.YES&#x27;</span>),</span><br><span class="line">          okType: <span class="string">&#x27;button-positive&#x27;</span>,</span><br><span class="line">          ...options</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> alertPopup = $ionicPopup.alert(params)</span><br><span class="line">        <span class="keyword">const</span> handleClose = closePopup.bind(<span class="literal">null</span>, alertPopup, options.maskClose)</span><br><span class="line">        <span class="built_in">document</span>.addEventListener(<span class="string">&#x27;click&#x27;</span>, handleClose, <span class="literal">false</span>)</span><br><span class="line">        <span class="keyword">return</span> alertPopup.then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">document</span>.removeEventListener(<span class="string">&#x27;click&#x27;</span>, handleClose, <span class="literal">false</span>)</span><br><span class="line">          <span class="keyword">return</span> res</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">      * 弹出确认提示窗口</span></span><br><span class="line"><span class="comment">      * @param content  内容</span></span><br><span class="line"><span class="comment">      * @param title  标题</span></span><br><span class="line"><span class="comment">      * @param options  配置项</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">confirm</span>(<span class="params">content, title, options</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">arguments</span>.length === <span class="number">2</span> &amp;&amp; <span class="keyword">typeof</span> title === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">          options = title</span><br><span class="line">          options.template = content</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">arguments</span>.length === <span class="number">1</span> &amp;&amp; <span class="keyword">typeof</span> content === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">          options = content</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          options = <span class="keyword">typeof</span> options === <span class="string">&#x27;object&#x27;</span> ? options : &#123;&#125;</span><br><span class="line">          options.title = title</span><br><span class="line">          options.template = content</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">Object</span>.keys(options).forEach(<span class="function"><span class="params">key</span> =&gt;</span> (options[key] === <span class="literal">undefined</span> &amp;&amp; <span class="keyword">delete</span> options[key]))</span><br><span class="line">        <span class="keyword">const</span> params = &#123;</span><br><span class="line">          title: i18n.t(<span class="string">&#x27;TIPS.SYSTEM_MESSAGE&#x27;</span>),</span><br><span class="line">          okText: i18n.t(<span class="string">&#x27;OP.CONFIRM&#x27;</span>),</span><br><span class="line">          cancelText: i18n.t(<span class="string">&#x27;OP.CANCEL&#x27;</span>),</span><br><span class="line">          okType: <span class="string">&#x27;button-default&#x27;</span>,</span><br><span class="line">          cancelType: <span class="string">&#x27;button-positive&#x27;</span>,</span><br><span class="line">          ...options</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (options.reverseBtnOrder) [params.okText, params.cancelText] = [params.cancelText, params.okText]</span><br><span class="line">        <span class="keyword">if</span> (options.highlightCancel) [params.okType, params.cancelType] = [params.cancelType, params.okType]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> confirmPopup = $ionicPopup.confirm(params)</span><br><span class="line">        <span class="keyword">const</span> handleClose = closePopup.bind(<span class="literal">null</span>, confirmPopup, options.maskClose)</span><br><span class="line">        <span class="built_in">document</span>.addEventListener(<span class="string">&#x27;click&#x27;</span>, handleClose, <span class="literal">false</span>)</span><br><span class="line">        <span class="keyword">return</span> confirmPopup.then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">document</span>.removeEventListener(<span class="string">&#x27;click&#x27;</span>, handleClose, <span class="literal">false</span>)</span><br><span class="line">          <span class="keyword">return</span> res</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        alert,</span><br><span class="line">        confirm</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ionic引起问题处理"><a href="#ionic引起问题处理" class="headerlink" title="ionic引起问题处理"></a>ionic引起问题处理</h2><h3 id="鼠标滚轮滚动列表不流畅问题"><a href="#鼠标滚轮滚动列表不流畅问题" class="headerlink" title="鼠标滚轮滚动列表不流畅问题"></a>鼠标滚轮滚动列表不流畅问题</h3><blockquote><p>复现场景：列表DOM层次超过10</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// REQ-11064，需求5</span></span><br><span class="line"><span class="comment">// ionic (https://cdn.bootcdn.net/ajax/libs/ionic/1.3.2/js/ionic.js) 5444 行判断元素是否在滚动的下面使用该方法，但是默认的判断层数（10）对于html层次过多的情况不适用，这里加多一些层次</span></span><br><span class="line"><span class="built_in">window</span>.ionic.DomUtil.getParentOrSelfWithClass = <span class="function"><span class="keyword">function</span>(<span class="params">e, className, depth</span>) </span>&#123;</span><br><span class="line">    depth = depth || <span class="number">20</span></span><br><span class="line">    <span class="keyword">while</span> (e &amp;&amp; depth--) &#123;</span><br><span class="line">        <span class="keyword">if</span> (e.classList &amp;&amp; e.classList.contains(className)) &#123;</span><br><span class="line">            <span class="keyword">return</span> e</span><br><span class="line">        &#125;</span><br><span class="line">        e = e.parentNode</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>事实上，我认为如果不支持touch事件的设备，直接默认设置用系统滚动即可。因为pc设备很少有人会想到用移动端的拖放去显示。但是这和ionic完全模拟移动端的设想又冲突了。</p></blockquote><h3 id="滚动太过灵敏问题"><a href="#滚动太过灵敏问题" class="headerlink" title="滚动太过灵敏问题"></a>滚动太过灵敏问题</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LKFBK-2005 (https://cdn.bootcdn.net/ajax/libs/ionic/1.3.2/js/ionic.js 1710行)</span></span><br><span class="line"><span class="comment">// 默认是10，也就是按下到松开手指的位移距离不超过10px就会认定为是点击</span></span><br><span class="line"><span class="built_in">window</span>.ionic.Gestures.gestures.Tap.defaults.tap_max_distance = <span class="number">5</span></span><br></pre></td></tr></table></figure><h3 id="内嵌webview无法上传文件"><a href="#内嵌webview无法上传文件" class="headerlink" title="内嵌webview无法上传文件"></a>内嵌webview无法上传文件</h3><blockquote><p>复现场景：actionsheet里面通过动态创建input[type=file]，然后input.click()来触发文件选择</p><p>如何让第二次在第三次之后触发有2个考虑，但是试了都不行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// input.click() 用下面方式代替</span></span><br><span class="line">ionic.trigger(<span class="string">&#x27;click&#x27;</span>, &#123;<span class="attr">target</span>: input&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用setTimeout</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="params">_</span> =&gt;</span> input.click())</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CMFBK-17799、CIM-26409、CIM-27171</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">          * 1. 无法弹窗选择文件对话框，问题在于ionic(https://cdn.bootcdn.net/ajax/libs/ionic/1.3.2/js/ionic.js) 2948行 tapClickGateKeeper</span></span><br><span class="line"><span class="comment">          * 2. 点击按钮后，tapClickGateKeeper触发了3次。第一次是button的tapClick，isIonicTap=true，不阻止默认行为。</span></span><br><span class="line"><span class="comment">          * 第二次是代码中input[type=file]的click，isIonicTap=false但是requireNativeClick=true，不阻止默认行为。</span></span><br><span class="line"><span class="comment">          * 第三次是button的click，isIonicTap=false，阻止默认行为。</span></span><br><span class="line"><span class="comment">          * 这里正常情况只有第一次和第三次的触发，第一次会执行我们绑定的方法，第二次由于没有任何绑定到原生click的行为，就没有影响。</span></span><br><span class="line"><span class="comment">          * 3. 这里造成上传失效的原因是第三次触发被阻止了默认行为，这个原理暂未得知，如果清楚可以记录下到这里。</span></span><br><span class="line"><span class="comment">          * 4. 综上所述，解决方法还可以是让第二次的点击事件在第三次之后触发（暂未考证）或者给触发点击的元素成为requireNativeClick的元素(这里使用的方法)。</span></span><br><span class="line"><span class="comment">          * 5. 对于这类问题，暂未有啥好的解决方法，ioinc do not allow through any click events that were not created by ionic.tap（http://git.mailtech.cn/fe-components/ionic-v1/-/commit/d0047cda446adf1f30e55b056e83bb31ac5c6061），</span></span><br><span class="line"><span class="comment">          * 可以放开不是ionic.tap触发的点击事件，但是更改第三方库逻辑可能导致第三方库运行出现未能预期的情况，特别是这种整体的处理，因此这里先临时处理。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">document</span>.body.querySelector(<span class="string">&#x27;p&#x27;</span>).type = <span class="string">&#x27;file&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="ionic滑动动画和ios的滑动动画冲突"><a href="#ionic滑动动画和ios的滑动动画冲突" class="headerlink" title="ionic滑动动画和ios的滑动动画冲突"></a>ionic滑动动画和ios的滑动动画冲突</h3><blockquote><p>最直接的就是放弃ios下的滑动动画，因为无法完美解决。但是方法1是我认为可以接受的近乎完美方案。</p></blockquote><p><strong>方法1：</strong></p><p>参考：<br><a href="https://github.com/RedTeapot/Viewjs/issues/4">https://github.com/RedTeapot/Viewjs/issues/4</a><br><a href="https://doc.view-js.com/main.-shi-tu-qie-huan-dong-hua">https://doc.view-js.com/main.-shi-tu-qie-huan-dong-hua</a></p><ol><li>滑动返回/前进动画，是safari自带的特性，无法禁止；</li><li>浏览器执行的前进或后退，无法区分是通过滑动手势触发的，还是通过点击底部按钮触发的；<br>开发者可通过区分 “由应用驱动的切换” 和 “由浏览器驱动的切换”，在“切换动作由浏览器驱动”场景下不呈现动画，而在“切换动作由应用驱动”的场景下呈现动画。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">app.run([<span class="string">&#x27;$state&#x27;</span>, <span class="string">&#x27;$ionicHistory&#x27;</span>, <span class="string">&#x27;$rootScope&#x27;</span>, <span class="string">&#x27;$ionicViewSwitcher&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$state, $ionicHistory, $rootScope, $ionicViewSwitcher</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 手动设置切换页面动画规则</span></span><br><span class="line">  <span class="keyword">const</span> setSwitchAnimationRule = <span class="function"><span class="keyword">function</span>(<span class="params">toState, toParams, fromState, fromParams</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (fromState.name === <span class="string">&#x27;detail&#x27;</span> &amp;&amp; toState.name === <span class="string">&#x27;index&#x27;</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> $ionicViewSwitcher.nextDirection([<span class="string">&#x27;back&#x27;</span>])</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">if</span> (fromState.name === <span class="string">&#x27;index&#x27;</span> &amp;&amp; toState.name === <span class="string">&#x27;detail&#x27;</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> $ionicViewSwitcher.nextDirection([<span class="string">&#x27;forward&#x27;</span>])</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">      $ionicViewSwitcher.nextDirection([<span class="string">&#x27;none&#x27;</span>])</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 视图切换触发器：浏览器(navigator) 应用程序(app)</span></span><br><span class="line">  <span class="keyword">let</span> SWITCHTRIGGER = <span class="string">&#x27;navigator&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 由于无法判断用户是通过浏览器触发的，因此只能给客户端触发添加标记</span></span><br><span class="line">  <span class="keyword">const</span> setSwitchTrigger = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> originFn = &#123;</span><br><span class="line">      stateGo: $state.go,</span><br><span class="line">      ionicHistoryGoBack: $ionicHistory.goBack,</span><br><span class="line">      history: &#123;</span><br><span class="line">        go: history.go,</span><br><span class="line">        back: history.back,</span><br><span class="line">        forward: history.forward</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    $state.go = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      SWITCHTRIGGER = <span class="string">&#x27;app&#x27;</span></span><br><span class="line">      originFn.stateGo.apply($state, [...arguments])</span><br><span class="line">    &#125;</span><br><span class="line">    $ionicHistory.goBack = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      SWITCHTRIGGER = <span class="string">&#x27;app&#x27;</span></span><br><span class="line">      originFn.ionicHistoryGoBack.apply($ionicHistory, [...arguments])</span><br><span class="line">    &#125;</span><br><span class="line">    angular.forEach(<span class="built_in">Object</span>.keys(originFn.history), <span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">      history[item] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        SWITCHTRIGGER = <span class="string">&#x27;app&#x27;</span></span><br><span class="line">        originFn.history[item].apply(history, [...arguments])</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setSwitchTrigger()</span><br><span class="line"></span><br><span class="line">  $rootScope.$on(<span class="string">&#x27;$stateChangeStart&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e, toState, toParams, fromState, fromParams</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (SWITCHTRIGGER === <span class="string">&#x27;navigator&#x27;</span>) &#123;</span><br><span class="line">      <span class="comment">// 禁止动画</span></span><br><span class="line">      $ionicViewSwitcher.nextDirection([<span class="string">&#x27;none&#x27;</span>])</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 展示动画</span></span><br><span class="line">      setSwitchAnimationRule(toState, toParams, fromState, fromParams)</span><br><span class="line">      SWITCHTRIGGER = <span class="string">&#x27;navigator&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;])</span><br></pre></td></tr></table></figure><p>方法2：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.config([<span class="string">&#x27;$ionicConfigProvider&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$ionicConfigProvider</span>) </span>&#123;</span><br><span class="line">    $ionicConfigProvider.views.swipeBackEnabled(<span class="literal">false</span>)</span><br><span class="line">  &#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure><blockquote><p>iphone12 mini测试无效，但是的确有这个API，有待研究</p></blockquote><h3 id="IOS部分机型上下滑动卡顿"><a href="#IOS部分机型上下滑动卡顿" class="headerlink" title="IOS部分机型上下滑动卡顿"></a>IOS部分机型上下滑动卡顿</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (isIOS() &amp;&amp; <span class="string">&#x27;ontouchstart&#x27;</span> <span class="keyword">in</span> element) &#123;</span><br><span class="line"> element.bind(<span class="string">&#x27;touchmove&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">     <span class="built_in">window</span>.ionic.scroll.isScrolling &amp;&amp; e.preventDefault()</span><br><span class="line"> &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="点击一次触发2次"><a href="#点击一次触发2次" class="headerlink" title="点击一次触发2次"></a>点击一次触发2次</h3><p>问题出现机型：小米8系统浏览器，该设备其他浏览器正常</p><p>问题原因定位：见下图，触发了2种事件</p><p><img src="http://blog.cdn.ionluo.cn/blog/%E7%82%B9%E5%87%BB%E4%BA%8B%E4%BB%B6%E5%A4%9A%E6%AC%A1%E8%A7%A6%E5%8F%91%E9%97%AE%E9%A2%98.png" alt="点击事件多次触发问题"></p><p>问题复现demo: <a href="https://blog.cdn.ionluo.cn/blog%2Fdemo.rar">demo.rar</a> （能在任意浏览器移动端复现)</p><p>解决办法：放弃使用alert或者做防抖处理</p><p>参考文献：</p><p><a href="https://stackoverflow.com/questions/36271392/why-is-my-ng-click-event-firing-twice">https://stackoverflow.com/questions/36271392/why-is-my-ng-click-event-firing-twice</a></p><p><a href="https://forum.ionicframework.com/t/ionic-bundle-js-causes-ng-click-event-to-fire-multiple-times/32008">Ionic.bundle.js causes ng-click event to fire multiple times</a></p><p><a href="https://github.com/ionic-team/ionic-framework/issues/4345">https://github.com/ionic-team/ionic-framework/issues/4345</a></p><p><strong>最新发现情况2：ipad 2020 onTap触发2次</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;someId123&quot;</span> style=<span class="string">&quot;width: 300px;height: 300px;background: red;color: white;&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// tap点击一次触发2次问题(https://cdn.bootcdn.net/ajax/libs/ionic/1.3.2/js/ionic.js 967行)</span></span><br><span class="line">    <span class="comment">// ionic.Gestures.NO_MOUSEEVENTS = ionic.Gestures.HAS_TOUCHEVENTS</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">window</span>.navigator.userAgent)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;onmousedown&#x27;</span> <span class="keyword">in</span> <span class="built_in">window</span>)  <span class="comment">// true</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;ontouchstart&#x27;</span> <span class="keyword">in</span> <span class="built_in">window</span>)  <span class="comment">// true</span></span><br><span class="line">    <span class="built_in">window</span>.ionic.onGesture(<span class="string">&#x27;tap&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;ev&#x27;</span>, ev)</span><br><span class="line">    &#125;, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;someId123&#x27;</span>));</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>造成原因是ipad 2020同时支持mouse事件和touch事件，ionic的mousedown和touchstart都会对应到点击事件，所以导致点击事件会触发2次。</p><p>ionic的逻辑是希望移动端不使用mouse相关事件，但是检查的时候用的正则无法满足ipad2020所以造成该问题，事实上，既然存在touch事件，完全没有必要去检查ua判断是否移动端，直接用touch去模拟点击即可，这里有点理不清楚ionic的逻辑，故先如此处理</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ionic.Gestures.MOBILE_REGEX = <span class="regexp">/mobile|tablet|ip(ad|hone|od)|android|silk/i</span>;</span><br><span class="line">ionic.Gestures.NO_MOUSEEVENTS = ionic.Gestures.HAS_TOUCHEVENTS &amp;&amp; <span class="built_in">window</span>.navigator.userAgent.match(ionic.Gestures.MOBILE_REGEX);</span><br></pre></td></tr></table></figure></blockquote><h3 id="overflow-scroll问题"><a href="#overflow-scroll问题" class="headerlink" title="overflow-scroll问题"></a>overflow-scroll问题</h3><p>在 ion-scroll 指令中，overflow-scroll=”true” 无法缩放， overflow-scroll=”false” 则使得css的overflow:auto失效，无法通过touchmove滚动。</p><p>解决方法：设置overflow-scroll=”false”，然后控制器执行下面代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&lt;ion-scroll delegate-handle=&quot;smallscroll&quot; style=&quot;height: 100px;&quot;&gt;</span></span><br><span class="line"><span class="comment">    &lt;button ng-click=&quot;scrollSmallToTop()&quot;&gt;</span></span><br><span class="line"><span class="comment">        Scroll small area to top!</span></span><br><span class="line"><span class="comment">    &lt;/button&gt;</span></span><br><span class="line"><span class="comment">&lt;/ion-scroll&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">$ionicScrollDelegate.$getByHandle(<span class="string">&#x27;smallscroll&#x27;</span>).getScrollView().options.preventDefault = <span class="literal">false</span></span><br></pre></td></tr></table></figure><blockquote><p><a href="https://ionicframework.com/docs/v1/api/service/$ionicScrollDelegate/">$ionicScrollDelegate</a></p><p><a href="https://stackoverflow.com/questions/65192706/html-content-overflow-when-using-innerhtml-in-ionic">HTML content overflow when using innerHTML in IONIC</a></p><p>PS: 虽然这里可以这样子处理，但是感觉ionic底层是不推荐这样子的，因为默认行为被放开，可能无法阻止ios的捏合缩放手势，是否会有其他问题待验证。捏合手势目前先用下面方式处理，可能有兼容问题。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Safari 9+支持, 处理IOS10 meta无法禁止缩放问题</span></span><br><span class="line"><span class="comment">// https://stackoverflow.com/questions/41696420/how-to-disable-zoom-on-mobile-website-for-ios-devices-using-metatag</span></span><br><span class="line"><span class="built_in">window</span>.ionic.on(<span class="string">&#x27;gesturestart&#x27;</span>, <span class="function"><span class="params">event</span> =&gt;</span> event.preventDefault())</span><br></pre></td></tr></table></figure></blockquote><h3 id="键盘弹出导致的页面不可见问题"><a href="#键盘弹出导致的页面不可见问题" class="headerlink" title="键盘弹出导致的页面不可见问题"></a>键盘弹出导致的页面不可见问题</h3><p>暂时没有啥好的解决办法，只能禁用ionic的键盘调整</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Disabling Ionic&#x27;s keyboard adjustments.</span></span><br><span class="line"><span class="keyword">const</span> interval = <span class="built_in">setInterval</span>(<span class="function"><span class="params">_</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">window</span>.ionic.keyboard.isInitialized) &#123;</span><br><span class="line">    <span class="built_in">window</span>.ionic.keyboard.disable()</span><br><span class="line">    <span class="built_in">clearInterval</span>(interval)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure><h3 id="shadowDOM无法点击问题"><a href="#shadowDOM无法点击问题" class="headerlink" title="shadowDOM无法点击问题"></a>shadowDOM无法点击问题</h3><p>由于ionic顶层捕获所有的click事件，检查不符合条件的ionic就阻止冒泡导致其上的点击事件失效（即ionic只托管自己的点击，其他都阻止）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.ionic.tap.requiresNativeClick = <span class="function"><span class="keyword">function</span>(<span class="params">ele</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">window</span>.ionic.Platform.isWindowsPhone() &amp;&amp; (ele.tagName == <span class="string">&#x27;A&#x27;</span> || ele.tagName == <span class="string">&#x27;BUTTON&#x27;</span> || ele.hasAttribute(<span class="string">&#x27;ng-click&#x27;</span>) || (ele.tagName == <span class="string">&#x27;INPUT&#x27;</span> &amp;&amp; (ele.type == <span class="string">&#x27;button&#x27;</span> || ele.type == <span class="string">&#x27;submit&#x27;</span>)))) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span> <span class="comment">// Windows Phone edge case, prevent ng-click (and similar) events from firing twice on this platform</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!ele || ele.disabled || (<span class="regexp">/^(file|range)$/i</span>).test(ele.type) || (<span class="regexp">/^(object|video)$/i</span>).test(ele.tagName) || <span class="built_in">window</span>.ionic.tap.isLabelContainingFileInput(ele)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// changed start</span></span><br><span class="line">  <span class="keyword">if</span> (ele.shadowRoot) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// changed end</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">window</span>.ionic.tap.isElementTapDisabled(ele)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ion-content无-has-footer-has-header-问题"><a href="#ion-content无-has-footer-has-header-问题" class="headerlink" title="ion-content无 has-footer/has-header 问题"></a>ion-content无 has-footer/has-header 问题</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ion-header-bar</span> <span class="attr">class</span>=<span class="string">&quot;bar-positive&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>Contacts<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;buttons&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;button button-icon ion-compose&quot;</span> <span class="attr">ng-click</span>=<span class="string">&quot;modal.show()&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ion-header-bar</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ion-content</span> <span class="attr">padding</span>=<span class="string">&quot;true&quot;</span> <span class="attr">start-y</span>=<span class="string">&quot;120&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span> <span class="attr">class</span>=<span class="string">&quot;messages&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">ng-repeat</span>=<span class="string">&quot;message in messages&quot;</span> <span class="attr">ng-bind-html</span>=<span class="string">&quot;message.content&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ion-content</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ion-footer-bar</span> <span class="attr">class</span>=<span class="string">&quot;bar-frosted&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;button button-clear button-positive&quot;</span> <span class="attr">ng-click</span>=<span class="string">&quot;add()&quot;</span>&gt;</span>Add Message<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ion-footer-bar</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面的 <code>ion-content</code> 会根据是否显示 <code>ion-header-bar</code> 和 <code>ion-footer-bar</code> 自动添加 has-header 和 has-footer 类。</p><p>当 ion-footer-bar 默认是隐藏的时候(ng-hide)，也会导致ion-content不带 has-footer.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;学习记录&quot;&gt;&lt;a href=&quot;#学习记录&quot; class=&quot;headerlink&quot; title=&quot;学习记录&quot;&gt;&lt;/a&gt;学习记录&lt;/h2&gt;&lt;p&gt;教程：&lt;a href=&quot;https://blog.cdn.ionluo.cn/pdf/Ionic%E5%AE%9E%E6%8</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>【业务】JIRA使用小结</title>
    <link href="http://www.ionluo.cn/blog/posts/7698394a.html"/>
    <id>http://www.ionluo.cn/blog/posts/7698394a.html</id>
    <published>2022-07-15T07:14:57.000Z</published>
    <updated>2022-08-29T01:14:16.616Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JIRA过滤常用配置"><a href="#JIRA过滤常用配置" class="headerlink" title="JIRA过滤常用配置"></a>JIRA过滤常用配置</h2><p>我关注的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">key <span class="keyword">in</span> watchedIssues() ORDER BY  priority,project,updatedDate DESC</span><br></pre></td></tr></table></figure><p>我经手过的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">assignee = currentUser() OR assignee was currentUser() OR reporter = currentUser()  ORDER BY  priority,project,updatedDate DESC</span><br></pre></td></tr></table></figure><p>我未解决的问题</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">assignee = currentUser() AND status <span class="keyword">in</span> (Open, <span class="string">&quot;In Progress&quot;</span>, Reopened) ORDER BY updatedDate DESC</span><br></pre></td></tr></table></figure><p>分配给我的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">assignee = currentUser() ORDER BY updatedDate DESC</span><br></pre></td></tr></table></figure><p>我创建的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reporter = currentUser() ORDER BY updatedDate DESC</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;JIRA过滤常用配置&quot;&gt;&lt;a href=&quot;#JIRA过滤常用配置&quot; class=&quot;headerlink&quot; title=&quot;JIRA过滤常用配置&quot;&gt;&lt;/a&gt;JIRA过滤常用配置&lt;/h2&gt;&lt;p&gt;我关注的&lt;/p&gt;
&lt;figure class=&quot;highlight bash</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>【前端】前端PDF预览(pdfjs)</title>
    <link href="http://www.ionluo.cn/blog/posts/3de8ed77.html"/>
    <id>http://www.ionluo.cn/blog/posts/3de8ed77.html</id>
    <published>2022-06-09T10:04:55.000Z</published>
    <updated>2022-06-10T09:03:44.738Z</updated>
    
    <content type="html"><![CDATA[<h2 id="印章无法显示问题"><a href="#印章无法显示问题" class="headerlink" title="印章无法显示问题"></a>印章无法显示问题</h2><h3 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h3><p>在 pdfjs/build/pdf.worker.js 搜索 <code>if (data.fieldType === &#39;Sig&#39;)</code>，如下修改</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (data.fieldType === <span class="string">&#x27;Sig&#x27;</span>) &#123;</span><br><span class="line">    _this2.setFlags(_util.AnnotationFlag.HIDDEN);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">改成</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (data.fieldType === <span class="string">&#x27;Sig&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// _this2.setFlags(_util.AnnotationFlag.HIDDEN);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>推荐，该方法影响相对可控，但是客户需要了解印章是需要数字签名校验的，这里的修改方式是放弃了数字签名的验证。</p><p><a href="https://github.com/mozilla/pdf.js/issues/13058">https://github.com/mozilla/pdf.js/issues/13058</a></p></blockquote><h3 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h3><p>升级pdfjs的版本</p><blockquote><p>在 <a href="https://github.com/mozilla/pdf.js/issues/13428">https://github.com/mozilla/pdf.js/issues/13428</a> 有提到最新版本已解决</p></blockquote><p><a href="https://github.com/mozilla/pdf.js/releases/tag/v2.14.305">pdfjs-2.14.305-dist.zip</a></p><blockquote><p>不确定升级版本是否有其他影响，比如渲染效果差异。</p><p>升级后并非支持了数字签名的验证，而是放弃了验证，增加了安全提示。</p><p>详见：<a href="https://github.com/mozilla/pdf.js/pull/13214">https://github.com/mozilla/pdf.js/pull/13214</a></p></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://segmentfault.com/q/1010000016537719">https://segmentfault.com/q/1010000016537719</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;印章无法显示问题&quot;&gt;&lt;a href=&quot;#印章无法显示问题&quot; class=&quot;headerlink&quot; title=&quot;印章无法显示问题&quot;&gt;&lt;/a&gt;印章无法显示问题&lt;/h2&gt;&lt;h3 id=&quot;方法1&quot;&gt;&lt;a href=&quot;#方法1&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    
    <category term="前端" scheme="http://www.ionluo.cn/blog/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="实战章无法显示问题" scheme="http://www.ionluo.cn/blog/tags/%E5%AE%9E%E6%88%98%E7%AB%A0%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
</feed>
